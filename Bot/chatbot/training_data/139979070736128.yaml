categories:
- StackOverflow
- C++
conversations:
- - What is the most effective way to get the index of an iterator of an std::vector?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I would prefer <code>it - vec.begin()</code>\
    \ precisely for the opposite reason given by Naveen: so it <em>wouldn't</em> compile\
    \ if you change the vector into a list. If you do this during every iteration,\
    \ you could easily end up turning an O(n) algorithm into an O(n^2) algorithm.</p>\n\
    <p>Another option, if you don't jump around in the container during iteration,\
    \ would be to keep the index as a second loop counter.</p>\n<p>Note: <code>it</code>\
    \ is a common name for a container iterator,<code>std::container_type::iterator\
    \ it;</code>.</p>\n</div>"
- - What is the most effective way to get the index of an iterator of an std::vector?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I would prefer <code>std::distance(vec.begin(),\
    \ it)</code> as it will allow me to change the container without any code changes.\
    \ For example, if you decide to use <code>std::list</code> instead of <code>std::vector</code>\
    \ which doesn't provide a random access iterator your code will still compile.\
    \ Since std::distance picks up the optimal method depending on iterator traits\
    \ you'll not have any performance degradation either.</p>\n</div>"
- - What is the most effective way to get the index of an iterator of an std::vector?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>As UncleBens and Naveen have\
    \ shown, there are good reasons for both. Which one is \"better\" depends on what\
    \ behavior you want: Do you want to guarantee constant-time behavior, or do you\
    \ want it to fall back to linear time when necessary?</p>\n<p><code>it - vec.begin()</code>\
    \ takes constant time, but the <code>operator -</code> is only defined on random\
    \ access iterators, so the code won't compile at all with list iterators, for\
    \ example.</p>\n<p><code>std::distance(vec.begin(), it)</code> works for all iterator\
    \ types, but will only be a constant-time operation if used on random access iterators.</p>\n\
    <p>Neither one is \"better\". Use the one that does what you need.</p>\n</div>"
- - How do I execute a command and get output of command within C++ using POSIX?
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>#include &lt;cstdio&gt;\n\
    #include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;stdexcept&gt;\n\
    #include &lt;string&gt;\n#include &lt;array&gt;\n\nstd::string exec(const char*\
    \ cmd) {\n    std::array&lt;char, 128&gt; buffer;\n    std::string result;\n \
    \   std::unique_ptr&lt;FILE, decltype(&amp;pclose)&gt; pipe(popen(cmd, \"r\"),\
    \ pclose);\n    if (!pipe) {\n        throw std::runtime_error(\"popen() failed!\"\
    );\n    }\n    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr)\
    \ {\n        result += buffer.data();\n    }\n    return result;\n}\n</code></pre>\n\
    <p>Pre-C++11 version:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n\
    #include &lt;stdio.h&gt;\n#include &lt;string&gt;\n\nstd::string exec(const char*\
    \ cmd) {\n    char buffer[128];\n    std::string result = \"\";\n    FILE* pipe\
    \ = popen(cmd, \"r\");\n    if (!pipe) throw std::runtime_error(\"popen() failed!\"\
    );\n    try {\n        while (fgets(buffer, sizeof buffer, pipe) != NULL) {\n\
    \            result += buffer;\n        }\n    } catch (...) {\n        pclose(pipe);\n\
    \        throw;\n    }\n    pclose(pipe);\n    return result;\n}\n</code></pre>\n\
    <p>Replace <code>popen</code> and <code>pclose</code> with <code>_popen</code>\
    \ and <code>_pclose</code> for Windows.</p>\n</div>"
- - How do I execute a command and get output of command within C++ using POSIX?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Getting both stdout and stderr\
    \ (and also writing to stdin, not shown here) is easy peasy with my <a href=\"\
    http://pstreams.sourceforge.net/\" rel=\"noreferrer\">pstreams</a> header, which\
    \ defines iostream classes that work like <code>popen</code>:</p>\n<pre><code>#include\
    \ &lt;pstream.h&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nint\
    \ main()\n{\n  // run a process and create a streambuf that reads its stdout and\
    \ stderr\n  redi::ipstream proc(\"./some_command\", redi::pstreams::pstdout |\
    \ redi::pstreams::pstderr);\n  std::string line;\n  // read child's stdout\n \
    \ while (std::getline(proc.out(), line))\n    std::cout &lt;&lt; \"stdout: \"\
    \ &lt;&lt; line &lt;&lt; '\\n';\n  // read child's stderr\n  while (std::getline(proc.err(),\
    \ line))\n    std::cout &lt;&lt; \"stderr: \" &lt;&lt; line &lt;&lt; '\\n';\n\
    } \n</code></pre>\n</div>"
- - How do I execute a command and get output of command within C++ using POSIX?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I'd use <strong>popen()</strong>\
    \ <em>(++waqas)</em>.</p>\n<p>But sometimes you need reading and writing...</p>\n\
    <p>It seems like nobody does things the hard way any more.</p>\n<p>(Assuming a\
    \ Unix/Linux/Mac environment, or perhaps Windows with a POSIX compatibility layer...)</p>\n\
    <pre><code>enum PIPE_FILE_DESCRIPTERS\n{\n  READ_FD  = 0,\n  WRITE_FD = 1\n};\n\
    \nenum CONSTANTS\n{\n  BUFFER_SIZE = 100\n};\n\nint\nmain()\n{\n  int       parentToChild[2];\n\
    \  int       childToParent[2];\n  pid_t     pid;\n  string    dataReadFromChild;\n\
    \  char      buffer[BUFFER_SIZE + 1];\n  ssize_t   readResult;\n  int       status;\n\
    \n  ASSERT_IS(0, pipe(parentToChild));\n  ASSERT_IS(0, pipe(childToParent));\n\
    \n  switch (pid = fork())\n  {\n    case -1:\n      FAIL(\"Fork failed\");\n \
    \     exit(-1);\n\n    case 0: /* Child */\n      ASSERT_NOT(-1, dup2(parentToChild[READ_FD],\
    \ STDIN_FILENO));\n      ASSERT_NOT(-1, dup2(childToParent[WRITE_FD], STDOUT_FILENO));\n\
    \      ASSERT_NOT(-1, dup2(childToParent[WRITE_FD], STDERR_FILENO));\n      ASSERT_IS(0,\
    \ close(parentToChild [WRITE_FD]));\n      ASSERT_IS(0, close(childToParent [READ_FD]));\n\
    \n      /*     file, arg0, arg1,  arg2 */\n      execlp(\"ls\", \"ls\", \"-al\"\
    , \"--color\");\n\n      FAIL(\"This line should never be reached!!!\");\n   \
    \   exit(-1);\n\n    default: /* Parent */\n      cout &lt;&lt; \"Child \" &lt;&lt;\
    \ pid &lt;&lt; \" process running...\" &lt;&lt; endl;\n\n      ASSERT_IS(0, close(parentToChild\
    \ [READ_FD]));\n      ASSERT_IS(0, close(childToParent [WRITE_FD]));\n\n     \
    \ while (true)\n      {\n        switch (readResult = read(childToParent[READ_FD],\n\
    \                                  buffer, BUFFER_SIZE))\n        {\n        \
    \  case 0: /* End-of-File, or non-blocking read. */\n            cout &lt;&lt;\
    \ \"End of file reached...\"         &lt;&lt; endl\n                 &lt;&lt;\
    \ \"Data received was (\"\n                 &lt;&lt; dataReadFromChild.size()\
    \ &lt;&lt; \"): \" &lt;&lt; endl\n                 &lt;&lt; dataReadFromChild\
    \                &lt;&lt; endl;\n\n            ASSERT_IS(pid, waitpid(pid, &amp;\
    \ status, 0));\n\n            cout &lt;&lt; endl\n                 &lt;&lt; \"\
    Child exit staus is:  \" &lt;&lt; WEXITSTATUS(status) &lt;&lt; endl\n        \
    \         &lt;&lt; endl;\n\n            exit(0);\n\n\n          case -1:\n   \
    \         if ((errno == EINTR) || (errno == EAGAIN))\n            {\n        \
    \      errno = 0;\n              break;\n            }\n            else\n   \
    \         {\n              FAIL(\"read() failed\");\n              exit(-1);\n\
    \            }\n\n          default:\n            dataReadFromChild . append(buffer,\
    \ readResult);\n            break;\n        }\n      } /* while (true) */\n  }\
    \ /* switch (pid = fork())*/\n}\n</code></pre>\n<hr/>\n<p>You also might want\
    \ to play around with select() and non-blocking reads.</p>\n<pre><code>fd_set\
    \          readfds;\nstruct timeval  timeout;\n\ntimeout.tv_sec  = 0;    /* Seconds\
    \ */\ntimeout.tv_usec = 1000; /* Microseconds */\n\nFD_ZERO(&amp;readfds);\nFD_SET(childToParent[READ_FD],\
    \ &amp;readfds);\n\nswitch (select (1 + childToParent[READ_FD], &amp;readfds,\
    \ (fd_set*)NULL, (fd_set*)NULL, &amp; timeout))\n{\n  case 0: /* Timeout expired\
    \ */\n    break;\n\n  case -1:\n    if ((errno == EINTR) || (errno == EAGAIN))\n\
    \    {\n      errno = 0;\n      break;\n    }\n    else\n    {\n      FAIL(\"\
    Select() Failed\");\n      exit(-1);\n    }\n\n  case 1:  /* We have input */\n\
    \    readResult = read(childToParent[READ_FD], buffer, BUFFER_SIZE);\n    // However\
    \ you want to handle it...\n    break;\n\n  default:\n    FAIL(\"How did we see\
    \ input on more than one file descriptor?\");\n    exit(-1);\n}\n</code></pre>\n\
    </div>"
- - Is C++ context-free or context-sensitive?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Below is my (current) favorite\
    \ demonstration of why parsing C++ is (probably) <a href=\"http://en.wikipedia.org/wiki/Turing_completeness\"\
    \ rel=\"noreferrer\">Turing-complete</a>, since it shows a program which is syntactically\
    \ correct if and only if a given integer is prime.</p>\n<p>So I assert that <strong>C++\
    \ is neither context-free nor context-sensitive</strong>.</p>\n<p>If you allow\
    \ arbitrary symbol sequences on both sides of any production, you produce an Type-0\
    \ grammar (\"unrestricted\") in the <a href=\"http://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy\"\
    \ rel=\"noreferrer\">Chomsky hierarchy</a>, which is more powerful than a context-sensitive\
    \ grammar; unrestricted grammars are Turing-complete. A context-sensitive (Type-1)\
    \ grammar allows multiple symbols of context on the left hand side of a production,\
    \ but the same context must appear on the right hand side of the production (hence\
    \ the name \"context-sensitive\"). [1] Context-sensitive grammars are equivalent\
    \ to <a href=\"http://en.wikipedia.org/wiki/Linear_bounded_automaton\" rel=\"\
    noreferrer\">linear-bounded Turing machines</a>.</p>\n<p>In the example program,\
    \ the prime computation could be performed by a linear-bounded Turing machine,\
    \ so it does not quite prove Turing equivalence, but the important part is that\
    \ the parser needs to perform the computation in order to perform syntactic analysis.\
    \ It could have been any computation expressible as a template instantiation and\
    \ there is every reason to believe that C++ template instantiation is Turing-complete.\
    \ See, for example, <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.14.3670\"\
    \ rel=\"noreferrer\">Todd L. Veldhuizen's 2003 paper</a>.</p>\n<p>Regardless,\
    \ C++ can be parsed by a computer, so it could certainly be parsed by a Turing\
    \ machine. Consequently, an unrestricted grammar could recognize it. Actually\
    \ writing such a grammar would be impractical, which is why the standard doesn't\
    \ try to do so. (See below.)</p>\n<p>The issue with \"ambiguity\" of certain expressions\
    \ is mostly a red herring. To start with, ambiguity is a feature of a particular\
    \ grammar, not a language. Even if a language can be proven to have no unambiguous\
    \ grammars, if it can be recognized by a context-free grammar, it's context-free.\
    \ Similarly, if it cannot be recognized by a context-free grammar but it can be\
    \ recognized by a context-sensitive grammar, it's context-sensitive. Ambiguity\
    \ is not relevant.</p>\n<p>But in any event, like line 21 (i.e. <code>auto b =\
    \ foo&lt;IsPrime&lt;234799&gt;&gt;::typen&lt;1&gt;();</code>) in the program below,\
    \ the expressions are not ambiguous at all; they are simply parsed differently\
    \ depending on context. In the simplest expression of the issue, the syntactic\
    \ category of certain identifiers is dependent on how they have been declared\
    \ (types and functions, for example), which means that the formal language would\
    \ have to recognize the fact that two arbitrary-length strings in the same program\
    \ are identical (declaration and use). This can be modelled by the \"copy\" grammar,\
    \ which is the grammar which recognizes two consecutive exact copies of the same\
    \ word. It's easy to prove with the <a href=\"http://en.wikipedia.org/wiki/Pumping_lemma\"\
    \ rel=\"noreferrer\">pumping lemma</a> that this language is not context-free.\
    \ A context-sensitive grammar for this language is possible, and a Type-0 grammar\
    \ is provided in the answer to this question: <a href=\"https://math.stackexchange.com/questions/163830/context-sensitive-grammar-for-the-copy-language\"\
    >https://math.stackexchange.com/questions/163830/context-sensitive-grammar-for-the-copy-language</a>\
    \ .</p>\n<p>If one were to attempt to write a context-sensitive (or unrestricted)\
    \ grammar to parse C++, it would quite possibly fill the universe with scribblings.\
    \ Writing a Turing machine to parse C++ would be an equally impossible undertaking.\
    \ Even writing a C++ program is difficult, and as far as I know none have been\
    \ proven correct. This is why the standard does not attempt to provide a complete\
    \ formal grammar, and why it chooses to write some of the parsing rules in technical\
    \ English.</p>\n<p>What looks like a formal grammar in the C++ standard is not\
    \ the complete formal definition of the syntax of the C++ language. It's not even\
    \ the complete formal definition of the language after preprocessing, which might\
    \ be easier to formalize. (That wouldn't be the language, though: the C++ language\
    \ as defined by the standard includes the preprocessor, and the operation of the\
    \ preprocessor is described algorithmically since it would be extremely hard to\
    \ describe in any grammatical formalism. It is in that section of the standard\
    \ where lexical decomposition is described, including the rules where it must\
    \ be applied more than once.)</p>\n<p>The various grammars (two overlapping grammars\
    \ for lexical analysis, one which takes place before preprocessing and the other,\
    \ if necessary, afterwards, plus the \"syntactic\" grammar) are collected in Appendix\
    \ A, with this important note (emphasis added):</p>\n<blockquote>\n<p>This summary\
    \ of C++ syntax is intended to be an aid to comprehension. <b>It is not an exact\
    \ statement of the language</b>. In particular, the grammar described here accepts\
    \ a <i>superset of valid C++ constructs</i>. Disambiguation rules (6.8, 7.1, 10.2)\
    \ must be applied to distinguish expressions from declarations. Further, access\
    \ control, ambiguity, and type rules must be used to weed out syntactically valid\
    \ but meaningless constructs.</p>\n</blockquote>\n<p>Finally, here's the promised\
    \ program. Line 21 is syntactically correct if and only if the N in <code>IsPrime&lt;N&gt;</code>\
    \ is prime. Otherwise, <code>typen</code> is an integer, not a template, so <code>typen&lt;1&gt;()</code>\
    \ is parsed as <code>(typen&lt;1)&gt;()</code> which is syntactically incorrect\
    \ because <code>()</code> is not a syntactically valid expression.</p>\n<pre><code>template&lt;bool\
    \ V&gt; struct answer { answer(int) {} bool operator()(){return V;}};\n\ntemplate&lt;bool\
    \ no, bool yes, int f, int p&gt; struct IsPrimeHelper\n  : IsPrimeHelper&lt;p\
    \ % f == 0, f * f &gt;= p, f + 2, p&gt; {};\ntemplate&lt;bool yes, int f, int\
    \ p&gt; struct IsPrimeHelper&lt;true, yes, f, p&gt; { using type = answer&lt;false&gt;;\
    \ };\ntemplate&lt;int f, int p&gt; struct IsPrimeHelper&lt;false, true, f, p&gt;\
    \ { using type = answer&lt;true&gt;; };\n\ntemplate&lt;int I&gt; using IsPrime\
    \ = typename IsPrimeHelper&lt;!(I&amp;1), false, 3, I&gt;::type;\ntemplate&lt;int\
    \ I&gt;\nstruct X { static const int i = I; int a[i]; }; \n\ntemplate&lt;typename\
    \ A&gt; struct foo;\ntemplate&lt;&gt;struct foo&lt;answer&lt;true&gt;&gt;{\n \
    \ template&lt;int I&gt; using typen = X&lt;I&gt;;\n};\ntemplate&lt;&gt; struct\
    \ foo&lt;answer&lt;false&gt;&gt;{\n  static const int typen = 0;\n};\n\nint main()\
    \ {\n  auto b = foo&lt;IsPrime&lt;234799&gt;&gt;::typen&lt;1&gt;(); // Syntax\
    \ error if not prime\n  return 0;\n}\n</code></pre>\n<hr/>\n<p>[1] To put it more\
    \ technically, every production in a context-sensitive grammar must be of the\
    \ form:</p>\n<p><code>αAβ &amp;rightarrow; αγβ</code></p>\n<p>where <code>A</code>\
    \ is a non-terminal and <code>α</code>, <code>β</code> are possibly empty sequences\
    \ of grammar symbols, and <code>γ</code> is a non-empty sequence. (Grammar symbols\
    \ may be either terminals or non-terminals). </p>\n<p>This can be read as <code>A\
    \ &amp;rightarrow; γ</code> only in the context <code>[α, β]</code>. In a context-free\
    \ (Type 2) grammar, <code>α</code> and <code>β</code> must be empty.</p>\n<p>It\
    \ turns out that you can also restrict grammars with the \"monotonic\" restriction,\
    \ where every production must be of the form:</p>\n<p><code>α &amp;rightarrow;\
    \ β</code> where <code>|α| ≥ |β| &gt; 0</code>  (<code>|α|</code> means \"the\
    \ length of <code>α</code>\")</p>\n<p>It's possible to prove that the set of languages\
    \ recognized by monotonic grammars is exactly the same as the set of languages\
    \ recognized by context-sensitive grammars, and it's often the case that it's\
    \ easier to base proofs on monotonic grammars. Consequently, it's pretty common\
    \ to see \"context-sensitive\" used as though it meant \"monotonic\".</p>\n</div>"
- - Is C++ context-free or context-sensitive?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>First, you rightly observed there\
    \ are no context sensitive rules in the grammar at the end of the C++ standard,\
    \ so that grammar <em>is</em> context-free.</p>\n<p>However, that grammar doesn't\
    \ precisely describe the C++ language, because it produces non-C++ programs such\
    \ as</p>\n<pre><code>int m() { m++; }\n</code></pre>\n<p>or</p>\n<pre><code>typedef\
    \ static int int;\n</code></pre>\n<p>The C++ language defined as \"the set of\
    \ well-formed C++ programs\" is not context-free (it's possible to show that merely\
    \ demanding variables to be declared makes it so). Given you can theoretically\
    \ write Turing-complete programs in templates and make a program ill-formed based\
    \ on their result, it's not even context-sensitive.</p>\n<p>Now, (ignorant) people\
    \ (usually not language theorists, but parser designers) typically use \"not context-free\"\
    \ in some of the following meanings</p>\n<ul>\n<li>ambiguous</li>\n<li>can't be\
    \ parsed with Bison</li>\n<li>not LL(k), LR(k), LALR(k) or whatever parser-defined\
    \ language class they chose</li>\n</ul>\n<p>The grammar at the back of the standard\
    \ doesn't satisfy these categories (i.e. it is ambiguous, not LL(k)...) so C++\
    \ grammar is \"not context-free\" for them. And in a sense, they're right it's\
    \ damn well hard to produce a working C++ parser.</p>\n<p>Note that the properties\
    \ here used are only weakly connected to context-free languages - ambiguity doesn't\
    \ have anything to do with context-sensitivity (in fact, context-sensitive rules\
    \ typically help disambiguate productions), the other two are merely subsets of\
    \ context-free languages. And parsing context-free languages is not a linear process\
    \ (although parsing deterministic ones is).</p>\n</div>"
- - Is C++ context-free or context-sensitive?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Yes. The following expression\
    \ has a different <em>order of operations</em> depending on <em>type resolved\
    \ context</em>:</p>\n<p>Edit: When the actual order of operation varies, it makes\
    \ it incredibly difficult to use a \"regular\" compiler that parses to an undecorated\
    \ AST before decorating it (propagating type information). Other context sensitive\
    \ things mentioned are \"rather easy\" compared to this (not that template evaluation\
    \ is at all easy).</p>\n<pre><code>#if FIRST_MEANING\n   template&lt;bool B&gt;\n\
    \   class foo\n   { };\n#else\n   static const int foo = 0;\n   static const int\
    \ bar = 15;\n#endif\n</code></pre>\n<p>Followed by:</p>\n<pre><code>static int\
    \ foobar( foo &lt; 2 ? 1 &lt; 1 : 0 &gt; &amp; bar );\n</code></pre>\n</div>"
- - 'Why are #ifndef and #define used in C++ header files?'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Those are called <a href=\"http://en.wikipedia.org/wiki/Include_guard\"\
    \ rel=\"noreferrer\">#include guards</a>.</p>\n<p>Once the header is included,\
    \ it checks if a unique value (in this case <code>HEADERFILE_H</code>) is defined.\
    \ Then if it's not defined, it defines it and continues to the rest of the page.</p>\n\
    <p>When the code is included again, the first <code>ifndef</code> fails, resulting\
    \ in a blank file.</p>\n<p>That prevents double declaration of any identifiers\
    \ such as types, enums and static variables.</p>\n</div>"
- - 'Why are #ifndef and #define used in C++ header files?'
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>#ifndef &lt;token&gt;\n\
    /* code */\n#else\n/* code to include if the token is defined */\n#endif\n</code></pre>\n\
    <p><code>#ifndef</code> checks whether the given token has been <code>#defined</code>\
    \ earlier in the file or in an included file; if not, it includes the code between\
    \ it and the closing <code>#else</code> or, if no <code>#else</code> is present,\
    \ <code>#endif</code> statement. <code>#ifndef</code> is often used to make header\
    \ files idempotent by defining a token once the file has been included and checking\
    \ that the token was not set at the top of that file.</p>\n<pre><code>#ifndef\
    \ _INCL_GUARD\n#define _INCL_GUARD\n#endif\n</code></pre>\n</div>"
- - 'Why are #ifndef and #define used in C++ header files?'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This prevent from the multiple\
    \ inclusion of same header file multiple time.</p>\n<pre><code>#ifndef __COMMON_H__\n\
    #define __COMMON_H__\n//header file content\n#endif\n</code></pre>\n<p>Suppose\
    \ you have included this header file in multiple files. So first time \n__COMMON_H__\
    \ is not defined, it will get defined and header file included.</p>\n<p>Next time\
    \ __COMMON_H__ is defined, so it will not include again.  </p>\n</div>"
- - Why doesn't Java offer operator overloading?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Assuming you wanted to overwrite\
    \ the previous value of the object referred to by <code>a</code>, then a member\
    \ function would have to be invoked.</p>\n<pre><code>Complex a, b, c;\n// ...\n\
    a = b.add(c);\n</code></pre>\n<p>In C++, this expression tells the compiler to\
    \ create three (3) objects on the stack, perform addition, and <em>copy</em> the\
    \ resultant value from the temporary object into the existing object <code>a</code>.</p>\n\
    <p>However, in Java, <code>operator=</code> doesn't perform value copy for reference\
    \ types, and users can only create new reference types, not value types. So for\
    \ a user-defined type named <code>Complex</code>, assignment means to copy a reference\
    \ to an existing value.</p>\n<p>Consider instead:</p>\n<pre><code>b.set(1, 0);\
    \ // initialize to real number '1'\na = b; \nb.set(2, 0);\nassert( !a.equals(b)\
    \ ); // this assertion will fail\n</code></pre>\n<p>In C++, this copies the value,\
    \ so the comparison will result not-equal. In Java, <code>operator=</code> performs\
    \ reference copy, so <code>a</code> and <code>b</code> are now referring to the\
    \ same value. As a result, the comparison will produce 'equal', since the object\
    \ will compare equal to itself.</p>\n<p>The difference between copies and references\
    \ only adds to the confusion of operator overloading. As @Sebastian mentioned,\
    \ Java and C# both have to deal with value and reference equality separately --\
    \ <code>operator+</code> would likely deal with values and objects, but <code>operator=</code>\
    \ is already implemented to deal with references.</p>\n<p>In C++, you should only\
    \ be dealing with one kind of comparison at a time, so it can be less confusing.\
    \ For example, on <code>Complex</code>, <code>operator=</code> and <code>operator==</code>\
    \ are both working on values -- copying values and comparing values respectively.</p>\n\
    </div>"
- - Why doesn't Java offer operator overloading?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There are a lot of posts complaining\
    \ about operator overloading.</p>\n<p>I felt I had to clarify the \"operator overloading\"\
    \ concepts, offering an alternative viewpoint on this concept.</p>\n<h1>Code obfuscating?</h1>\n\
    <p>This argument is a fallacy.</p>\n<h2>Obfuscating is possible in all languages...</h2>\n\
    <p>It is as easy to obfuscate code in C or Java through functions/methods as it\
    \ is in C++ through operator overloads:</p>\n<pre><code>// C++\nT operator + (const\
    \ T &amp; a, const T &amp; b) // add ?\n{\n   T c ;\n   c.value = a.value - b.value\
    \ ; // subtract !!!\n   return c ;\n}\n\n// Java\nstatic T add (T a, T b) // add\
    \ ?\n{\n   T c = new T() ;\n   c.value = a.value - b.value ; // subtract !!!\n\
    \   return c ;\n}\n\n/* C */\nT add (T a, T b) /* add ? */\n{\n   T c ;\n   c.value\
    \ = a.value - b.value ; /* subtract !!! */\n   return c ;\n}\n</code></pre>\n\
    <h2>...Even in Java's standard interfaces</h2>\n<p>For another example, let's\
    \ see the <a href=\"http://download.oracle.com/javase/7/docs/api/java/lang/Cloneable.html\"\
    \ rel=\"noreferrer\"><code>Cloneable</code> interface</a> in Java:</p>\n<p>You\
    \ are supposed to clone the object implementing this interface. But you could\
    \ lie. And create a different object. In fact, this interface is so weak you could\
    \ return another type of object altogether, just for the fun of it:</p>\n<pre><code>class\
    \ MySincereHandShake implements Cloneable\n{\n    public Object clone()\n    {\n\
    \       return new MyVengefulKickInYourHead() ;\n    }\n}\n</code></pre>\n<p>As\
    \ the <code>Cloneable</code> interface can be abused/obfuscated, should it be\
    \ banned on the same grounds C++ operator overloading is supposed to be?</p>\n\
    <p>We could overload the <code>toString()</code> method of a <code>MyComplexNumber</code>\
    \ class to have it return the stringified hour of the day. Should the <code>toString()</code>\
    \ overloading be banned, too? We could sabotage <code>MyComplexNumber.equals</code>\
    \ to have it return a random value, modify the operands... etc. etc. etc..</p>\n\
    <p><b>In Java, as in C++, or whatever language, the programmer must respect a\
    \ minimum of semantics when writing code. This means implementing a <code>add</code>\
    \ function that adds, and <code>Cloneable</code> implementation method that clones,\
    \ and a <code>++</code> operator than increments.</b></p>\n<h1>What's obfuscating\
    \ anyway?</h1>\n<p>Now that we know that code can be sabotaged even through the\
    \ pristine Java methods, we can ask ourselves about the real use of operator overloading\
    \ in C++?</p>\n<h2>Clear and natural notation: methods vs. operator overloading?</h2>\n\
    <p>We'll compare below, for different cases, the \"same\" code in Java and C++,\
    \ to have an idea of which kind of coding style is clearer.</p>\n<h3>Natural comparisons:</h3>\n\
    <pre><code>// C++ comparison for built-ins and user-defined types\nbool    isEqual\
    \          = A == B ;\nbool    isNotEqual       = A != B ;\nbool    isLesser \
    \        = A &lt;  B ;\nbool    isLesserOrEqual  = A &lt;= B ;\n\n// Java comparison\
    \ for user-defined types\nboolean isEqual          = A.equals(B) ;\nboolean isNotEqual\
    \       = ! A.equals(B) ;\nboolean isLesser         = A.comparesTo(B) &lt; 0 ;\n\
    boolean isLesserOrEqual  = A.comparesTo(B) &lt;= 0 ;\n</code></pre>\n<p>Please\
    \ note that A and B could be of any type in C++, as long as the operator overloads\
    \ are provided. In Java, when A and B are not primitives, the code can become\
    \ very confusing, even for primitive-like objects (BigInteger, etc.)...</p>\n\
    <h3>Natural array/container accessors and subscripting:</h3>\n<pre><code>// C++\
    \ container accessors, more natural\nvalue        = myArray[25] ;         // subscript\
    \ operator\nvalue        = myVector[25] ;        // subscript operator\nvalue\
    \        = myString[25] ;        // subscript operator\nvalue        = myMap[\"\
    25\"] ;         // subscript operator\nmyArray[25]  = value ;               //\
    \ subscript operator\nmyVector[25] = value ;               // subscript operator\n\
    myString[25] = value ;               // subscript operator\nmyMap[\"25\"]  = value\
    \ ;               // subscript operator\n\n// Java container accessors, each one\
    \ has its special notation\nvalue        = myArray[25] ;         // subscript\
    \ operator\nvalue        = myVector.get(25) ;    // method get\nvalue        =\
    \ myString.charAt(25) ; // method charAt\nvalue        = myMap.get(\"25\") ; \
    \    // method get\nmyArray[25]  = value ;               // subscript operator\n\
    myVector.set(25, value) ;            // method set\nmyMap.put(\"25\", value) ;\
    \             // method put\n</code></pre>\n<p>In Java, we see that for each container\
    \ to do the same thing (access its content through an index or identifier), we\
    \ have a different way to do it, which is confusing.</p>\n<p>In C++, each container\
    \ uses the same way to access its content, thanks to operator overloading.</p>\n\
    <h3>Natural advanced types manipulation</h3>\n<p>The examples below use a <code>Matrix</code>\
    \ object, found using the first links found on Google for \"<a href=\"https://encrypted.google.com/search?q=Java+Matrix+object\"\
    \ rel=\"noreferrer\">Java Matrix object</a>\" and \"<a href=\"https://encrypted.google.com/search?q=c%2B%2B+Matrix+object\"\
    \ rel=\"noreferrer\">c++ Matrix object</a>\":</p>\n<pre><code>// C++ YMatrix matrix\
    \ implementation on CodeProject\n// http://www.codeproject.com/KB/architecture/ymatrix.aspx\n\
    // A, B, C, D, E, F are Matrix objects;\nE =  A * (B / 2) ;\nE += (A - B) * (C\
    \ + D) ;\nF =  E ;                  // deep copy of the matrix\n\n// Java JAMA\
    \ matrix implementation (seriously...)\n// http://math.nist.gov/javanumerics/jama/doc/\n\
    // A, B, C, D, E, F are Matrix objects;\nE = A.times(B.times(0.5)) ;\nE.plusEquals(A.minus(B).times(C.plus(D)))\
    \ ;\nF = E.copy() ;            // deep copy of the matrix\n</code></pre>\n<p>And\
    \ this is not limited to matrices. The <code>BigInteger</code> and <code>BigDecimal</code>\
    \ classes of Java suffer from the same confusing verbosity, whereas their equivalents\
    \ in C++ are as clear as built-in types.</p>\n<h3>Natural iterators:</h3>\n<pre><code>//\
    \ C++ Random Access iterators\n++it ;                  // move to the next item\n\
    --it ;                  // move to the previous item\nit += 5 ;              \
    \ // move to the next 5th item (random access)\nvalue = *it ;           // gets\
    \ the value of the current item\n*it = 3.1415 ;          // sets the value 3.1415\
    \ to the current item\n(*it).foo() ;           // call method foo() of the current\
    \ item\n\n// Java ListIterator&lt;E&gt; \"bi-directional\" iterators\nvalue =\
    \ it.next() ;     // move to the next item &amp; return the value\nvalue = it.previous()\
    \ ; // move to the previous item &amp; return the value\nit.set(3.1415) ;    \
    \    // sets the value 3.1415 to the current item\n</code></pre>\n<h3>Natural\
    \ functors:</h3>\n<pre><code>// C++ Functors\nmyFunctorObject(\"Hello World\"\
    , 42) ;\n\n// Java Functors ???\nmyFunctorObject.execute(\"Hello World\", 42)\
    \ ;\n</code></pre>\n<h3>Text concatenation:</h3>\n<pre><code>// C++ stream handling\
    \ (with the &lt;&lt; operator)\n                    stringStream   &lt;&lt; \"\
    Hello \" &lt;&lt; 25 &lt;&lt; \" World\" ;\n                    fileStream   \
    \  &lt;&lt; \"Hello \" &lt;&lt; 25 &lt;&lt; \" World\" ;\n                   \
    \ outputStream   &lt;&lt; \"Hello \" &lt;&lt; 25 &lt;&lt; \" World\" ;\n     \
    \               networkStream  &lt;&lt; \"Hello \" &lt;&lt; 25 &lt;&lt; \" World\"\
    \ ;\nanythingThatOverloadsShiftOperator &lt;&lt; \"Hello \" &lt;&lt; 25 &lt;&lt;\
    \ \" World\" ;\n\n// Java concatenation\nmyStringBuffer.append(\"Hello \").append(25).append(\"\
    \ World\") ;\n</code></pre>\n<p>Ok, in Java you can use <code>MyString = \"Hello\
    \ \" + 25 + \" World\" ;</code> too... But, wait a second: This is operator overloading,\
    \ isn't it? Isn't it cheating???</p>\n<p>:-D</p>\n<h2>Generic code?</h2>\n<p>The\
    \ same generic code modifying operands should be usable both for built-ins/primitives\
    \ (which have no interfaces in Java), standard objects (which could not have the\
    \ right interface), and user-defined objects.</p>\n<p>For example, calculating\
    \ the average value of two values of arbitrary types:</p>\n<pre><code>// C++ primitive/advanced\
    \ types\ntemplate&lt;typename T&gt;\nT getAverage(const T &amp; p_lhs, const T\
    \ &amp; p_rhs)\n{\n   return (p_lhs + p_rhs) / 2 ;\n}\n\nint     intValue    \
    \ = getAverage(25, 42) ;\ndouble  doubleValue  = getAverage(25.25, 42.42) ;\n\
    complex complexValue = getAverage(cA, cB) ; // cA, cB are complex\nMatrix  matrixValue\
    \  = getAverage(mA, mB) ; // mA, mB are Matrix\n\n// Java primitive/advanced types\n\
    // It won't really work in Java, even with generics. Sorry.\n</code></pre>\n<h1>Discussing\
    \ operator overloading</h1>\n<p>Now that we have seen fair comparisons between\
    \ C++ code using operator overloading, and the same code in Java, we can now discuss\
    \ \"operator overloading\" as a concept.</p>\n<h2>Operator overloading existed\
    \ since before computers</h2>\n<p><b>Even outside of computer science, there is\
    \ operator overloading: For example, in mathematics, operators like <code>+</code>,\
    \ <code>-</code>, <code>*</code>, etc. are overloaded.</b></p>\n<p>Indeed, the\
    \ signification of <code>+</code>, <code>-</code>, <code>*</code>, etc. changes\
    \ depending on the types of the operands (numerics, vectors, quantum wave functions,\
    \ matrices, etc.).</p>\n<p>Most of us, as part of our science courses, learned\
    \ multiple significations for operators, depending on the types of the operands.\
    \ Did we find them confusing, them?</p>\n<h2>Operator overloading depends on its\
    \ operands</h2>\n<p>This is the most important part of operator overloading: Like\
    \ in mathematics, or in physics, the operation depends on its operands' types.</p>\n\
    <p>So, know the type of the operand, and you will know the effect of the operation.</p>\n\
    <h2>Even C and Java have (hard-coded) operator overloading</h2>\n<p>In C, the\
    \ real behavior of an operator will change according to its operands. For example,\
    \ adding two integers is different than adding two doubles, or even one integer\
    \ and one double. There is even the whole pointer arithmetic domain (without casting,\
    \ you can add to a pointer an integer, but you cannot add two pointers...).</p>\n\
    <p>In Java, there is no pointer arithmetic, but someone still found string concatenation\
    \ without the <code>+</code> operator would be ridiculous enough to justify an\
    \ exception in the \"operator overloading is evil\" creed.</p>\n<p>It's just that\
    \ you, as a C (for historical reasons) or Java (for <i>personal reasons</i>, see\
    \ below) coder, you can't provide your own.</p>\n<h2>In C++, operator overloading\
    \ is not optional...</h2>\n<p>In C++, operator overloading for built-in types\
    \ is not possible (and this is a good thing), but <i>user-defined</i> types can\
    \ have <i>user-defined</i> operator overloads.</p>\n<p>As already said earlier,\
    \ in C++, and to the contrary to Java, user-types are not considered second-class\
    \ citizens of the language, when compared to built-in types. So, if built-in types\
    \ have operators, user types should be able to have them, too.</p>\n<p>The truth\
    \ is that, like the <code>toString()</code>, <code>clone()</code>, <code>equals()</code>\
    \ methods are for Java (<i>i.e. quasi-standard-like</i>), C++ operator overloading\
    \ is so much part of C++ that it becomes as natural as the original C operators,\
    \ or the before mentioned Java methods.</p>\n<p>Combined with template programming,\
    \ operator overloading becomes a well known design pattern. In fact, you cannot\
    \ go very far in STL without using overloaded operators, and overloading operators\
    \ for your own class.</p>\n<h2>...but it should not be abused</h2>\n<p>Operator\
    \ overloading should strive to respect the semantics of the operator. Do not subtract\
    \ in a <code>+</code> operator (as in \"do not subtract in a <code>add</code>\
    \ function\", or \"return crap in a <code>clone</code> method\").</p>\n<p>Cast\
    \ overloading can be very dangerous because they can lead to ambiguities. So they\
    \ should really be reserved for well defined cases. As for <code>&amp;&amp;</code>\
    \ and <code>||</code>, do not ever overload them unless you really know what you're\
    \ doing, as you'll lose the the short circuit evaluation that the native operators\
    \ <code>&amp;&amp;</code> and <code>||</code> enjoy.</p>\n<h1>So... Ok... Then\
    \ why it is not possible in Java?</h1>\n<p>Because James Gosling said so:</p>\n\
    <blockquote>\n<p>I left out operator overloading as a <b>fairly personal choice</b>\
    \ because I had seen too many people abuse it in C++.</p>\n<p><i>James Gosling.\
    \ Source: <a href=\"http://www.gotw.ca/publications/c_family_interview.htm\" rel=\"\
    noreferrer\">http://www.gotw.ca/publications/c_family_interview.htm</a></i></p>\n\
    </blockquote>\n<p>Please compare Gosling's text above with Stroustrup's below:</p>\n\
    <blockquote>\n<p>Many C++ design decisions have their roots in my dislike for\
    \ forcing people to do things in some particular way [...] Often, I was tempted\
    \ to outlaw a feature I personally disliked, I refrained from doing so because\
    \ <b>I did not think I had the right to force my views on others</b>.</p>\n<p><i>Bjarne\
    \ Stroustrup. Source: The Desing and Evolution of C++ (1.3 General Background)</i></p>\n\
    </blockquote>\n<h2>Would operator overloading benefit Java?</h2>\n<p>Some objects\
    \ would greatly benefit from operator overloading (concrete or numerical types,\
    \ like BigDecimal, complex numbers, matrices, containers, iterators, comparators,\
    \ parsers etc.).</p>\n<p>In C++, you can profit from this benefit because of Stroustrup's\
    \ humility. In Java, you're simply screwed because of Gosling's <i>personal choice</i>.</p>\n\
    <h2>Could it be added to Java?</h2>\n<p>The reasons for not adding operator overloading\
    \ now in Java could be a mix of internal politics, allergy to the feature, distrust\
    \ of developers (you know, the saboteur ones that seem to haunt Java teams...),\
    \ compatibility with the previous JVMs, time to write a correct specification,\
    \ etc..</p>\n<p>So don't hold your breath waiting for this feature...</p>\n<h2>But\
    \ they do it in C#!!!</h2>\n<p>Yeah...</p>\n<p>While this is far from being the\
    \ only difference between the two languages, this one never fails to amuse me.</p>\n\
    <p>Apparently, the C# folks, with their <i>\"every primitive is a <code>struct</code>,\
    \ and a <code>struct</code> derives from Object\"</i>, got it right at first try.</p>\n\
    <h2>And they do it in <a href=\"https://en.wikipedia.org/wiki/Operator_overloading\"\
    \ rel=\"noreferrer\">other languages</a>!!!</h2>\n<p>Despite all the FUD against\
    \ used defined operator overloading, the following languages support it: <a href=\"\
    https://stackoverflow.com/q/1991240\">Scala</a>, <a href=\"https://www.dartlang.org/articles/idiomatic-dart/#operators\"\
    \ rel=\"noreferrer\">Dart</a>, <a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\"\
    \ rel=\"noreferrer\">Python</a>, <a href=\"https://msdn.microsoft.com/en-us/library/dd233204.aspx\"\
    \ rel=\"noreferrer\">F#</a>, <a href=\"https://msdn.microsoft.com/en-us/library/aa288467.aspx\"\
    \ rel=\"noreferrer\">C#</a>, <a href=\"http://dlang.org/operatoroverloading.html\"\
    \ rel=\"noreferrer\">D</a>, <a href=\"http://www.cap-lore.com/Languages/A68Ops.html\"\
    \ rel=\"noreferrer\">Algol 68</a>, <a href=\"http://logos.cs.uic.edu/476/resources/SmallTalk/cs476_Smalltalk/Smalltalk.htm\"\
    \ rel=\"noreferrer\">Smalltalk</a>, <a href=\"http://www.groovy-lang.org/operators.html#Operator-Overloading\"\
    \ rel=\"noreferrer\">Groovy</a>, <a href=\"http://design.perl6.org/S06.html#Operator_overloading\"\
    \ rel=\"noreferrer\">Perl 6</a>, C++, <a href=\"https://stackoverflow.com/a/3331974\"\
    >Ruby</a>, <a href=\"https://stackoverflow.com/questions/16241556\">Haskell</a>,\
    \ <a href=\"https://fr.mathworks.com/help/matlab/matlab_oop/implementing-operators-for-your-class.html\"\
    \ rel=\"noreferrer\">MATLAB</a>, <a href=\"http://se.ethz.ch/~meyer/publications/online/eiffel/basic.html\"\
    \ rel=\"noreferrer\">Eiffel</a>, <a href=\"http://lua-users.org/wiki/MetamethodsTutorial\"\
    \ rel=\"noreferrer\">Lua</a>, <a href=\"https://stackoverflow.com/a/1535235\"\
    >Clojure</a>, <a href=\"http://research.physics.illinois.edu/ElectronicStructure/498-s97/comp_info/overload.html\"\
    \ rel=\"noreferrer\">Fortran 90</a>, <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html#//apple_ref/doc/uid/TP40014097-CH27-ID42\"\
    \ rel=\"noreferrer\">Swift</a>, <a href=\"http://archive.adaic.com/standards/83lrm/html/lrm-06-07.html\"\
    \ rel=\"noreferrer\">Ada</a>, <a href=\"http://edn.embarcadero.com/article/34324\"\
    \ rel=\"noreferrer\">Delphi 2005</a>...</p>\n<p>So many languages, with so many\
    \ different (and sometimes opposing) philosophies, and yet they all agree on that\
    \ point.</p>\n<p>Food for thought...</p>\n</div>"
- - Why doesn't Java offer operator overloading?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>James Gosling likened designing\
    \ Java to the following:</p>\n<blockquote>\n<p>\"There's this principle about\
    \ moving, when you move from one apartment to another apartment. An interesting\
    \ experiment is to pack up your apartment and put everything in boxes, then move\
    \ into the next apartment and not unpack anything until you need it. So you're\
    \ making your first meal, and you're pulling something out of a box. Then after\
    \ a month or so you've used that to pretty much figure out what things in your\
    \ life you actually need, and then you take the rest of the stuff -- forget how\
    \ much you like it or how cool it is -- and you just throw it away. It's amazing\
    \ how that simplifies your life, and you can use that principle in all kinds of\
    \ design issues: not do things just because they're cool or just because they're\
    \ interesting.\"</p>\n</blockquote>\n<p>You can read the <a href=\"http://www.gotw.ca/publications/c_family_interview.htm\"\
    \ rel=\"noreferrer\">context of the quote here</a></p>\n<p>Basically operator\
    \ overloading is great for a class that models some kind of point, currency or\
    \ complex number. But after that you start running out of examples fast.</p>\n\
    <p>Another factor was the abuse of the feature in C++ by developers overloading\
    \ operators like '&amp;&amp;', '||', the cast operators and of course 'new'. The\
    \ complexity resulting from combining this with pass by value and exceptions is\
    \ well covered in the <a href=\"https://rads.stackoverflow.com/amzn/click/com/0201615622\"\
    \ rel=\"noreferrer\">Exceptional C++</a> book.</p>\n</div>"
- - C++11 rvalues and move semantics confusion (return statement)
  - "<div class=\"post-text\" itemprop=\"text\">\n<h2>First example</h2>\n<pre><code>std::vector&lt;int&gt;\
    \ return_vector(void)\n{\n    std::vector&lt;int&gt; tmp {1,2,3,4,5};\n    return\
    \ tmp;\n}\n\nstd::vector&lt;int&gt; &amp;&amp;rval_ref = return_vector();\n</code></pre>\n\
    <p>The first example returns a temporary which is caught by <code>rval_ref</code>.\
    \ That temporary will have its life extended beyond the <code>rval_ref</code>\
    \ definition and you can use it as if you had caught it by value.  This is very\
    \ similar to the following:</p>\n<pre><code>const std::vector&lt;int&gt;&amp;\
    \ rval_ref = return_vector();\n</code></pre>\n<p>except that in my rewrite you\
    \ obviously can't use <code>rval_ref</code> in a non-const manner.</p>\n<h2>Second\
    \ example</h2>\n<pre><code>std::vector&lt;int&gt;&amp;&amp; return_vector(void)\n\
    {\n    std::vector&lt;int&gt; tmp {1,2,3,4,5};\n    return std::move(tmp);\n}\n\
    \nstd::vector&lt;int&gt; &amp;&amp;rval_ref = return_vector();\n</code></pre>\n\
    <p>In the second example you have created a run time error.  <code>rval_ref</code>\
    \ now holds a reference to the destructed <code>tmp</code> inside the function.\
    \  With any luck, this code would immediately crash.</p>\n<h2>Third example</h2>\n\
    <pre><code>std::vector&lt;int&gt; return_vector(void)\n{\n    std::vector&lt;int&gt;\
    \ tmp {1,2,3,4,5};\n    return std::move(tmp);\n}\n\nstd::vector&lt;int&gt; &amp;&amp;rval_ref\
    \ = return_vector();\n</code></pre>\n<p>Your third example is roughly equivalent\
    \ to your first.  The <code>std::move</code> on <code>tmp</code> is unnecessary\
    \ and can actually be a performance pessimization as it will inhibit return value\
    \ optimization.</p>\n<p>The best way to code what you're doing is:</p>\n<h2>Best\
    \ practice</h2>\n<pre><code>std::vector&lt;int&gt; return_vector(void)\n{\n  \
    \  std::vector&lt;int&gt; tmp {1,2,3,4,5};\n    return tmp;\n}\n\nstd::vector&lt;int&gt;\
    \ rval_ref = return_vector();\n</code></pre>\n<p>I.e. just as you would in C++03.\
    \  <code>tmp</code> is implicitly treated as an rvalue in the return statement.\
    \  It will either be returned via return-value-optimization (no copy, no move),\
    \ or if the compiler decides it can not perform RVO, then it <a href=\"https://stackoverflow.com/questions/11088023/is-an-object-guaranteed-to-be-moved-when-it-is-returned\"\
    >will use vector's move constructor to do the return</a>.  Only if RVO is not\
    \ performed, and if the returned type did not have a move constructor would the\
    \ copy constructor be used for the return.</p>\n</div>"
- - C++11 rvalues and move semantics confusion (return statement)
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>None of them will copy, but the\
    \ second will refer to a destroyed vector. Named rvalue references almost never\
    \ exist in regular code. You write it just how you would have written a copy in\
    \ C++03.</p>\n<pre><code>std::vector&lt;int&gt; return_vector()\n{\n    std::vector&lt;int&gt;\
    \ tmp {1,2,3,4,5};\n    return tmp;\n}\n\nstd::vector&lt;int&gt; rval_ref = return_vector();\n\
    </code></pre>\n<p>Except now, the vector is moved. The <em>user</em> of a class\
    \ doesn't deal with it's rvalue references in the vast majority of cases.</p>\n\
    </div>"
- - C++11 rvalues and move semantics confusion (return statement)
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The simple answer is you should\
    \ write code for rvalue references like you would regular references code, and\
    \ you should treat them the same mentally 99% of the time.  This includes all\
    \ the old rules about returning references (i.e. never return a reference to a\
    \ local variable).</p>\n<p>Unless you are writing a template container class that\
    \ needs to take advantage of std::forward and be able to write a generic function\
    \ that takes either lvalue or rvalue references, this is more or less true.</p>\n\
    <p>One of the big advantages to the move constructor and move assignment is that\
    \ if you define them, the compiler can use them in cases were the RVO (return\
    \ value optimization) and NRVO (named return value optimization) fail to be invoked.\
    \  This is pretty huge for returning expensive objects like containers &amp; strings\
    \ by value efficiently from methods.</p>\n<p>Now where things get interesting\
    \ with rvalue references, is that you can also use them as arguments to normal\
    \ functions.  This allows you to write containers that have overloads for both\
    \ const reference (const foo&amp; other) and rvalue reference (foo&amp;&amp; other).\
    \   Even if the argument is too unwieldy to pass with a mere constructor call\
    \ it can still be done:</p>\n<pre><code>std::vector vec;\nfor(int x=0; x&lt;10;\
    \ ++x)\n{\n    // automatically uses rvalue reference constructor if available\n\
    \    // because MyCheapType is an unamed temporary variable\n    vec.push_back(MyCheapType(0.f));\n\
    }\n\n\nstd::vector vec;\nfor(int x=0; x&lt;10; ++x)\n{\n    MyExpensiveType temp(1.0,\
    \ 3.0);\n    temp.initSomeOtherFields(malloc(5000));\n\n    // old way, passed\
    \ via const reference, expensive copy\n    vec.push_back(temp);\n\n    // new\
    \ way, passed via rvalue reference, cheap move\n    // just don't use temp again,\
    \  not difficult in a loop like this though . . .\n    vec.push_back(std::move(temp));\n\
    }\n</code></pre>\n<p>The STL containers have been updated to have move overloads\
    \ for nearly anything (hash key and values, vector insertion, etc), and is where\
    \ you will see them the most.</p>\n<p>You can also use them to normal functions,\
    \ and if you only provide an rvalue reference argument you can force the caller\
    \ to create the object and let the function do the move.  This is more of an example\
    \ than a really good use, but in my rendering library, I have assigned a string\
    \ to all the loaded resources, so that it is easier to see what each object represents\
    \ in the debugger.  The interface is something like this:</p>\n<pre><code>TextureHandle\
    \ CreateTexture(int width, int height, ETextureFormat fmt, string&amp;&amp; friendlyName)\n\
    {\n    std::unique_ptr&lt;TextureObject&gt; tex = D3DCreateTexture(width, height,\
    \ fmt);\n    tex-&gt;friendlyName = std::move(friendlyName);\n    return tex;\n\
    }\n</code></pre>\n<p>It is a form of a 'leaky abstraction' but allows me to take\
    \ advantage of the fact I had to create the string already most of the time, and\
    \ avoid making yet another copying of it.  This isn't exactly high-performance\
    \ code but is a good example of the possibilities as people get the hang of this\
    \ feature.  This code actually requires that the variable either be a temporary\
    \ to the call, or std::move invoked:</p>\n<pre><code>// move from temporary\n\
    TextureHandle htex = CreateTexture(128, 128, A8R8G8B8, string(\"Checkerboard\"\
    ));\n</code></pre>\n<p>or</p>\n<pre><code>// explicit move (not going to use the\
    \ variable 'str' after the create call)\nstring str(\"Checkerboard\");\nTextureHandle\
    \ htex = CreateTexture(128, 128, A8R8G8B8, std::move(str));\n</code></pre>\n<p>or</p>\n\
    <pre><code>// explicitly make a copy and pass the temporary of the copy down\n\
    // since we need to use str again for some reason\nstring str(\"Checkerboard\"\
    );\nTextureHandle htex = CreateTexture(128, 128, A8R8G8B8, string(str));\n</code></pre>\n\
    <p>but this won't compile!</p>\n<pre><code>string str(\"Checkerboard\");\nTextureHandle\
    \ htex = CreateTexture(128, 128, A8R8G8B8, str);\n</code></pre>\n</div>"
- - How can I convert a std::string to int?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In C++11 there are some nice\
    \ new convert functions from <code>std::string</code> to a number type.</p>\n\
    <p>So instead of </p>\n<pre><code>atoi( str.c_str() )\n</code></pre>\n<p>you can\
    \ use</p>\n<pre><code>std::stoi( str )\n</code></pre>\n<p>where <code>str</code>\
    \ is your number as <code>std::string</code>.</p>\n<p>There are version for all\
    \ flavours of numbers:\n<code>long stol(string)</code>, <code>float stof(string)</code>,\
    \ <code>double stod(string)</code>,...\nsee <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/stol\"\
    >http://en.cppreference.com/w/cpp/string/basic_string/stol</a></p>\n</div>"
- - How can I convert a std::string to int?
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>std::istringstream ss(thestring);\n\
    ss &gt;&gt; thevalue;\n</code></pre>\n<p>To be fully correct you'll want to check\
    \ the error flags.</p>\n</div>"
- - How can I convert a std::string to int?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>use the atoi function to convert\
    \ the string to an integer:</p>\n<pre><code>string a = \"25\";\n\nint b = atoi(a.c_str());\n\
    </code></pre>\n<p><a href=\"http://www.cplusplus.com/reference/clibrary/cstdlib/atoi/\"\
    >http://www.cplusplus.com/reference/clibrary/cstdlib/atoi/</a></p>\n</div>"
- - Advantages of using forward
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You have to understand the forwarding\
    \ problem. You can <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm\"\
    \ rel=\"noreferrer\">read the entire problem in detail</a>, but I'll summarize.</p>\n\
    <p>Basically, given the expression <code>E(a, b, ... , c)</code>, we want the\
    \ expression <code>f(a, b, ... , c)</code> to be equivalent. In C++03, this is\
    \ impossible. There are many attempts, but they all fail in some regard.</p>\n\
    <hr/>\n<p>The simplest is to use an lvalue-reference:</p>\n<pre><code>template\
    \ &lt;typename A, typename B, typename C&gt;\nvoid f(A&amp; a, B&amp; b, C&amp;\
    \ c)\n{\n    E(a, b, c);\n}\n</code></pre>\n<p>But this fails to handle temporary\
    \ values: <code>f(1, 2, 3);</code>, as those cannot be bound to an lvalue-reference.</p>\n\
    <p>The next attempt might be:</p>\n<pre><code>template &lt;typename A, typename\
    \ B, typename C&gt;\nvoid f(const A&amp; a, const B&amp; b, const C&amp; c)\n\
    {\n    E(a, b, c);\n}\n</code></pre>\n<p>Which fixes the above problem, but flips\
    \ flops. It now fails to allow <code>E</code> to have non-const arguments:</p>\n\
    <pre><code>int i = 1, j = 2, k = 3;\nvoid E(int&amp;, int&amp;, int&amp;); f(i,\
    \ j, k); // oops! E cannot modify these\n</code></pre>\n<p>The third attempt accepts\
    \ const-references, but then <code>const_cast</code>'s the <code>const</code>\
    \ away:</p>\n<pre><code>template &lt;typename A, typename B, typename C&gt;\n\
    void f(const A&amp; a, const B&amp; b, const C&amp; c)\n{\n    E(const_cast&lt;A&amp;&gt;(a),\
    \ const_cast&lt;B&amp;&gt;(b), const_cast&lt;C&amp;&gt;(c));\n}\n</code></pre>\n\
    <p>This accepts all values, can pass on all values, but potentially leads to undefined\
    \ behavior:</p>\n<pre><code>const int i = 1, j = 2, k = 3;\nE(int&amp;, int&amp;,\
    \ int&amp;); f(i, j, k); // ouch! E can modify a const object!\n</code></pre>\n\
    <p>A final solution handles everything correctly...at the cost of being impossible\
    \ to maintain. You provide overloads of <code>f</code>, with <em>all</em> combinations\
    \ of const and non-const:</p>\n<pre><code>template &lt;typename A, typename B,\
    \ typename C&gt;\nvoid f(A&amp; a, B&amp; b, C&amp; c);\n\ntemplate &lt;typename\
    \ A, typename B, typename C&gt;\nvoid f(const A&amp; a, B&amp; b, C&amp; c);\n\
    \ntemplate &lt;typename A, typename B, typename C&gt;\nvoid f(A&amp; a, const\
    \ B&amp; b, C&amp; c);\n\ntemplate &lt;typename A, typename B, typename C&gt;\n\
    void f(A&amp; a, B&amp; b, const C&amp; c);\n\ntemplate &lt;typename A, typename\
    \ B, typename C&gt;\nvoid f(const A&amp; a, const B&amp; b, C&amp; c);\n\ntemplate\
    \ &lt;typename A, typename B, typename C&gt;\nvoid f(const A&amp; a, B&amp; b,\
    \ const C&amp; c);\n\ntemplate &lt;typename A, typename B, typename C&gt;\nvoid\
    \ f(A&amp; a, const B&amp; b, const C&amp; c);\n\ntemplate &lt;typename A, typename\
    \ B, typename C&gt;\nvoid f(const A&amp; a, const B&amp; b, const C&amp; c);\n\
    </code></pre>\n<p>N arguments require 2<sup>N</sup> combinations, a nightmare.\
    \ We'd like to do this automatically.</p>\n<p>(This is effectively what we get\
    \ the compiler to do for us in C++11.)</p>\n<hr/>\n<p>In C++11, we get a chance\
    \ to fix this. <a href=\"https://stackoverflow.com/questions/3591832/perfect-forwarding-in-c03/3591909#3591909\"\
    >One solution modifies template deduction rules on existing types, but this potentially\
    \ breaks a great deal of code.</a> So we have to find another way.</p>\n<p>The\
    \ solution is to instead use the newly added <strong>rvalue-references</strong>;\
    \ we can introduce new rules when deducing rvalue-reference types and create any\
    \ desired result. After all, we cannot possibly break code now.</p>\n<p>If given\
    \ a reference to a reference (note reference is an encompassing term meaning both\
    \ <code>T&amp;</code> and <code>T&amp;&amp;</code>), we use the following rule\
    \ to figure out the resulting type:</p>\n<blockquote>\n<p>\"[given] a type TR\
    \ that is a reference to a type T, an attempt to create the type “lvalue reference\
    \ to cv TR” creates the type “lvalue reference to T”, while an attempt to create\
    \ the type “rvalue reference to cv TR” creates the type TR.\"</p>\n</blockquote>\n\
    <p>Or in tabular form:</p>\n<pre><code>TR   R\n\nT&amp;   &amp;  -&gt; T&amp;\
    \  // lvalue reference to cv TR -&gt; lvalue reference to T\nT&amp;   &amp;&amp;\
    \ -&gt; T&amp;  // rvalue reference to cv TR -&gt; TR (lvalue reference to T)\n\
    T&amp;&amp;  &amp;  -&gt; T&amp;  // lvalue reference to cv TR -&gt; lvalue reference\
    \ to T\nT&amp;&amp;  &amp;&amp; -&gt; T&amp;&amp; // rvalue reference to cv TR\
    \ -&gt; TR (rvalue reference to T)\n</code></pre>\n<p>Next, with template argument\
    \ deduction: if an argument is an lvalue A, we supply the template argument with\
    \ an lvalue reference to A. Otherwise, we deduce normally. This gives so-called\
    \ <strong>universal references</strong> (the term <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf\"\
    \ rel=\"noreferrer\"><em>forwarding reference</em></a> is now the official one).</p>\n\
    <p>Why is this useful? Because combined we maintain the ability to keep track\
    \ of the value category of a type: if it was an lvalue, we have an lvalue-reference\
    \ parameter, otherwise we have an rvalue-reference parameter.</p>\n<p>In code:</p>\n\
    <pre><code>template &lt;typename T&gt;\nvoid deduce(T&amp;&amp; x); \n\nint i;\n\
    deduce(i); // deduce&lt;int&amp;&gt;(int&amp; &amp;&amp;) -&gt; deduce&lt;int&amp;&gt;(int&amp;)\n\
    deduce(1); // deduce&lt;int&gt;(int&amp;&amp;)\n</code></pre>\n<p>The last thing\
    \ is to \"forward\" the value category of the variable. Keep in mind, once inside\
    \ the function the parameter could be passed as an lvalue to anything:</p>\n<pre><code>void\
    \ foo(int&amp;);\n\ntemplate &lt;typename T&gt;\nvoid deduce(T&amp;&amp; x)\n\
    {\n    foo(x); // fine, foo can refer to x\n}\n\ndeduce(1); // okay, foo operates\
    \ on x which has a value of 1\n</code></pre>\n<p>That's no good. E needs to get\
    \ the same kind of value-category that we got! The solution is this:</p>\n<pre><code>static_cast&lt;T&amp;&amp;&gt;(x);\n\
    </code></pre>\n<p>What does this do? Consider we're inside the <code>deduce</code>\
    \ function, and we've been passed an lvalue. This means <code>T</code> is a <code>A&amp;</code>,\
    \ and so the target type for the static cast is <code>A&amp; &amp;&amp;</code>,\
    \ or just <code>A&amp;</code>. Since <code>x</code> is already an <code>A&amp;</code>,\
    \ we do nothing and are left with an lvalue reference.</p>\n<p>When we've been\
    \ passed an rvalue, <code>T</code> is <code>A</code>, so the target type for the\
    \ static cast is <code>A&amp;&amp;</code>. The cast results in an rvalue expression,\
    \ <em>which can no longer be passed to an lvalue reference</em>. We've maintained\
    \ the value category of the parameter.</p>\n<p>Putting these together gives us\
    \ \"perfect forwarding\": </p>\n<pre><code>template &lt;typename A&gt;\nvoid f(A&amp;&amp;\
    \ a)\n{\n    E(static_cast&lt;A&amp;&amp;&gt;(a)); \n}\n</code></pre>\n<p>When\
    \ <code>f</code> receives an lvalue, <code>E</code> gets an lvalue. When <code>f</code>\
    \ receives an rvalue, <code>E</code> gets an rvalue. Perfect.</p>\n<hr/>\n<p>And\
    \ of course, we want to get rid of the ugly. <code>static_cast&lt;T&amp;&amp;&gt;</code>\
    \ is cryptic and weird to remember; let's instead make a utility function called\
    \ <code>forward</code>, which does the same thing:</p>\n<pre><code>std::forward&lt;A&gt;(a);\n\
    // is the same as\nstatic_cast&lt;A&amp;&amp;&gt;(a);\n</code></pre>\n</div>"
- - Advantages of using forward
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I think to have a conceptual\
    \ code implementing std::forward can add to the discussion. This is a slide from\
    \ Scott Meyers talk <a href=\"http://channel9.msdn.com/Events/GoingNative/2013/An-Effective-Cpp11-14-Sampler\"\
    \ rel=\"noreferrer\">An Effective C++11/14 Sampler</a></p>\n<p><img alt=\"conceptual\
    \ code implementing std::forward\" src=\"https://i.stack.imgur.com/UfZJk.png\"\
    /></p>\n<p>Function <code>move</code> in the code is <code>std::move</code>. There\
    \ is a (working) implementation for it earlier in that talk. I found <a href=\"\
    https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a00416_source.html\" rel=\"\
    noreferrer\">actual implementation of std::forward in libstdc++</a>, in file move.h,\
    \ but it is not at all instructive.</p>\n<p>From a user's perspective, the meaning\
    \ of it is that <code>std::forward</code> is a conditional cast to an rvalue.\
    \ It can be useful if I am writing a function which expects either an lvalue or\
    \ rvalue in a parameter and wants to pass it to another function as an rvalue\
    \ only if it was passed in as an rvalue. If I did not wrap the parameter in std::forward,\
    \ it would be always passed as a normal reference.</p>\n<pre><code>#include &lt;iostream&gt;\n\
    #include &lt;string&gt;\n#include &lt;utility&gt;\n\nvoid overloaded_function(std::string&amp;\
    \ param) {\n  std::cout &lt;&lt; \"std::string&amp; version\" &lt;&lt; std::endl;\n\
    }\nvoid overloaded_function(std::string&amp;&amp; param) {\n  std::cout &lt;&lt;\
    \ \"std::string&amp;&amp; version\" &lt;&lt; std::endl;\n}\n\ntemplate&lt;typename\
    \ T&gt;\nvoid pass_through(T&amp;&amp; param) {\n  overloaded_function(std::forward&lt;T&gt;(param));\n\
    }\n\nint main() {\n  std::string pes;\n  pass_through(pes);\n  pass_through(std::move(pes));\n\
    }\n</code></pre>\n<p>Sure enough, it prints</p>\n<pre><code>std::string&amp; version\n\
    std::string&amp;&amp; version\n</code></pre>\n<p>The code is based on an example\
    \ from the previously mentioned talk. Slide 10, at about 15:00 from the start.</p>\n\
    </div>"
- - Advantages of using forward
  - "<div class=\"post-text\" itemprop=\"text\">\n<blockquote>\n<p>In perfect forwarding,\
    \ std::forward is used to convert the named rvalue reference t1 and t2 to unnamed\
    \ rvalue reference. What is the purpose of doing that? How would that effect the\
    \ called function inner if we leave t1 &amp; t2 as lvalue?</p>\n<pre><code>template\
    \ &lt;typename T1, typename T2&gt; void outer(T1&amp;&amp; t1, T2&amp;&amp; t2)\
    \ \n{\n    inner(std::forward&lt;T1&gt;(t1), std::forward&lt;T2&gt;(t2));\n}\n\
    </code></pre>\n</blockquote>\n<p>If you use a named rvalue reference in an expression\
    \ it is actually an lvalue (because you refer to the object by name). Consider\
    \ the following example:</p>\n<pre><code>void inner(int &amp;,  int &amp;);  //\
    \ #1\nvoid inner(int &amp;&amp;, int &amp;&amp;); // #2\n</code></pre>\n<p>Now,\
    \ if we call <code>outer</code> like this</p>\n<pre><code>outer(17,29);\n</code></pre>\n\
    <p>we would like 17 and 29 to be forwarded to #2 because 17 and 29 are integer\
    \ literals and as such rvalues. But since <code>t1</code> and <code>t2</code>\
    \ in the expression <code>inner(t1,t2);</code> are lvalues, you'd be invoking\
    \ #1 instead of #2. That's why we need to turn the references back into unnamed\
    \ references with <code>std::forward</code>. So, <code>t1</code> in <code>outer</code>\
    \ is always an lvalue expression while <code>forward&lt;T1&gt;(t1)</code> may\
    \ be an rvalue expression depending on <code>T1</code>. The latter is only an\
    \ lvalue expression if <code>T1</code> is an lvalue reference. And <code>T1</code>\
    \ is only deduced to be an lvalue reference in case the first argument to outer\
    \ was an lvalue expression.</p>\n</div>"
- - Case-insensitive string comparison in C++ [closed]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Boost includes a handy algorithm\
    \ for this:</p>\n<pre><code>#include &lt;boost/algorithm/string.hpp&gt;\n// Or,\
    \ for fewer header dependencies:\n//#include &lt;boost/algorithm/string/predicate.hpp&gt;\n\
    \nstd::string str1 = \"hello, world!\";\nstd::string str2 = \"HELLO, WORLD!\"\
    ;\n\nif (boost::iequals(str1, str2))\n{\n    // Strings are identical\n}\n</code></pre>\n\
    </div>"
- - Case-insensitive string comparison in C++ [closed]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Take advantage of the standard\
    \ <code>char_traits</code>. Recall that a <code>std::string</code> is in fact\
    \ a typedef for <code>std::basic_string&lt;char&gt;</code>, or more explicitly,\
    \ <code>std::basic_string&lt;char, std::char_traits&lt;char&gt; &gt;</code>. The\
    \ <code>char_traits</code> type describes how characters compare, how they copy,\
    \ how they cast etc. All you need to do is typedef a new string over <code>basic_string</code>,\
    \ and provide it with your own custom <code>char_traits</code> that compare case\
    \ insensitively.</p>\n<pre><code>struct ci_char_traits : public char_traits&lt;char&gt;\
    \ {\n    static bool eq(char c1, char c2) { return toupper(c1) == toupper(c2);\
    \ }\n    static bool ne(char c1, char c2) { return toupper(c1) != toupper(c2);\
    \ }\n    static bool lt(char c1, char c2) { return toupper(c1) &lt;  toupper(c2);\
    \ }\n    static int compare(const char* s1, const char* s2, size_t n) {\n    \
    \    while( n-- != 0 ) {\n            if( toupper(*s1) &lt; toupper(*s2) ) return\
    \ -1;\n            if( toupper(*s1) &gt; toupper(*s2) ) return 1;\n          \
    \  ++s1; ++s2;\n        }\n        return 0;\n    }\n    static const char* find(const\
    \ char* s, int n, char a) {\n        while( n-- &gt; 0 &amp;&amp; toupper(*s)\
    \ != toupper(a) ) {\n            ++s;\n        }\n        return s;\n    }\n};\n\
    \ntypedef std::basic_string&lt;char, ci_char_traits&gt; ci_string;\n</code></pre>\n\
    <p>The details are on <a href=\"http://www.gotw.ca/gotw/029.htm\" rel=\"noreferrer\"\
    >Guru of The Week number 29</a>.</p>\n</div>"
- - Case-insensitive string comparison in C++ [closed]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The trouble with boost is that\
    \ you have to link with and depend on boost. Not easy in some cases (e.g. android).</p>\n\
    <p>And using char_traits means <em>all</em> your comparisons are case insensitive,\
    \ which isn't usually what you want.</p>\n<p>This should suffice. It should be\
    \ reasonably efficient. Doesn't handle unicode or anything though.</p>\n<pre><code>bool\
    \ iequals(const string&amp; a, const string&amp; b)\n{\n    unsigned int sz =\
    \ a.size();\n    if (b.size() != sz)\n        return false;\n    for (unsigned\
    \ int i = 0; i &lt; sz; ++i)\n        if (tolower(a[i]) != tolower(b[i]))\n  \
    \          return false;\n    return true;\n}\n</code></pre>\n<p>Update: Bonus\
    \ C++14 version (<code>#include &lt;algorithm&gt;</code>):</p>\n<pre><code>bool\
    \ iequals(const string&amp; a, const string&amp; b)\n{\n    return std::equal(a.begin(),\
    \ a.end(),\n                      b.begin(), b.end(),\n                      [](char\
    \ a, char b) {\n                          return tolower(a) == tolower(b);\n \
    \                     });\n}\n</code></pre>\n</div>"
- - "error: request for member '..' in '..' which is of non-class type"
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>Foo foo2();\n</code></pre>\n\
    <p>change to</p>\n<pre><code>Foo foo2;\n</code></pre>\n<p>You get the error because\
    \ compiler thinks of</p>\n<pre><code>Foo foo2()\n</code></pre>\n<p>as of function\
    \ declaration with name 'foo2' and the return type 'Foo'.</p>\n<p>But in that\
    \ case If we change to <code>Foo foo2</code> , the compiler might show the error\
    \   <code>\" call of overloaded ‘Foo()’ is ambiguous\"</code>.</p>\n</div>"
- - "error: request for member '..' in '..' which is of non-class type"
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Just for the record..</p>\n<p>It\
    \ is actually not a solution to your code, but I had the same error message when\
    \ incorrectly accessing the method of a class instance pointed to by <code>myPointerToClass</code>,\
    \ e.g.</p>\n<pre><code>MyClass* myPointerToClass = new MyClass();\nmyPointerToClass.aMethodOfThatClass();\n\
    </code></pre>\n<p>where</p>\n<pre><code>myPointerToClass-&gt;aMethodOfThatClass();\n\
    </code></pre>\n<p>would obviously be correct.</p>\n</div>"
- - "error: request for member '..' in '..' which is of non-class type"
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Adding to the knowledge base,\
    \ I got the same error for </p>\n<pre><code>if(class_iter-&gt;num == *int_iter)\n\
    </code></pre>\n<p>Even though the IDE gave me the correct members for class_iter.\
    \ Obviously, the problem is that <code>\"anything\"::iterator</code> doesn't have\
    \ a member called <code>num</code> so I need to dereference it. Which doesn't\
    \ work like this:</p>\n<pre><code>if(*class_iter-&gt;num == *int_iter)\n</code></pre>\n\
    <p>...apparently. I eventually solved it with this:</p>\n<pre><code>if((*class_iter)-&gt;num\
    \ == *int_iter)\n</code></pre>\n<p>I hope this helps someone who runs across this\
    \ question the way I did.</p>\n</div>"
- - std::string formatting like sprintf
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can't do it directly, because\
    \ you don't have write access to the underlying buffer (until C++11; see Dietrich\
    \ Epp's <a href=\"https://stackoverflow.com/questions/2342162/stdstring-formatting-like-sprintf#comment61134428_2342176\"\
    >comment</a>). You'll have to do it first in a c-string, then copy it into a std::string:</p>\n\
    <pre><code>  char buff[100];\n  snprintf(buff, sizeof(buff), \"%s\", \"Hello\"\
    );\n  std::string buffAsStdStr = buff;\n</code></pre>\n<p>But I'm not sure why\
    \ you wouldn't just use a string stream? I'm assuming you have specific reasons\
    \ to not just do this:</p>\n<pre><code>  std::ostringstream stringStream;\n  stringStream\
    \ &lt;&lt; \"Hello\";\n  std::string copyOfStr = stringStream.str();\n</code></pre>\n\
    </div>"
- - std::string formatting like sprintf
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>C++11 solution that uses <code>vsnprintf()</code>\
    \ internally:</p>\n<pre><code>#include &lt;stdarg.h&gt;  // For va_start, etc.\n\
    \nstd::string string_format(const std::string fmt, ...) {\n    int size = ((int)fmt.size())\
    \ * 2 + 50;   // Use a rubric appropriate for your code\n    std::string str;\n\
    \    va_list ap;\n    while (1) {     // Maximum two passes on a POSIX system...\n\
    \        str.resize(size);\n        va_start(ap, fmt);\n        int n = vsnprintf((char\
    \ *)str.data(), size, fmt.c_str(), ap);\n        va_end(ap);\n        if (n &gt;\
    \ -1 &amp;&amp; n &lt; size) {  // Everything worked\n            str.resize(n);\n\
    \            return str;\n        }\n        if (n &gt; -1)  // Needed size returned\n\
    \            size = n + 1;   // For null char\n        else\n            size\
    \ *= 2;      // Guess at a larger size (OS specific)\n    }\n    return str;\n\
    }\n</code></pre>\n<p>A safer and more efficient (I tested it, and it is faster)\
    \ approach:</p>\n<pre><code>#include &lt;stdarg.h&gt;  // For va_start, etc.\n\
    #include &lt;memory&gt;    // For std::unique_ptr\n\nstd::string string_format(const\
    \ std::string fmt_str, ...) {\n    int final_n, n = ((int)fmt_str.size()) * 2;\
    \ /* Reserve two times as much as the length of the fmt_str */\n    std::unique_ptr&lt;char[]&gt;\
    \ formatted;\n    va_list ap;\n    while(1) {\n        formatted.reset(new char[n]);\
    \ /* Wrap the plain char array into the unique_ptr */\n        strcpy(&amp;formatted[0],\
    \ fmt_str.c_str());\n        va_start(ap, fmt_str);\n        final_n = vsnprintf(&amp;formatted[0],\
    \ n, fmt_str.c_str(), ap);\n        va_end(ap);\n        if (final_n &lt; 0 ||\
    \ final_n &gt;= n)\n            n += abs(final_n - n + 1);\n        else\n   \
    \         break;\n    }\n    return std::string(formatted.get());\n}\n</code></pre>\n\
    <p>The <code>fmt_str</code> is passed by value to conform with the requirements\
    \ of <code>va_start</code>.</p>\n<p>NOTE: The \"safer\" and \"faster\" version\
    \ doesn't work on some systems. Hence both are still listed. Also, \"faster\"\
    \ depends entirely on the preallocation step being correct, otherwise the <code>strcpy</code>\
    \ renders it slower.</p>\n</div>"
- - std::string formatting like sprintf
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Utilising <a href=\"http://en.wikipedia.org/wiki/C%2B%2B11\"\
    \ rel=\"noreferrer\">C++11</a> <a href=\"http://en.cppreference.com/w/cpp/io/c/fprintf\"\
    \ rel=\"noreferrer\"><code>std::snprintf</code></a>, this becomes a pretty easy\
    \ and safe task. I see a lot of answers on this question that were apparently\
    \ written before the time of C++11 which use fixed buffer lengths and vargs, something\
    \ I would not recommend for safety, efficiency and clarity reasons.</p>\n<pre><code>#include\
    \ &lt;memory&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include\
    \ &lt;cstdio&gt;\n\nusing namespace std; //Don't if you're in a header-file\n\n\
    template&lt;typename ... Args&gt;\nstring string_format( const std::string&amp;\
    \ format, Args ... args )\n{\n    size_t size = snprintf( nullptr, 0, format.c_str(),\
    \ args ... ) + 1; // Extra space for '\\0'\n    unique_ptr&lt;char[]&gt; buf(\
    \ new char[ size ] ); \n    snprintf( buf.get(), size, format.c_str(), args ...\
    \ );\n    return string( buf.get(), buf.get() + size - 1 ); // We don't want the\
    \ '\\0' inside\n}\n</code></pre>\n<p><em>The code snippet above is licensed under\
    \ <a href=\"https://creativecommons.org/publicdomain/zero/1.0/\" rel=\"noreferrer\"\
    >CC0 1.0</a>.</em></p>\n<h2>Line by line explanation:</h2>\n<p><strong><em>Aim:</em></strong>\
    \ Write to a <code>char*</code> by using  <code>std::snprintf</code> and then\
    \ convert that to a <code>std::string</code>.</p>\n<p>First, we determine the\
    \ desired length of the char array.</p>\n<p>From <a href=\"http://en.cppreference.com/w/cpp/io/c/fprintf\"\
    \ rel=\"noreferrer\">cppreference.com</a>:</p>\n<blockquote>\n<p><strong>Return\
    \ value</strong></p>\n<p>[...] If the resulting string gets truncated due to buf_size\
    \ limit,\n  function returns the total number of characters (not including the\n\
    \  terminating null-byte) which would have been written, if the limit was\n  not\
    \ imposed.</p>\n</blockquote>\n<p>This means that the desired size is the number\
    \ of characters <strong>plus one</strong>, so that the null-terminator will sit\
    \ after all other characters and that it can be cut off by the string constructor\
    \ again. This issue was explained by @alexk7 in the comments.</p>\n<p>Then, we\
    \ allocate a new character array and assign it to a <code>std::unique_ptr</code>.\
    \ This is generally advised, as you won't have to manually <code>delete</code>\
    \ it again.</p>\n<p><em>Note that this is not a safe way to allocate a <code>unique_ptr</code>\
    \ with user-defined types as you can not deallocate the memory if the constructor\
    \ throws an exception!</em></p>\n<p>After that, we can of course just use <code>snprintf</code>\
    \ for its intended use and write the formatted string to the <code>char[]</code>\
    \ and afterwards create and return a new <code>std::string</code> from that.</p>\n\
    <hr/>\n<p>You can see an example in action <a href=\"http://ideone.com/av9b8p\"\
    \ rel=\"noreferrer\">here</a>.</p>\n<hr/>\n<p>If you also want to use <code>std::string</code>\
    \ in the argument list, take a look at <a href=\"http://gist.github.com/Zitrax/a2e0040d301bf4b8ef8101c0b1e3f1d5\"\
    \ rel=\"noreferrer\">this gist</a>. </p>\n<hr/>\n<p>Additional information for\
    \ <a href=\"http://en.wikipedia.org/wiki/Microsoft_Visual_Studio\" rel=\"noreferrer\"\
    >Visual Studio</a> users:</p>\n<p>As explained in <a href=\"https://stackoverflow.com/a/9052232/2533467\"\
    >this answer</a>, Microsoft renamed <code>std::snprintf</code> to <code>_snprintf</code>\
    \ (yes, without <code>std::</code>). MS further set it as deprecated and advises\
    \ to use <a href=\"http://msdn.microsoft.com/en-US/library/f30dzcf6(v=vs.80).aspx\"\
    \ rel=\"noreferrer\"><code>_snprintf_s</code></a> instead, however <code>_snprintf_s</code>\
    \ won't accept the buffer to be zero or smaller than the formatted output and\
    \ will not calculate the outputs length if that occurs. \nSo in order to get rid\
    \ of the deprecation warnings during compilation, you can insert <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/2c8f766e(v=vs.120).aspx\"\
    \ rel=\"noreferrer\">the following line</a> at the top of the file which contains\
    \ the use of <code>_snprintf</code>:</p>\n<pre><code>#pragma warning(disable :\
    \ 4996)\n</code></pre>\n</div>"
- - "error: passing xxx as 'this' argument of xxx discards qualifiers"
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The objects in the <code>std::set</code>\
    \ are stored as <code>const StudentT</code>. So when you try to call <code>getId()</code>\
    \ with the <code>const</code> object the compiler  detects a problem, mainly you're\
    \ calling a non-const member function on const object which is not allowed because\
    \ non-const member functions make NO PROMISE not to modify the object; so the\
    \ compiler is going to make a <em>safe</em> assumption that <code>getId()</code>\
    \ might attempt to modify the object but at the same time, it also notices that\
    \ the object is const; so any attempt to modify the const object should be an\
    \ error. Hence compiler generates an error message. </p>\n<p>The solution is simple:\
    \ make the functions const as:</p>\n<pre><code>int getId() const {\n    return\
    \ id;\n}\nstring getName() const {\n    return name;\n}\n</code></pre>\n<p>This\
    \ is necessary because now you can call <code>getId()</code> and <code>getName()</code>\
    \ on const objects as:</p>\n<pre><code>void f(const StudentT &amp; s)\n{\n   \
    \  cout &lt;&lt; s.getId();   //now okay, but error with your versions\n     cout\
    \ &lt;&lt; s.getName(); //now okay, but error with your versions\n}\n</code></pre>\n\
    <p>As a sidenote, you should implement <code>operator&lt;</code> as : </p>\n<pre><code>inline\
    \ bool operator&lt; (const StudentT &amp; s1, const StudentT &amp; s2)\n{\n  \
    \  return  s1.getId() &lt; s2.getId();\n}\n</code></pre>\n<p>Note parameters are\
    \ now <code>const</code> reference.</p>\n</div>"
- - "error: passing xxx as 'this' argument of xxx discards qualifiers"
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Member functions that do not\
    \ modify the class instance should be declared as <code>const</code>:</p>\n<pre><code>int\
    \ getId() const {\n    return id;\n}\nstring getName() const {\n    return name;\n\
    }\n</code></pre>\n<p>Anytime you see \"discards qualifiers\", it's talking about\
    \ <code>const</code> or <code>volatile</code>.</p>\n</div>"
- - "error: passing xxx as 'this' argument of xxx discards qualifiers"
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Actually the C++ standard (i.e.\
    \ <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\"\
    \ rel=\"noreferrer\">C++ 0x draft</a>) says (tnx to @Xeo &amp; @Ben Voigt for\
    \ pointing that out to me):</p>\n<blockquote>\n<p><strong>23.2.4</strong> Associative\
    \ containers<br/>\n<strong>5</strong> For set and multiset the value type\n  is\
    \ the same as the key type. For map\n  and multimap it is equal to pair. Keys\
    \ in an associative\n  container are immutable.<br/>\n<strong>6</strong> iterator\
    \ of\n  an associative container is of the\n  bidirectional iterator category.\
    \ For\n  associative containers where the value\n  type is the same as the key\
    \ type, both\n  iterator and const_iterator are\n  constant iterators. It is unspecified\n\
    \  whether or not iterator and\n  const_iterator are the same type.</p>\n</blockquote>\n\
    <p>So VC++ 2008 Dinkumware implementation is faulty.</p>\n<hr/>\n<p><strong>Old\
    \ answer:</strong></p>\n<p>You got that error because in certain implementations\
    \ of the std lib the <code>set::iterator</code> is the same as <code>set::const_iterator</code>.\
    \  </p>\n<p>For example libstdc++ (shipped with g++) has it (see <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01063_source.html#l00126\"\
    \ rel=\"noreferrer\">here</a> for the entire source code):</p>\n<pre><code>typedef\
    \ typename _Rep_type::const_iterator            iterator;\ntypedef typename _Rep_type::const_iterator\
    \            const_iterator;\n</code></pre>\n<p>And in SGI's <a href=\"http://www.sgi.com/tech/stl/set.html\"\
    \ rel=\"noreferrer\">docs</a> it states:</p>\n<pre><code>iterator       Container\
    \  Iterator used to iterate through a set.\nconst_iterator Container  Const iterator\
    \ used to iterate through a set. (Iterator and const_iterator are the same type.)\n\
    </code></pre>\n<p>On the other hand VC++ 2008 Express compiles your code without\
    \ complaining that you're calling non const methods on <code>set::iterator</code>s.</p>\n\
    </div>"
- - How to find if a given key exists in a C++ std::map
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Use <a href=\"http://en.cppreference.com/w/cpp/container/map/find\"\
    \ rel=\"noreferrer\"><code>map::find</code></a></p>\n<pre><code>if ( m.find(\"\
    f\") == m.end() ) {\n  // not found\n} else {\n  // found\n}\n</code></pre>\n\
    </div>"
- - How to find if a given key exists in a C++ std::map
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>To check if a particular key\
    \ in the map exists, use the <code>count</code> member function in one of the\
    \ following ways:</p>\n<pre><code>m.count(key) &gt; 0\nm.count(key) == 1\nm.count(key)\
    \ != 0\n</code></pre>\n<p>The <a href=\"http://www.cplusplus.com/reference/map/map/find/\"\
    \ rel=\"noreferrer\">documentation</a> for <code>map::find</code> says: \"Another\
    \ member function, <code>map::count</code>, can be used to just check whether\
    \ a particular key exists.\"</p>\n<p>The <a href=\"http://www.cplusplus.com/reference/map/map/count/\"\
    \ rel=\"noreferrer\">documentation</a> for <code>map::count</code> says: \"Because\
    \ all elements in a map container are unique, the function can only return 1 (if\
    \ the element is found) or zero (otherwise).\"</p>\n<p>To retrieve a value from\
    \ the map via a key that you know to exist, use <a href=\"http://www.cplusplus.com/reference/map/map/at/\"\
    \ rel=\"noreferrer\">map::at</a>:</p>\n<pre><code>value = m.at(key)\n</code></pre>\n\
    <p>Unlike <a href=\"http://www.cplusplus.com/reference/map/map/operator%5B%5D/\"\
    \ rel=\"noreferrer\">map::operator[]</a>, <code>map::at</code> will not create\
    \ a new key in the map if the specified key does not exist.</p>\n</div>"
- - How to find if a given key exists in a C++ std::map
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can use <code>.find()</code>:</p>\n\
    <pre><code>map&lt;string,string&gt;::iterator i = m.find(\"f\");\n\nif (i == m.end())\
    \ { /* Not found */ }\nelse { /* Found, i-&gt;first is f, i-&gt;second is ++--\
    \ */ }\n</code></pre>\n</div>"
- - Simple example of threading in C++ [closed]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Create a function that you want\
    \ the thread to execute, eg:</p>\n<pre><code>void task1(std::string msg)\n{\n\
    \    std::cout &lt;&lt; \"task1 says: \" &lt;&lt; msg;\n}\n</code></pre>\n<p>Now\
    \ create the <code>thread</code> object that will ultimately invoke the function\
    \ above like so:</p>\n<pre><code>std::thread t1(task1, \"Hello\");\n</code></pre>\n\
    <p>(You need to <code>#include &lt;thread&gt;</code> to access the <code>std::thread</code>\
    \ class)</p>\n<p>The constructor's arguments are the function the thread will\
    \ execute, followed by the function's parameters. The thread is automatically\
    \ started upon construction.</p>\n<p>If later on you want to wait for the thread\
    \ to be done executing the function, call:</p>\n<pre><code>t1.join(); \n</code></pre>\n\
    <p>(Joining means that the thread who invoked the new thread will wait for the\
    \ new thread to finish execution, before it will continue its own execution).</p>\n\
    <hr/>\n<h2>The Code</h2>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\
    #include &lt;thread&gt;\n\nusing namespace std;\n\n// The function we want to\
    \ execute on the new thread.\nvoid task1(string msg)\n{\n    cout &lt;&lt; \"\
    task1 says: \" &lt;&lt; msg;\n}\n\nint main()\n{\n    // Constructs the new thread\
    \ and runs it. Does not block execution.\n    thread t1(task1, \"Hello\");\n\n\
    \    // Do other things...\n\n    // Makes the main thread wait for the new thread\
    \ to finish execution, therefore blocks its own execution.\n    t1.join();\n}\n\
    </code></pre>\n<p><a href=\"http://en.cppreference.com/w/cpp/thread/thread\" rel=\"\
    noreferrer\">More information about std::thread here</a></p>\n<ul>\n<li><em>On\
    \ GCC, compile with <code>-std=c++0x -pthread</code>.</em></li>\n<li><em>This\
    \ should work for any operating-system, granted your compiler supports this (C++11)\
    \ feature.</em></li>\n</ul>\n</div>"
- - Simple example of threading in C++ [closed]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Well, technically any such object\
    \ will wind up being built over a C-style thread library because C++ only just\
    \ specified a stock <a href=\"http://en.cppreference.com/w/cpp/thread/thread\"\
    \ rel=\"noreferrer\"><code>std::thread</code></a> model in c++0x, which was just\
    \ nailed down and hasn't yet been implemented. The problem is somewhat systemic,\
    \ technically the existing c++ memory model isn't strict enough to allow for well\
    \ defined semantics for all of the 'happens before' cases. Hans Boehm wrote an\
    \ paper on the topic a while back and was instrumental in hammering out the c++0x\
    \ standard on the topic.</p>\n<p><a href=\"http://www.hpl.hp.com/techreports/2004/HPL-2004-209.html\"\
    \ rel=\"noreferrer\">http://www.hpl.hp.com/techreports/2004/HPL-2004-209.html</a></p>\n\
    <p>That said there are several cross-platform thread C++ libraries that work just\
    \ fine in practice. Intel thread building blocks contains a tbb::thread object\
    \ that closely approximates the c++0x standard and Boost has a boost::thread library\
    \ that does the same.</p>\n<p><a href=\"http://www.threadingbuildingblocks.org/\"\
    \ rel=\"noreferrer\">http://www.threadingbuildingblocks.org/</a></p>\n<p><a href=\"\
    http://www.boost.org/doc/libs/1_37_0/doc/html/thread.html\" rel=\"noreferrer\"\
    >http://www.boost.org/doc/libs/1_37_0/doc/html/thread.html</a></p>\n<p>Using boost::thread\
    \ you'd get something like:</p>\n<pre><code>#include &lt;boost/thread.hpp&gt;\n\
    \nvoid task1() { \n    // do stuff\n}\n\nvoid task2() { \n    // do stuff\n}\n\
    \nint main (int argc, char ** argv) {\n    using namespace boost; \n    thread\
    \ thread_1 = thread(task1);\n    thread thread_2 = thread(task2);\n\n    // do\
    \ other stuff\n    thread_2.join();\n    thread_1.join();\n    return 0;\n}\n\
    </code></pre>\n</div>"
- - Simple example of threading in C++ [closed]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There is also a POSIX library\
    \ for POSIX operating systems. \n<a href=\"http://en.wikipedia.org/wiki/POSIX\"\
    \ rel=\"nofollow noreferrer\">Check</a> for compatability </p>\n<pre><code>#include\
    \ &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n#include\
    \ &lt;iostream&gt;\n\nvoid *task(void *argument){\n      char* msg;\n      msg\
    \ = (char*)argument;\n      std::cout&lt;&lt;msg&lt;&lt;std::endl;\n}\n\nint main(){\n\
    \    pthread_t thread1, thread2;\n    int i1,i2;\n    i1 = pthread_create( &amp;thread1,\
    \ NULL, task, (void*) \"thread 1\");\n    i2 = pthread_create( &amp;thread2, NULL,\
    \ task, (void*) \"thread 2\");\n\n    pthread_join(thread1,NULL);\n    pthread_join(thread2,NULL);\n\
    \    return 0;\n\n}\n</code></pre>\n<p>compile with -lpthread    </p>\n<p><a href=\"\
    http://en.wikipedia.org/wiki/POSIX_Threads\" rel=\"nofollow noreferrer\">http://en.wikipedia.org/wiki/POSIX_Threads</a></p>\n\
    </div>"
- - How to get current time and date in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In C++ 11 you can use <a href=\"\
    http://en.cppreference.com/w/cpp/chrono/system_clock/now\" rel=\"noreferrer\"\
    ><code>std::chrono::system_clock::now()</code></a></p>\n<p>Example (copied from\
    \ <a href=\"https://en.cppreference.com/w/cpp/chrono\" rel=\"noreferrer\">en.cppreference.com</a>):</p>\n\
    <pre><code>#include &lt;iostream&gt;\n#include &lt;chrono&gt;\n#include &lt;ctime&gt;\
    \    \n\nint main()\n{\n    auto start = std::chrono::system_clock::now();\n \
    \   // Some computation here\n    auto end = std::chrono::system_clock::now();\n\
    \n    std::chrono::duration&lt;double&gt; elapsed_seconds = end-start;\n    std::time_t\
    \ end_time = std::chrono::system_clock::to_time_t(end);\n\n    std::cout &lt;&lt;\
    \ \"finished computation at \" &lt;&lt; std::ctime(&amp;end_time)\n          \
    \    &lt;&lt; \"elapsed time: \" &lt;&lt; elapsed_seconds.count() &lt;&lt; \"\
    s\\n\";\n}\n</code></pre>\n<p>This should print something like this:</p>\n<pre><code>finished\
    \ computation at Mon Oct  2 00:59:08 2017\nelapsed time: 1.88232s\n</code></pre>\n\
    </div>"
- - How to get current time and date in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>C++ shares its date/time functions\
    \ with C. The <a href=\"http://en.cppreference.com/w/cpp/chrono/c/tm\" rel=\"\
    noreferrer\">tm structure</a> is probably the easiest for a C++ programmer to\
    \ work with - the following prints today's date:</p>\n<pre><code>#include &lt;ctime&gt;\n\
    #include &lt;iostream&gt;\n\nint main() {\n    std::time_t t = std::time(0); \
    \  // get time now\n    std::tm* now = std::localtime(&amp;t);\n    std::cout\
    \ &lt;&lt; (now-&gt;tm_year + 1900) &lt;&lt; '-' \n         &lt;&lt; (now-&gt;tm_mon\
    \ + 1) &lt;&lt; '-'\n         &lt;&lt;  now-&gt;tm_mday\n         &lt;&lt; \"\\\
    n\";\n}\n</code></pre>\n</div>"
- - How to get current time and date in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can try the following cross-platform\
    \ code to get current date/time:</p>\n<pre><code>#include &lt;iostream&gt;\n#include\
    \ &lt;string&gt;\n#include &lt;stdio.h&gt;\n#include &lt;time.h&gt;\n\n// Get\
    \ current date/time, format is YYYY-MM-DD.HH:mm:ss\nconst std::string currentDateTime()\
    \ {\n    time_t     now = time(0);\n    struct tm  tstruct;\n    char       buf[80];\n\
    \    tstruct = *localtime(&amp;now);\n    // Visit http://en.cppreference.com/w/cpp/chrono/c/strftime\n\
    \    // for more information about date/time format\n    strftime(buf, sizeof(buf),\
    \ \"%Y-%m-%d.%X\", &amp;tstruct);\n\n    return buf;\n}\n\nint main() {\n    std::cout\
    \ &lt;&lt; \"currentDateTime()=\" &lt;&lt; currentDateTime() &lt;&lt; std::endl;\n\
    \    getchar();  // wait for keyboard input\n}\n</code></pre>\n<p>Output:</p>\n\
    <pre><code>currentDateTime()=2012-05-06.21:47:59\n</code></pre>\n<p>Please visit\
    \ <a href=\"http://en.cppreference.com/w/cpp/chrono/c/strftime\">here</a> for\
    \ more information about date/time format</p>\n</div>"
- - How to use Boost in Visual Studio 2010
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>While <a href=\"https://stackoverflow.com/questions/2629421/how-to-use-boost-in-vs-2010/2641513#2641513\"\
    >Nate's answer</a> is pretty good already, I'm going to expand on it more specifically\
    \ for Visual Studio 2010 as requested, and include information on compiling in\
    \ the various optional components which requires external libraries.</p>\n<p>If\
    \ you are using headers only libraries, then all you need to do is to unarchive\
    \ the boost download and set up the environment variables. The instruction below\
    \ set the environment variables for Visual Studio only, and not across the system\
    \ as a whole. Note you only have to do it once.</p>\n<ol>\n<li>Unarchive the latest\
    \ version of boost (1.47.0 as of writing) into a directory of your choice (e.g.\
    \ <code>C:\\boost_1_47_0</code>).</li>\n<li>Create a new empty project in Visual\
    \ Studio.</li>\n<li>Open the Property Manager and expand one of the configuration\
    \ for the platform of your choice.</li>\n<li>Select &amp; right click <code>Microsoft.Cpp.&lt;Platform&gt;.user</code>,\
    \ and select <code>Properties</code> to open the Property Page for edit.</li>\n\
    <li>Select <code>VC++ Directories</code> on the left.</li>\n<li>Edit the <code>Include\
    \ Directories</code> section to include the path to your boost source files.</li>\n\
    <li>Repeat steps 3 - 6 for different platform of your choice if needed.</li>\n\
    </ol>\n<p>If you want to use the part of boost that require building, but none\
    \ of the features that requires external dependencies, then building it is fairly\
    \ simple.</p>\n<ol>\n<li>Unarchive the latest version of boost (1.47.0 as of writing)\
    \ into a directory of your choice (e.g. <code>C:\\boost_1_47_0</code>).</li>\n\
    <li>Start the Visual Studio Command Prompt for the platform of your choice and\
    \ navigate to where boost is.</li>\n<li>Run: <code>bootstrap.bat</code> to build\
    \ b2.exe (previously named bjam).</li>\n<li><p>Run b2: </p>\n<ul>\n<li><strong>Win32:</strong>\
    \ <code>b2 --toolset=msvc-10.0 --build-type=complete stage</code> ;  </li>\n<li><strong>x64:</strong>\
    \ <code>b2 --toolset=msvc-10.0 --build-type=complete architecture=x86 address-model=64\
    \ stage</code> </li>\n</ul></li>\n</ol>\n<p>Go for a walk / watch a movie or 2\
    \ / ....  </p>\n<ol start=\"8\">\n<li>Go through steps 2 - 6 from the set of instruction\
    \ above to set the environment variables.</li>\n<li>Edit the <code>Library Directories</code>\
    \ section to include the path to your boost libraries output. (The default for\
    \ the example and instructions above would be <code>C:\\boost_1_47_0\\stage\\\
    lib</code>. Rename and move the directory first if you want to have x86 &amp;\
    \ x64 side by side (such as to <code>&lt;BOOST_PATH&gt;\\lib\\x86</code> &amp;\
    \ <code>&lt;BOOST_PATH&gt;\\lib\\x64</code>).</li>\n<li>Repeat steps 2 - 6 for\
    \ different platform of your choice if needed.</li>\n</ol>\n<p>If you want the\
    \ optional components, then you have more work to do. These are:</p>\n<ul>\n<li>Boost.IOStreams\
    \ Bzip2 filters</li>\n<li>Boost.IOStreams Zlib filters</li>\n<li>Boost.MPI</li>\n\
    <li>Boost.Python</li>\n<li>Boost.Regex ICU support</li>\n</ul>\n<p>Boost.IOStreams\
    \ Bzip2 filters:</p>\n<ol>\n<li>Unarchive the latest version of bzip2 library\
    \ (1.0.6 as of writing) source files into a directory of your choice (e.g. <code>C:\\\
    bzip2-1.0.6</code>).</li>\n<li>Follow the second set of instructions above to\
    \ build boost, but add in the option <code>-sBZIP2_SOURCE=\"C:\\bzip2-1.0.6\"\
    </code> when running b2 in step 5.</li>\n</ol>\n<p>Boost.IOStreams Zlib filters</p>\n\
    <ol>\n<li>Unarchive the latest version of zlib library (1.2.5 as of writing) source\
    \ files into a directory of your choice (e.g. <code>C:\\zlib-1.2.5</code>).</li>\n\
    <li>Follow the second set of instructions above to build boost, but add in the\
    \ option <code>-sZLIB_SOURCE=\"C:\\zlib-1.2.5\"</code> when running b2 in step\
    \ 5.</li>\n</ol>\n<p>Boost.MPI</p>\n<ol>\n<li>Install a MPI distribution such\
    \ as Microsoft Compute Cluster Pack.</li>\n<li>Follow steps 1 - 3 from the second\
    \ set of instructions above to build boost.</li>\n<li>Edit the file <code>project-config.jam</code>\
    \ in the directory <code>&lt;BOOST_PATH&gt;</code> that resulted from running\
    \ bootstrap. Add in a line that read <code>using mpi ;</code> (note the space\
    \ before the ';').</li>\n<li>Follow the rest of the steps from the second set\
    \ of instructions above to build boost. If auto-detection of the MPI installation\
    \ fail, then you'll need to look for and modify the appropriate build file to\
    \ look for MPI in the right place.</li>\n</ol>\n<p>Boost.Python</p>\n<ol>\n<li>Install\
    \ a Python distribution such as ActiveState's ActivePython. Make sure the Python\
    \ installation is in your PATH.</li>\n<li><p>To completely built the 32-bits version\
    \ of the library requires 32-bits Python, and similarly for the 64-bits version.\
    \ If you have multiple versions installed for such reason, you'll need to tell\
    \ b2 where to find specific version and when to use which one. One way to do that\
    \ would be to edit the file <code>project-config.jam</code> in the directory <code>&lt;BOOST_PATH&gt;</code>\
    \ that resulted from running bootstrap. Add in the following two lines adjusting\
    \ as appropriate for your Python installation paths &amp; versions (note the space\
    \ before the ';').</p>\n<p><code>using python : 2.6 : C:\\\\Python\\\\Python26\\\
    \\python ;</code></p>\n<p><code>using python : 2.6 : C:\\\\Python\\\\Python26-x64\\\
    \\python :  :  : &lt;address-model&gt;64 ;</code></p>\n<p>Do note that such explicit\
    \ Python specification currently cause MPI build to fail. So you'll need to do\
    \ some separate building with and without specification to build everything if\
    \ you're building MPI as well.</p></li>\n<li><p>Follow the second set of instructions\
    \ above to build boost.</p></li>\n</ol>\n<p>Boost.Regex ICU support</p>\n<ol>\n\
    <li>Unarchive the latest version of ICU4C library (4.8 as of writing) source file\
    \ into a directory of your choice (e.g. <code>C:\\icu4c-4_8</code>).</li>\n<li>Open\
    \ the Visual Studio Solution in <code>&lt;ICU_PATH&gt;\\source\\allinone</code>.</li>\n\
    <li>Build All for both debug &amp; release configuration for the platform of your\
    \ choice. There can be <a href=\"http://bugs.icu-project.org/trac/ticket/8170\"\
    \ rel=\"noreferrer\">a problem</a> building recent releases of ICU4C with Visual\
    \ Studio 2010 when the output for both debug &amp; release build are in the same\
    \ directory (which is the default behaviour). A possible workaround is to do a\
    \ Build All (of debug build say) and then do a Rebuild all in the 2nd configuration\
    \ (e.g. release build).</li>\n<li>If building for x64, you'll need to be running\
    \ x64 OS as there's post build steps that involves running some of the 64-bits\
    \ application that it's building.</li>\n<li>Optionally remove the source directory\
    \ when you're done.</li>\n<li>Follow the second set of instructions above to build\
    \ boost, but add in the option <code>-sICU_PATH=\"C:\\icu4c-4_8\"</code> when\
    \ running b2 in step 5.</li>\n</ol>\n</div>"
- - How to use Boost in Visual Studio 2010
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>While the <a href=\"http://www.boost.org/doc/libs/1_51_0/more/getting_started/windows.html\"\
    \ rel=\"nofollow noreferrer\">instructions</a> on the Boost web site are helpful,\
    \ here is a condensed version that also builds x64 libraries.</p>\n<ul>\n<li>You\
    \ only need to do this if you are using one of the libraries mentioned in <a href=\"\
    http://www.boost.org/doc/libs/1_51_0/more/getting_started/windows.html#header-only-libraries\"\
    \ rel=\"nofollow noreferrer\">section 3</a> of the instructions page. (E.g., to\
    \ use Boost.Filesystem requires compilation.) If you are not using any of those,\
    \ just unzip and go.</li>\n</ul>\n<h3>Build the 32-bit libraries</h3>\n<p>This\
    \ installs the Boost header files under <code>C:\\Boost\\include\\boost-(version)</code>,\
    \ and the 32-bit libraries under <code>C:\\Boost\\lib\\i386</code>. Note that\
    \ the default location for the libraries is <code>C:\\Boost\\lib</code> but you’ll\
    \ want to put them under an <code>i386</code> directory if you plan to build for\
    \ multiple architectures.</p>\n<ol>\n<li>Unzip Boost into a new directory.</li>\n\
    <li>Start a 32-bit MSVC command prompt and change to the directory where Boost\
    \ was unzipped.</li>\n<li>Run: <code>bootstrap</code></li>\n<li><p>Run: <code>b2\
    \ toolset=msvc-12.0 --build-type=complete --libdir=C:\\Boost\\lib\\i386 install</code></p>\n\
    <ul>\n<li>For Visual Studio 2012, use <code>toolset=msvc-11.0</code></li>\n<li>For\
    \ Visual Studio 2010, use <code>toolset=msvc-10.0</code></li>\n<li>For Visual\
    \ Studio 2017, use <code>toolset=msvc-14.1</code></li>\n</ul></li>\n<li><p>Add\
    \ <code>C:\\Boost\\include\\boost-(version)</code> to your include path.</p></li>\n\
    <li>Add <code>C:\\Boost\\lib\\i386</code> to your libs path.</li>\n</ol>\n<h3>Build\
    \ the 64-bit libraries</h3>\n<p>This installs the Boost header files under <code>C:\\\
    Boost\\include\\boost-(version)</code>, and the 64-bit libraries under <code>C:\\\
    Boost\\lib\\x64</code>. Note that the default location for the libraries is <code>C:\\\
    Boost\\lib</code> but you’ll want to put them under an <code>x64</code> directory\
    \ if you plan to build for multiple architectures.</p>\n<ol>\n<li>Unzip Boost\
    \ into a new directory.</li>\n<li>Start a 64-bit MSVC command prompt and change\
    \ to the directory where Boost was unzipped.</li>\n<li>Run: <code>bootstrap</code></li>\n\
    <li>Run: <code>b2 toolset=msvc-12.0 --build-type=complete --libdir=C:\\Boost\\\
    lib\\x64 architecture=x86 address-model=64 install</code>\n<ul>\n<li>For Visual\
    \ Studio 2012, use <code>toolset=msvc-11.0</code></li>\n<li>For Visual Studio\
    \ 2010, use <code>toolset=msvc-10.0</code></li>\n</ul></li>\n<li>Add <code>C:\\\
    Boost\\include\\boost-(version)</code> to your include path.</li>\n<li>Add <code>C:\\\
    Boost\\lib\\x64</code> to your libs path.</li>\n</ol>\n</div>"
- - How to use Boost in Visual Studio 2010
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can also try -j%NUMBER_OF_PROCESSORS%\
    \ as an argument it will use all your cores. Makes things super fast on my quad\
    \ core.</p>\n</div>"
- - What uses are there for “placement new”?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h2>Placement new allows you to\
    \ construct an object in memory that's already allocated.</h2>\n<p>You may want\
    \ to do this for optimization when you need to construct multiple instances of\
    \ an object, and it is faster not to re-allocate memory each time you need a new\
    \ instance.  Instead, it might be more efficient to perform a single allocation\
    \ for a chunk of memory that can hold multiple objects, even though you don't\
    \ want to use all of it at once.  </p>\n<p>DevX gives a <a href=\"http://www.devx.com/tips/Tip/12582\"\
    \ rel=\"nofollow noreferrer\">good example</a>:</p>\n<blockquote>\n<p>Standard\
    \ C++ also supports placement\n  new operator, which constructs an\n  object on\
    \ a pre-allocated buffer. This\n  is useful when building a memory pool,\n  a\
    \ garbage collector or simply when\n  performance and exception safety are\n \
    \ paramount (there's no danger of\n  allocation failure since the memory\n  has\
    \ already been allocated, and\n  constructing an object on a\n  pre-allocated\
    \ buffer takes less time):</p>\n</blockquote>\n<pre><code>char *buf  = new char[sizeof(string)];\
    \ // pre-allocated buffer\nstring *p = new (buf) string(\"hi\");    // placement\
    \ new\nstring *q = new string(\"hi\");          // ordinary heap allocation\n\
    </code></pre>\n<p>You may also want to be sure there can be no allocation failure\
    \ at a certain part of critical code (for instance, in code executed by a pacemaker).\
    \  In that case you would want to allocate memory earlier, then use placement\
    \ new within the critical section. </p>\n<h2>Deallocation in placement new</h2>\n\
    <p>You should not deallocate every object that is using the memory buffer.  Instead\
    \ you should delete[] only the original buffer.  You would have to then call the\
    \ destructors of your classes manually.  For a good suggestion on this, please\
    \ see Stroustrup's FAQ on: <a href=\"http://www.stroustrup.com/bs_faq2.html#placement-delete\"\
    \ rel=\"nofollow noreferrer\">Is there a \"placement delete\"</a>?</p>\n</div>"
- - What uses are there for “placement new”?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>We use it with custom memory\
    \ pools. Just a sketch:</p>\n<pre><code>class Pool {\npublic:\n    Pool() { /*\
    \ implementation details irrelevant */ };\n    virtual ~Pool() { /* ditto */ };\n\
    \n    virtual void *allocate(size_t);\n    virtual void deallocate(void *);\n\n\
    \    static Pool::misc_pool() { return misc_pool_p; /* global MiscPool for general\
    \ use */ }\n};\n\nclass ClusterPool : public Pool { /* ... */ };\nclass FastPool\
    \ : public Pool { /* ... */ };\nclass MapPool : public Pool { /* ... */ };\nclass\
    \ MiscPool : public Pool { /* ... */ };\n\n// elsewhere...\n\nvoid *pnew_new(size_t\
    \ size)\n{\n   return Pool::misc_pool()-&gt;allocate(size);\n}\n\nvoid *pnew_new(size_t\
    \ size, Pool *pool_p)\n{\n   if (!pool_p) {\n      return Pool::misc_pool()-&gt;allocate(size);\n\
    \   }\n   else {\n      return pool_p-&gt;allocate(size);\n   }\n}\n\nvoid pnew_delete(void\
    \ *p)\n{\n   Pool *hp = Pool::find_pool(p);\n   // note: if p == 0, then Pool::find_pool(p)\
    \ will return 0.\n   if (hp) {\n      hp-&gt;deallocate(p);\n   }\n}\n\n// elsewhere...\n\
    \nclass Obj {\npublic:\n   // misc ctors, dtors, etc.\n\n   // just a sampling\
    \ of new/del operators\n   void *operator new(size_t s)             { return pnew_new(s);\
    \ }\n   void *operator new(size_t s, Pool *hp)   { return pnew_new(s, hp); }\n\
    \   void operator delete(void *dp)           { pnew_delete(dp); }\n   void operator\
    \ delete(void *dp, Pool*)    { pnew_delete(dp); }\n\n   void *operator new[](size_t\
    \ s)           { return pnew_new(s); }\n   void *operator new[](size_t s, Pool*\
    \ hp) { return pnew_new(s, hp); }\n   void operator delete[](void *dp)       \
    \  { pnew_delete(dp); }\n   void operator delete[](void *dp, Pool*)  { pnew_delete(dp);\
    \ }\n};\n\n// elsewhere...\n\nClusterPool *cp = new ClusterPool(arg1, arg2, ...);\n\
    \nObj *new_obj = new (cp) Obj(arg_a, arg_b, ...);\n</code></pre>\n<p>Now you can\
    \ cluster objects together in a single memory arena, select an allocator which\
    \ is very fast but does no deallocation, use memory mapping, and any other semantic\
    \ you wish to impose by choosing the pool and passing it as an argument to an\
    \ object's placement new operator.</p>\n</div>"
- - What uses are there for “placement new”?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>It's useful if you want to separate\
    \ allocation from initialization. STL uses placement new to create container elements.</p>\n\
    </div>"
- - How does the compilation/linking process work?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The compilation of a C++ program\
    \ involves three steps:</p>\n<ol>\n<li><p>Preprocessing: the preprocessor takes\
    \ a C++ source code file and deals with the <code>#include</code>s, <code>#define</code>s\
    \ and other preprocessor directives. The output of this step is a \"pure\" C++\
    \ file without pre-processor directives.</p></li>\n<li><p>Compilation: the compiler\
    \ takes the pre-processor's output and produces an object file from it.</p></li>\n\
    <li><p>Linking: the linker takes the object files produced by the compiler and\
    \ produces either a library or an executable file.</p></li>\n</ol>\n<h1>Preprocessing</h1>\n\
    <p>The preprocessor handles the <em>preprocessor directives</em>, like <code>#include</code>\
    \ and <code>#define</code>. It is agnostic of the syntax of C++, which is why\
    \ it must be used with care.</p>\n<p>It works on one C++ source file at a time\
    \ by replacing <code>#include</code> directives with the content of the respective\
    \ files (which is usually just declarations), doing replacement of macros (<code>#define</code>),\
    \ and selecting different portions of text depending of <code>#if</code>, <code>#ifdef</code>\
    \ and <code>#ifndef</code> directives.</p>\n<p>The preprocessor works on a stream\
    \ of preprocessing tokens. Macro substitution is defined as replacing tokens with\
    \ other tokens (the operator <code>##</code> enables merging two tokens when it\
    \ makes sense).</p>\n<p>After all this, the preprocessor produces a single output\
    \ that is a stream of tokens resulting from the transformations described above.\
    \ It also adds some special markers that tell the compiler where each line came\
    \ from so that it can use those to produce sensible error messages.</p>\n<p>Some\
    \ errors can be produced at this stage with clever use of the <code>#if</code>\
    \ and <code>#error</code> directives.</p>\n<h1>Compilation</h1>\n<p>The compilation\
    \ step is performed on each output of the preprocessor. The compiler parses the\
    \ pure C++ source code (now without any preprocessor directives) and converts\
    \ it into assembly code. Then invokes underlying back-end(assembler in toolchain)\
    \ that assembles that code into machine code producing actual binary file in some\
    \ format(ELF, COFF, a.out, ...). This object file contains the compiled code (in\
    \ binary form) of the symbols defined in the input. Symbols in object files are\
    \ referred to by name.</p>\n<p>Object files can refer to symbols that are not\
    \ defined. This is the case when you use a declaration, and don't provide a definition\
    \ for it. The compiler doesn't mind this, and will happily produce the object\
    \ file as long as the source code is well-formed.</p>\n<p>Compilers usually let\
    \ you stop compilation at this point. This is very useful because with it you\
    \ can compile each source code file separately. The advantage this provides is\
    \ that you don't need to recompile <em>everything</em> if you only change a single\
    \ file.</p>\n<p>The produced object files can be put in special archives called\
    \ static libraries, for easier reusing later on.</p>\n<p>It's at this stage that\
    \ \"regular\" compiler errors, like syntax errors or failed overload resolution\
    \ errors, are reported.</p>\n<h1>Linking</h1>\n<p>The linker is what produces\
    \ the final compilation output from the object files the compiler produced. This\
    \ output can be either a shared (or dynamic) library (and while the name is similar,\
    \ they haven't got much in common with static libraries mentioned earlier) or\
    \ an executable.</p>\n<p>It links all the object files by replacing the references\
    \ to undefined symbols with the correct addresses. Each of these symbols can be\
    \ defined in other object files or in libraries. If they are defined in libraries\
    \ other than the standard library, you need to tell the linker about them.</p>\n\
    <p>At this stage the most common errors are missing definitions or duplicate definitions.\
    \ The former means that either the definitions don't exist (i.e. they are not\
    \ written), or that the object files or libraries where they reside were not given\
    \ to the linker. The latter is obvious: the same symbol was defined in two different\
    \ object files or libraries.</p>\n</div>"
- - How does the compilation/linking process work?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This topic is discussed at CProgramming.com:<br/>\n\
    <a href=\"https://www.cprogramming.com/compilingandlinking.html\" rel=\"noreferrer\"\
    >https://www.cprogramming.com/compilingandlinking.html</a></p>\n<p>Here is what\
    \ the author there wrote:</p>\n<blockquote>\n<p>Compiling isn't quite the same\
    \ as creating an executable file!\n  Instead, creating an executable is a multistage\
    \ process divided into\n  two components: compilation and linking. In reality,\
    \ even if a program\n  \"compiles fine\" it might not actually work because of\
    \ errors during\n  the linking phase. The total process of going from source code\
    \ files\n  to an executable might better be referred to as a build.</p>\n<h1>Compilation</h1>\n\
    <p>Compilation refers to the processing of source code files (.c, .cc, or\n  .cpp)\
    \ and the creation of an 'object' file. This step doesn't create\n  anything the\
    \ user can actually run. Instead, the compiler merely\n  produces the machine\
    \ language instructions that correspond to the\n  source code file that was compiled.\
    \ For instance, if you compile (but\n  don't link) three separate files, you will\
    \ have three object files\n  created as output, each with the name .o or .obj\n\
    \  (the extension will depend on your compiler). Each of these files\n  contains\
    \ a translation of your source code file into a machine\n  language file -- but\
    \ you can't run them yet! You need to turn them\n  into executables your operating\
    \ system can use. That's where the\n  linker comes in. </p>\n<h1>Linking</h1>\n\
    <p>Linking refers to the creation of a single executable file from\n  multiple\
    \ object files. In this step, it is common that the linker will\n  complain about\
    \ undefined functions (commonly, main itself). During\n  compilation, if the compiler\
    \ could not find the definition for a\n  particular function, it would just assume\
    \ that the function was\n  defined in another file. If this isn't the case, there's\
    \ no way the\n  compiler would know -- it doesn't look at the contents of more\
    \ than\n  one file at a time. The linker, on the other hand, may look at\n  multiple\
    \ files and try to find references for the functions that\n  weren't mentioned.\
    \ </p>\n<p>You might ask why there are separate compilation and linking steps.\n\
    \  First, it's probably easier to implement things that way. The compiler\n  does\
    \ its thing, and the linker does its thing -- by keeping the\n  functions separate,\
    \ the complexity of the program is reduced. Another\n  (more obvious) advantage\
    \ is that this allows the creation of large\n  programs without having to redo\
    \ the compilation step every time a file\n  is changed. Instead, using so called\
    \ \"conditional compilation\", it is\n  necessary to compile only those source\
    \ files that have changed; for\n  the rest, the object files are sufficient input\
    \ for the linker.\n  Finally, this makes it simple to implement libraries of pre-compiled\n\
    \  code: just create object files and link them just like any other\n  object\
    \ file. (The fact that each file is compiled separately from\n  information contained\
    \ in other files, incidentally, is called the\n  \"separate compilation model\"\
    .) </p>\n<p>To get the full benefits of condition compilation, it's probably\n\
    \  easier to get a program to help you than to try and remember which\n  files\
    \ you've changed since you last compiled. (You could, of course,\n  just recompile\
    \ every file that has a timestamp greater than the\n  timestamp of the corresponding\
    \ object file.) If you're working with an\n  integrated development environment\
    \ (IDE) it may already take care of\n  this for you. If you're using command line\
    \ tools, there's a nifty\n  utility called make that comes with most *nix distributions.\
    \ Along\n  with conditional compilation, it has several other nice features for\n\
    \  programming, such as allowing different compilations of your program\n  --\
    \ for instance, if you have a version producing verbose output for debugging.\
    \ </p>\n<p>Knowing the difference between the compilation phase and the link\n\
    \  phase can make it easier to hunt for bugs. Compiler errors are usually\n  syntactic\
    \ in nature -- a missing semicolon, an extra parenthesis.\n  Linking errors usually\
    \ have to do with missing or multiple\n  definitions. If you get an error that\
    \ a function or variable is\n  defined multiple times from the linker, that's\
    \ a good indication that\n  the error is that two of your source code files have\
    \ the same function\n  or variable.</p>\n</blockquote>\n</div>"
- - How does the compilation/linking process work?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>On the standard front:</p>\n\
    <ul>\n<li><p>a <em>translation unit</em> is the combination of a source files,\
    \ included headers and source files less any source lines skipped by conditional\
    \ inclusion preprocessor directive.</p></li>\n<li><p>the standard defines 9 phases\
    \ in the translation.  The first four correspond to preprocessing, the next three\
    \ are the compilation, the next one is the instantiation of templates (producing\
    \ <em>instantiation units</em>) and the last one is the linking.</p></li>\n</ul>\n\
    <p>In practice the eighth phase (the instantiation of templates) is often done\
    \ during the compilation process but some compilers delay it to the linking phase\
    \ and some spread it in the two.</p>\n</div>"
- - GCC -fPIC option
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Position Independent Code means\
    \ that the generated machine code is not dependent on being located at a specific\
    \ address in order to work.</p>\n<p>E.g. jumps would be generated as relative\
    \ rather than absolute.</p>\n<p>Pseudo-assembly:</p>\n<p>PIC: This would work\
    \ whether the code was at address 100 or 1000</p>\n<pre><code>100: COMPARE REG1,\
    \ REG2\n101: JUMP_IF_EQUAL CURRENT+10\n...\n111: NOP\n</code></pre>\n<p>Non-PIC:\
    \ This will only work if the code is at address 100</p>\n<pre><code>100: COMPARE\
    \ REG1, REG2\n101: JUMP_IF_EQUAL 111\n...\n111: NOP\n</code></pre>\n<p>EDIT: In\
    \ response to comment.</p>\n<p>If your code is compiled with -fPIC, it's suitable\
    \ for inclusion in a library - the library must be able to be relocated from its\
    \ preferred location in memory to another address, there could be another already\
    \ loaded library at the address your library prefers.</p>\n</div>"
- - GCC -fPIC option
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I'll try to explain what has\
    \ already been said in a simpler way.</p>\n<p>Whenever a shared lib is loaded,\
    \ the loader (the code on the OS which load any program you run) changes some\
    \ addresses in the code depending on where the object was loaded to.</p>\n<p>In\
    \ the above example, the \"111\" in the non-PIC code is written by the loader\
    \ the first time it was loaded.</p>\n<p>For not shared objects, you may want it\
    \ to be like that because the compiler can make some optimizations on that code.</p>\n\
    <p>For shared object, if another process will want to \"link\" to that code he\
    \ must read it to the same virtual addresses or the \"111\" will make no sense.\
    \ but that virtual-space may already be in use in the second process.</p>\n</div>"
- - GCC -fPIC option
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Code that is built into shared\
    \ libraries should normally be position-independent code, so that the shared library\
    \ can readily be loaded at (more or less) any address in memory.  The <code>-fPIC</code>\
    \ option ensures that GCC produces such code.</p>\n</div>"
- - Fastest way to check if a file exist using standard C++/C++11/C?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Well I threw together a test\
    \ program that ran each of these methods 100,000 times, half on files that existed\
    \ and half on files that didn't.</p>\n<pre><code>#include &lt;sys/stat.h&gt;\n\
    #include &lt;unistd.h&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\
    \ninline bool exists_test0 (const std::string&amp; name) {\n    ifstream f(name.c_str());\n\
    \    return f.good();\n}\n\ninline bool exists_test1 (const std::string&amp; name)\
    \ {\n    if (FILE *file = fopen(name.c_str(), \"r\")) {\n        fclose(file);\n\
    \        return true;\n    } else {\n        return false;\n    }   \n}\n\ninline\
    \ bool exists_test2 (const std::string&amp; name) {\n    return ( access( name.c_str(),\
    \ F_OK ) != -1 );\n}\n\ninline bool exists_test3 (const std::string&amp; name)\
    \ {\n  struct stat buffer;   \n  return (stat (name.c_str(), &amp;buffer) == 0);\
    \ \n}\n</code></pre>\n<p>Results for total time to run the 100,000 calls averaged\
    \ over 5 runs,</p>\n<pre><code>Method exists_test0 (ifstream): **0.485s**\nMethod\
    \ exists_test1 (FILE fopen): **0.302s**\nMethod exists_test2 (posix access()):\
    \ **0.202s**\nMethod exists_test3 (posix stat()): **0.134s**\n</code></pre>\n\
    <p>The <code>stat()</code> function provided the best performance on my system\
    \ (Linux, compiled with <code>g++</code>), with a standard <code>fopen</code>\
    \ call being your best bet if you for some reason refuse to use POSIX functions.</p>\n\
    </div>"
- - Fastest way to check if a file exist using standard C++/C++11/C?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I use this piece of code, it\
    \ works OK with me so far. This does not use many fancy features of C++:</p>\n\
    <pre><code>bool is_file_exist(const char *fileName)\n{\n    std::ifstream infile(fileName);\n\
    \    return infile.good();\n}\n</code></pre>\n</div>"
- - Fastest way to check if a file exist using standard C++/C++11/C?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Remark : in C++14 and as soon\
    \ as the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4099.html\"\
    \ rel=\"noreferrer\">filesystem TS</a> will be finished and adopted, the solution\
    \ will be to use:</p>\n<pre><code>std::experimental::filesystem::exists(\"helloworld.txt\"\
    );\n</code></pre>\n<p>and since C++17, only:</p>\n<pre><code>std::filesystem::exists(\"\
    helloworld.txt\");\n</code></pre>\n</div>"
- - How do I pass a unique_ptr argument to a constructor or a function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Here are the possible ways to\
    \ take a unique pointer as an argument, as well as their associated meaning.</p>\n\
    <h3>(A) By Value</h3>\n<pre><code>Base(std::unique_ptr&lt;Base&gt; n)\n  : next(std::move(n))\
    \ {}\n</code></pre>\n<p>In order for the user to call this, they must do one of\
    \ the following:</p>\n<pre><code>Base newBase(std::move(nextBase));\nBase fromTemp(std::unique_ptr&lt;Base&gt;(new\
    \ Base(...));\n</code></pre>\n<p>To take a unique pointer by value means that\
    \ you are <em>transferring</em> ownership of the pointer to the function/object/etc\
    \ in question. After <code>newBase</code> is constructed, <code>nextBase</code>\
    \ is guaranteed to be <em>empty</em>. You don't own the object, and you don't\
    \ even have a pointer to it anymore. It's gone.</p>\n<p>This is ensured because\
    \ we take the parameter by value. <code>std::move</code> doesn't actually <em>move</em>\
    \ anything; it's just a fancy cast. <code>std::move(nextBase)</code> returns a\
    \ <code>Base&amp;&amp;</code> that is an r-value reference to <code>nextBase</code>.\
    \ That's all it does.</p>\n<p>Because <code>Base::Base(std::unique_ptr&lt;Base&gt;\
    \ n)</code> takes its argument by value rather than by r-value reference, C++\
    \ will automatically construct a temporary for us. It creates a <code>std::unique_ptr&lt;Base&gt;</code>\
    \ from the <code>Base&amp;&amp;</code> that we gave the function via <code>std::move(nextBase)</code>.\
    \ It is the construction of this temporary that actually <em>moves</em> the value\
    \ from <code>nextBase</code> into the function argument <code>n</code>.</p>\n\
    <h3>(B) By non-const l-value reference</h3>\n<pre><code>Base(std::unique_ptr&lt;Base&gt;\
    \ &amp;n)\n  : next(std::move(n)) {}\n</code></pre>\n<p>This has to be called\
    \ on an actual l-value (a named variable). It cannot be called with a temporary\
    \ like this:</p>\n<pre><code>Base newBase(std::unique_ptr&lt;Base&gt;(new Base));\
    \ //Illegal in this case.\n</code></pre>\n<p>The meaning of this is the same as\
    \ the meaning of any other use of non-const references: the function may <em>or\
    \ may not</em> claim ownership of the pointer. Given this code:</p>\n<pre><code>Base\
    \ newBase(nextBase);\n</code></pre>\n<p>There is no guarantee that <code>nextBase</code>\
    \ is empty. It <em>may</em> be empty; it may not. It really depends on what <code>Base::Base(std::unique_ptr&lt;Base&gt;\
    \ &amp;n)</code> wants to do. Because of that, it's not very evident just from\
    \ the function signature what's going to happen; you have to read the implementation\
    \ (or associated documentation).</p>\n<p>Because of that, I wouldn't suggest this\
    \ as an interface.</p>\n<h3>(C) By const l-value reference</h3>\n<pre><code>Base(std::unique_ptr&lt;Base&gt;\
    \ const &amp;n);\n</code></pre>\n<p>I don't show an implementation, because you\
    \ <em>cannot</em> move from a <code>const&amp;</code>. By passing a <code>const&amp;</code>,\
    \ you are saying that the function can access the <code>Base</code> via the pointer,\
    \ but it cannot <em>store</em> it anywhere. It cannot claim ownership of it.</p>\n\
    <p>This can be useful. Not necessarily for your specific case, but it's always\
    \ good to be able to hand someone a pointer and know that they <em>cannot</em>\
    \ (without breaking rules of C++, like no casting away <code>const</code>) claim\
    \ ownership of it. They can't store it. They can pass it to others, but those\
    \ others have to abide by the same rules.</p>\n<h3>(D) By r-value reference</h3>\n\
    <pre><code>Base(std::unique_ptr&lt;Base&gt; &amp;&amp;n)\n  : next(std::move(n))\
    \ {}\n</code></pre>\n<p>This is more or less identical to the \"by non-const l-value\
    \ reference\" case. The differences are two things.</p>\n<ol>\n<li><p>You <em>can</em>\
    \ pass a temporary:</p>\n<pre><code>Base newBase(std::unique_ptr&lt;Base&gt;(new\
    \ Base)); //legal now..\n</code></pre></li>\n<li><p>You <em>must</em> use <code>std::move</code>\
    \ when passing non-temporary arguments.</p></li>\n</ol>\n<p>The latter is really\
    \ the problem. If you see this line:</p>\n<pre><code>Base newBase(std::move(nextBase));\n\
    </code></pre>\n<p>You have a reasonable expectation that, after this line completes,\
    \ <code>nextBase</code> should be empty. It should have been moved from. After\
    \ all, you have that <code>std::move</code> sitting there, telling you that movement\
    \ has occurred.</p>\n<p>The problem is that it hasn't. It is not <em>guaranteed</em>\
    \ to have been moved from. It <em>may</em> have been moved from, but you will\
    \ only know by looking at the source code. You cannot tell just from the function\
    \ signature.</p>\n<h3>Recommendations</h3>\n<ul>\n<li><strong>(A) By Value:</strong>\
    \ If you mean for a function to claim <em>ownership</em> of a <code>unique_ptr</code>,\
    \ take it by value.</li>\n<li><strong>(C) By const l-value reference:</strong>\
    \ If you mean for a function to simply use the <code>unique_ptr</code> for the\
    \ duration of that function's execution, take it by <code>const&amp;</code>. Alternatively,\
    \ pass a <code>&amp;</code> or <code>const&amp;</code> to the actual type pointed\
    \ to, rather than using a <code>unique_ptr</code>.</li>\n<li><strong>(D) By r-value\
    \ reference:</strong> If a function may or may not claim ownership (depending\
    \ on internal code paths), then take it by <code>&amp;&amp;</code>. But I strongly\
    \ advise against doing this whenever possible.</li>\n</ul>\n<h3>How to manipulate\
    \ unique_ptr</h3>\n<p>You cannot copy a <code>unique_ptr</code>. You can only\
    \ move it. The proper way to do this is with the <code>std::move</code> standard\
    \ library function.</p>\n<p>If you take a <code>unique_ptr</code> by value, you\
    \ can move from it freely. But movement doesn't actually happen because of <code>std::move</code>.\
    \ Take the following statement:</p>\n<pre><code>std::unique_ptr&lt;Base&gt; newPtr(std::move(oldPtr));\n\
    </code></pre>\n<p>This is really two statements:</p>\n<pre><code>std::unique_ptr&lt;Base&gt;\
    \ &amp;&amp;temporary = std::move(oldPtr);\nstd::unique_ptr&lt;Base&gt; newPtr(temporary);\n\
    </code></pre>\n<p>(note: The above code does not technically compile, since non-temporary\
    \ r-value references are not actually r-values. It is here for demo purposes only).</p>\n\
    <p>The <code>temporary</code> is just an r-value reference to <code>oldPtr</code>.\
    \ It is in the <em>constructor</em> of <code>newPtr</code> where the movement\
    \ happens. <code>unique_ptr</code>'s move constructor (a constructor that takes\
    \ a <code>&amp;&amp;</code> to itself) is what does the actual movement.</p>\n\
    <p>If you have a <code>unique_ptr</code> value and you want to store it somewhere,\
    \ you <em>must</em> use <code>std::move</code> to do the storage.</p>\n</div>"
- - How do I pass a unique_ptr argument to a constructor or a function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Let me try to state the different\
    \ viable modes of passing pointers around to objects whose memory is managed by\
    \ an instance of the <code>std::unique_ptr</code> class template; it also applies\
    \ to the the older <code>std::auto_ptr</code> class template (which I believe\
    \ allows all uses that unique pointer does, but for which in addition modifiable\
    \ lvalues will be accepted where rvalues are expected, without having to invoke\
    \ <code>std::move</code>), and to some extent also to <code>std::shared_ptr</code>.</p>\n\
    <p>As a concrete example for the discussion I will consider the following simple\
    \ list type</p>\n<pre><code>struct node;\ntypedef std::unique_ptr&lt;node&gt;\
    \ list;\nstruct node { int entry; list next; }\n</code></pre>\n<p>Instances of\
    \ such list (which cannot be allowed to share parts with other instances or be\
    \ circular) are entirely owned by whoever holds the initial <code>list</code>\
    \ pointer. If client code knows that the list it stores will never be empty, it\
    \ may also choose to store the first <code>node</code> directly rather than a\
    \ <code>list</code>.\nNo destructor for <code>node</code> needs to be defined:\
    \ since the destructors for its fields are automatically called, the whole list\
    \ will be recursively deleted by the smart pointer destructor once the lifetime\
    \ of initial pointer or node ends.</p>\n<p>This recursive type gives the occasion\
    \ to discuss some cases that are less visible in the case of a smart pointer to\
    \ plain data. Also the functions themselves occasionally provide  (recursively)\
    \ an example of client code as well. The typedef for <code>list</code> is of course\
    \ biased towards <code>unique_ptr</code>, but the definition could be changed\
    \ to use <code>auto_ptr</code> or <code>shared_ptr</code> instead without much\
    \ need to change to what is said below (notably concerning exception safety being\
    \ assured without the need to write destructors).</p>\n<h1>Modes of passing smart\
    \ pointers around</h1>\n<h2>Mode 0: pass a pointer or reference argument instead\
    \ of a smart pointer</h2>\n<p>If your function is not concerned with ownership,\
    \ this is the preferred method: don't make it take a smart pointer at all. In\
    \ this case your function does not need to worry <em>who</em> owns the object\
    \ pointed to, or by what means that ownership is managed, so passing a raw pointer\
    \ is both perfectly safe, and the most flexible form, since regardless of ownership\
    \ a client can always produce a raw pointer (either by calling the <code>get</code>\
    \ method or from the address-of operator <code>&amp;</code>).</p>\n<p>For instance\
    \ the function to compute the length of such list, should not be give a <code>list</code>\
    \ argument, but a raw pointer:</p>\n<pre><code>size_t length(const node* p)\n\
    { size_t l=0; for ( ; p!=nullptr; p=p-&gt;next.get()) ++l; return l; }\n</code></pre>\n\
    <p>A client that holds a variable <code>list head</code> can call this function\
    \ as <code>length(head.get())</code>, \nwhile a client that has chosen instead\
    \ to store a <code>node n</code> representing a non-empty list can call <code>length(&amp;n)</code>.</p>\n\
    <p>If the pointer is guaranteed to be non null (which is not the case here since\
    \ lists may be empty) one might prefer to pass a reference rather than a pointer.\
    \ It might be a pointer/reference to non-<code>const</code> if the function needs\
    \ to update the contents of the node(s), without adding or removing any of them\
    \ (the latter would involve ownership).</p>\n<p>An interesting case that falls\
    \ in the mode 0 category is making a (deep) copy of the list; while a function\
    \ doing this must of course transfer ownership of the copy it creates, it is not\
    \ concerned with the ownership of the list it is copying. So it could be defined\
    \ as follows:</p>\n<pre><code>list copy(const node* p)\n{ return list( p==nullptr\
    \ ? nullptr : new node{p-&gt;entry,copy(p-&gt;next.get())} ); }\n</code></pre>\n\
    <p>This code merits a close look, both for the question as to why it compiles\
    \ at all (the result of the recursive call to <code>copy</code> in the initialiser\
    \ list binds to the rvalue reference argument in the move constructor of <code>unique_ptr&lt;node&gt;</code>,\
    \ a.k.a. <code>list</code>, when initialising the <code>next</code> field of the\
    \ generated <code>node</code>), and for the question as to why it is exception-safe\
    \ (if during the recursive allocation process memory runs out and some call of\
    \ <code>new</code> throws <code>std::bad_alloc</code>, then at that time a pointer\
    \ to the partly constructed list is held anonymously in a temporary of type <code>list</code>\
    \ created for the initialiser list, and its destructor will clean up that partial\
    \ list). By the way one should resist the temptation to replace (as I initially\
    \ did) the second <code>nullptr</code> by <code>p</code>, which after all is known\
    \ to be null at that point: one cannot construct a smart pointer from a (raw)\
    \ pointer <em>to constant</em>, even when it is known to be null.</p>\n<h2>Mode\
    \ 1: pass a smart pointer by value</h2>\n<p>A function that takes a smart pointer\
    \ value as argument takes possession of the object pointed to right away: the\
    \ smart pointer that the caller held (whether in a named variable or an anonymous\
    \ temporary) is copied into the argument value at function entrance and the caller's\
    \ pointer has become null (in the case of a temporary the copy might have been\
    \ elided, but in any case the caller has lost access to the pointed to object).\
    \ I would like to call this mode <strong>call by cash</strong>: caller pays up\
    \ front for the service called, and can have no illusions about ownership after\
    \ the call. To make this clear, the language rules require the caller to wrap\
    \ the argument in <code>std::move</code> if the smart pointer is held in a variable\
    \ (technically, if the argument is an lvalue); in this case (but not for mode\
    \ 3 below) this function does what its name suggests, namely move the value from\
    \ the variable to a temporary, leaving the variable null.</p>\n<p>For cases where\
    \ the called function unconditionally takes ownership of (pilfers) the pointed-to\
    \ object, this mode used with <code>std::unique_ptr</code> or <code>std::auto_ptr</code>\
    \ is a good way of passing a pointer together with its ownership, which avoids\
    \ any risk of memory leaks. Nonetheless I think that there are only very few situations\
    \ where mode 3 below is not to be preferred (ever so slightly) over mode 1. For\
    \ this reason I shall provide no usage examples of this mode. (But see the <code>reversed</code>\
    \ example of mode 3 below, where it is remarked that mode 1 would do at least\
    \ as well.) If the function takes more arguments than just this pointer, it may\
    \ happen that there is in addition a <a href=\"https://stackoverflow.com/q/28336207/1436796\"\
    >technical reason to avoid mode 1</a> (with <code>std::unique_ptr</code> or <code>std::auto_ptr</code>):\
    \ since an actual move operation takes place while passing a pointer variable\
    \ <code>p</code> by the expression <code>std::move(p)</code>, it cannot be assumed\
    \ that <code>p</code> holds a useful value while evaluating the other arguments\
    \ (the order of evaluation being unspecified), which could lead to subtle errors;\
    \ by contrast, using mode 3 assures that no move from <code>p</code> takes place\
    \ before the function call, so other arguments can safely access a value through\
    \ <code>p</code>.</p>\n<p>When used with <code>std::shared_ptr</code>, this mode\
    \ is interesting in that with a single function definition it allows the caller\
    \ to <em>choose</em> whether to keep a sharing copy of the pointer for itself\
    \ while creating a new sharing copy to be used by the function (this happens when\
    \ an lvalue argument is provided; the copy constructor for shared pointers used\
    \ at the call increases the reference count), or to just give the function a copy\
    \ of the pointer without retaining one or touching the reference count (this happens\
    \ when a rvalue argument is provided, possibly an lvalue wrapped in a call of\
    \ <code>std::move</code>). For instance</p>\n<pre><code>void f(std::shared_ptr&lt;X&gt;\
    \ x) // call by shared cash\n{ container.insert(std::move(x)); } // store shared\
    \ pointer in container\n\nvoid client()\n{ std::shared_ptr&lt;X&gt; p = std::make_shared&lt;X&gt;(args);\n\
    \  f(p); // lvalue argument; store pointer in container but keep a copy\n  f(std::make_shared&lt;X&gt;(args));\
    \ // prvalue argument; fresh pointer is just stored away\n  f(std::move(p)); //\
    \ xvalue argument; p is transferred to container and left null\n}\n</code></pre>\n\
    <p>The same could be achieved by separately defining <code>void f(const std::shared_ptr&lt;X&gt;&amp;\
    \ x)</code> (for the lvalue case) and <code>void f(std::shared_ptr&lt;X&gt;&amp;&amp;\
    \ x)</code> (for the rvalue case), with function bodies differing only in that\
    \ the first version invokes copy semantics (using copy construction/assignment\
    \ when using <code>x</code>) but the second version move semantics (writing <code>std::move(x)</code>\
    \ instead, as in the example code). So for shared pointers, mode 1 can be useful\
    \ to avoid some code duplication.</p>\n<h2>Mode 2: pass a smart pointer by (modifiable)\
    \ lvalue reference</h2>\n<p>Here the function just requires having a modifiable\
    \ reference to the smart pointer, but gives no indication of what it will do with\
    \ it. I would like to call this method <strong>call by card</strong>: caller ensures\
    \ payment by giving a credit card number. The reference <em>can</em> be used to\
    \ take ownership of the pointed-to object, but it does not have to. This mode\
    \ requires providing a modifiable lvalue argument, corresponding to the fact that\
    \ the desired effect of the function may include leaving a useful value in the\
    \ argument variable. A caller with an rvalue expression that it wishes to pass\
    \ to such a function would be forced to store it in a named variable to be able\
    \ to make the call, since the language only provides implicit conversion to a\
    \ <em>constant</em> lvalue reference (referring to a temporary) from an rvalue.\
    \ (Unlike the opposite situation handled by <code>std::move</code>, a cast from\
    \ <code>Y&amp;&amp;</code> to <code>Y&amp;</code>, with <code>Y</code> the smart\
    \ pointer type, is not possible; nonetheless this conversion could be obtained\
    \ by a simple template function if really desired; see <a href=\"https://stackoverflow.com/a/24868376/1436796\"\
    >https://stackoverflow.com/a/24868376/1436796</a>). For the case where the called\
    \ function intends to unconditionally take ownership of the object, stealing from\
    \ the argument, the obligation to provide an lvalue argument is giving the wrong\
    \ signal: the variable will have no useful value after the call. Therefore mode\
    \ 3, which gives identical possibilities inside our function but asks callers\
    \ to provide an rvalue, should be preferred for such usage.</p>\n<p>However there\
    \ is a valid use case for mode 2, namely functions that may <em>modify</em> the\
    \ pointer, or the object pointed to <em>in a way that involves ownership</em>.\
    \ For instance, a function that prefixes a node to a <code>list</code> provides\
    \ an example of such use:</p>\n<pre><code>void prepend (int x, list&amp; l) {\
    \ l = list( new node{ x, std::move(l)} ); }\n</code></pre>\n<p>Clearly it would\
    \ be undesirable here to force callers to use <code>std::move</code>, since their\
    \ smart pointer still owns a well defined and non-empty list after the call, though\
    \ a different one than before.</p>\n<p>Again it is interesting to observe what\
    \ happens if the <code>prepend</code> call fails for lack of free memory. Then\
    \ the <code>new</code> call will throw <code>std::bad_alloc</code>; at this point\
    \ in time, since no <code>node</code> could be allocated, it is certain that the\
    \ passed rvalue reference (mode 3) from <code>std::move(l)</code> cannot yet have\
    \ been pilfered, as that would be done to construct the <code>next</code> field\
    \ of the <code>node</code> that failed to be allocated. So the original smart\
    \ pointer <code>l</code> still holds the original list when the error is thrown;\
    \ that list will either be properly destroyed by the smart pointer destructor,\
    \ or in case <code>l</code> should survive thanks to a sufficiently early <code>catch</code>\
    \ clause, it will still hold the original list.</p>\n<p>That was a constructive\
    \ example; with a wink to <a href=\"https://stackoverflow.com/q/19375403/1436796\"\
    >this question</a> one can also give the more destructive example of removing\
    \ the first node containing a given value, if any:</p>\n<pre><code>void remove_first(int\
    \ x, list&amp; l)\n{ list* p = &amp;l;\n  while ((*p).get()!=nullptr and (*p)-&gt;entry!=x)\n\
    \    p = &amp;(*p)-&gt;next;\n  if ((*p).get()!=nullptr)\n    (*p).reset((*p)-&gt;next.release());\
    \ // or equivalent: *p = std::move((*p)-&gt;next); \n}\n</code></pre>\n<p>Again\
    \ the correctness is quite subtle here. Notably, in the final statement the pointer\
    \ <code>(*p)-&gt;next</code> held inside the node to be removed is unlinked (by\
    \ <code>release</code>, which returns the pointer but makes the original null)\
    \ <em>before</em> <code>reset</code> (implicitly) destroys that node (when it\
    \ destroys the old value held by <code>p</code>), ensuring that one and <em>only\
    \ one</em> node is destroyed at that time. (In the alternative form mentioned\
    \ in the comment, this timing would be left to the internals of the implementation\
    \ of the move-assignment operator of the <code>std::unique_ptr</code> instance\
    \ <code>list</code>; the standard says 20.7.1.2.3;2 that this operator should\
    \ act \"as if by calling <code>reset(u.release())</code>\", whence the timing\
    \ should be safe here too.)</p>\n<p>Note that <code>prepend</code> and <code>remove_first</code>\
    \ cannot be called by clients who store a local <code>node</code> variable for\
    \ an always non-empty list, and rightly so since the implementations given could\
    \ not work for such cases.</p>\n<h2>Mode 3: pass a smart pointer by (modifiable)\
    \ rvalue reference</h2>\n<p>This is the preferred mode to use when simply taking\
    \ ownership of the pointer.  I would like to call this method <strong>call by\
    \ check</strong>: caller must accept relinquishing ownership, as if providing\
    \ cash, by signing the check, but the actual withdrawal is postponed until the\
    \ called function actually pilfers the pointer (exactly as it would when using\
    \ mode 2). The \"signing of the check\" concretely means callers have to wrap\
    \ an argument in <code>std::move</code> (as in mode 1) if it is an lvalue (if\
    \ it is an rvalue, the \"giving up ownership\" part is obvious and requires no\
    \ separate code).</p>\n<p>Note that technically mode 3 behaves exactly as mode\
    \ 2, so the called function <em>does not have to</em> assume ownership; however\
    \ I would insist that if there is any uncertainty about ownership transfer (in\
    \ normal usage), mode 2 should be preferred to mode 3, so that using mode 3 is\
    \ implicitly a signal to callers that they <em>are</em> giving up ownership. One\
    \ might retort that only mode 1 argument passing really signals forced loss of\
    \ ownership to callers. But if a client has any doubts about intentions of the\
    \ called function, she is supposed to know the specifications of the function\
    \ being called, which should remove any doubt.</p>\n<p>It is surprisingly difficult\
    \ to find a typical example involving our <code>list</code> type that uses mode\
    \ 3 argument passing. Moving a list <code>b</code> to the end of another list\
    \ <code>a</code> is a typical example; however <code>a</code> (which survives\
    \ and holds the result of the operation) is better passed using mode 2:</p>\n\
    <pre><code>void append (list&amp; a, list&amp;&amp; b)\n{ list* p=&amp;a;\n  while\
    \ ((*p).get()!=nullptr) // find end of list a\n    p=&amp;(*p)-&gt;next;\n  *p\
    \ = std::move(b); // attach b; the variable b relinquishes ownership here\n}\n\
    </code></pre>\n<p>A pure example of mode 3 argument passing is the following that\
    \ takes a list (and its ownership), and returns a list containing the identical\
    \ nodes in reverse order.</p>\n<pre><code>list reversed (list&amp;&amp; l) noexcept\
    \ // pilfering reversal of list\n{ list p(l.release()); // move list into temporary\
    \ for traversal\n  list result(nullptr);\n  while (p.get()!=nullptr)\n  { // permute:\
    \ result --&gt; p-&gt;next --&gt; p --&gt; (cycle to result)\n    result.swap(p-&gt;next);\n\
    \    result.swap(p);\n  }\n  return result;\n}\n</code></pre>\n<p>This function\
    \ might be called as in <code>l = reversed(std::move(l));</code> to reverse the\
    \ list into itself, but the reversed list can also be used differently.</p>\n\
    <p>Here the argument is immediately moved to a local variable for efficiency (one\
    \ could have used the parameter <code>l</code> directly in the place of <code>p</code>,\
    \ but then accessing it each time would involve an extra level of indirection);\
    \ hence the difference with mode 1 argument passing is minimal. In fact using\
    \ that mode, the argument could have served directly as local variable, thus avoiding\
    \ that initial move; this is just an instance of the general principle that if\
    \ an argument passed by reference only serves to initialise a local variable,\
    \ one might just as well pass it by value instead and use the parameter as local\
    \ variable.</p>\n<p>Using mode 3 appears to be advocated by the standard, as witnessed\
    \ by the fact that all provided library functions that transfer ownership of smart\
    \ pointers using mode 3. A particular convincing case in point is the constructor\
    \ <code>std::shared_ptr&lt;T&gt;(auto_ptr&lt;T&gt;&amp;&amp; p)</code>. That constructor\
    \ used (in <code>std::tr1</code>) to take a modifiable <em>lvalue</em> reference\
    \ (just like the <code>auto_ptr&lt;T&gt;&amp;</code> copy constructor), and could\
    \ therefore be called with an <code>auto_ptr&lt;T&gt;</code> lvalue <code>p</code>\
    \ as in <code>std::shared_ptr&lt;T&gt; q(p)</code>, after which <code>p</code>\
    \ has been reset to null. Due to the change from mode 2 to 3 in argument passing,\
    \ this old code must now be rewritten to <code>std::shared_ptr&lt;T&gt; q(std::move(p))</code>\
    \ and will then continue to work. I understand that the committee did not like\
    \ the mode 2 here, but they had the option of changing to mode 1, by defining\
    \ <code>std::shared_ptr&lt;T&gt;(auto_ptr&lt;T&gt; p)</code> instead, they could\
    \ have ensured that old code works without modification, because (unlike unique-pointers)\
    \ auto-pointers can be silently dereferenced to a value (the pointer object itself\
    \ being reset to null in the process). Apparently the committee so much preferred\
    \ advocating mode 3 over mode 1, that they chose to <em>actively break existing\
    \ code</em> rather than to use mode 1 even for an already deprecated usage.</p>\n\
    <h1>When to prefer mode 3 over mode 1</h1>\n<p>Mode 1 is perfectly usable in many\
    \ cases, and might be preferred over mode 3 in cases where assuming ownership\
    \ would otherwise takes the form of moving the smart pointer to a local variable\
    \ as in the <code>reversed</code> example above. However, I can see two reasons\
    \ to prefer mode 3 in the more general case:</p>\n<ul>\n<li><p>It is slightly\
    \ more efficient to pass a reference than to create a temporary and nix the old\
    \ pointer (handling cash is somewhat laborious); in some scenarios the pointer\
    \ may be passed several times unchanged to another function before it is actually\
    \ pilfered. Such passing will generally require writing <code>std::move</code>\
    \ (unless mode 2 is used), but note that this is just a cast that does not actually\
    \ do anything (in particular no dereferencing), so it has zero cost attached.</p></li>\n\
    <li><p>Should it be conceivable that anything throws an exception between the\
    \ start of the function call and the point where it (or some contained call) actually\
    \ moves the pointed-to object into another data structure (and this exception\
    \ is not already caught inside the function itself), then when using mode 1, the\
    \ object referred to by the smart pointer will be destroyed before a <code>catch</code>\
    \ clause can handle the exception (because the function parameter was destructed\
    \ during stack unwinding), but not so when using mode 3. The latter gives the\
    \ caller has the option to recover the data of the object in such cases (by catching\
    \ the exception). Note that mode 1 here <em>does not cause a memory leak</em>,\
    \ but may lead to an unrecoverable loss of data for the program, which might be\
    \ undesirable as well.</p></li>\n</ul>\n<h1>Returning a smart pointer: always\
    \ by value</h1>\n<p>To conclude a word about <em>returning</em> a smart pointer,\
    \ presumably pointing to an object created for use by the caller. This is not\
    \ really a case comparable with passing pointers into functions, but for completeness\
    \ I would like to insist that in such cases <strong>always return by value</strong>\
    \ (and <em>don't use</em> <code>std::move</code> in the <code>return</code> statement).\
    \ Nobody wants to get a <em>reference</em> to a pointer that probably has just\
    \ been nixed.</p>\n</div>"
- - How do I pass a unique_ptr argument to a constructor or a function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Yes you have to if you take the\
    \ <code>unique_ptr</code> by value in the constructor. Explicity is a nice thing.\
    \ Since <code>unique_ptr</code> is uncopyable (private copy ctor), what you wrote\
    \ should give you a compiler error.</p>\n</div>"
- - When to use references vs. pointers
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Use reference wherever you can,\
    \ pointers wherever you must.</p>\n<p>Avoid pointers until you can't.</p>\n<p>The\
    \ reason is that pointers make things harder to follow/read, less safe and far\
    \ more dangerous manipulations than any other constructs.</p>\n<p>So the rule\
    \ of thumb is to use pointers only if there is no other choice. </p>\n<p>For example,\
    \ returning a pointer to an object is a valid option when the function can return\
    \ nullptr in some cases and it is assumed it will. That said, a better option\
    \ would be to use something similar to <code>boost::optional</code>.</p>\n<p>Another\
    \ example is to use pointers to raw memory for specific memory manipulations.\
    \ That should be hidden and localized in very narrow parts of the code, to help\
    \ limit the dangerous parts of the whole code base. </p>\n<p>In your example,\
    \ there is no point in using a pointer as argument because:</p>\n<ol>\n<li>if\
    \ you provide <code>nullptr</code> as the argument, you're going in undefined-behaviour-land;</li>\n\
    <li>the reference attribute version doesn't allow (without easy to spot tricks)\
    \ the problem with 1.</li>\n<li>the reference attribute version is simpler to\
    \ understand for the user: you have to provide a valid object, not something that\
    \ could be null.</li>\n</ol>\n<p>If the behaviour of the function would have to\
    \ work with or without a given object, then using a pointer as attribute suggests\
    \ that you can pass <code>nullptr</code> as the argument and it is fine for the\
    \ function. That's kind of a contract between the user and the implementation.</p>\n\
    </div>"
- - When to use references vs. pointers
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The performances are exactly\
    \ the same, as references are implemented internally as pointers. Thus you do\
    \ not need to worry about that.</p>\n<p>There is no generally accepted convention\
    \ regarding when to use references and pointers. In a few cases you have to return\
    \ or accept references (copy constructor, for instance), but other than that you\
    \ are free to do as you wish. A rather common convention I've encountered is to\
    \ use references when the parameter must refer an existing object and pointers\
    \ when a NULL value is ok.</p>\n<p>Some coding convention (like <a href=\"https://google.github.io/styleguide/cppguide.html\"\
    \ rel=\"noreferrer\">Google's</a>) prescribe that one should always use pointers,\
    \ or const references, because references have a bit of unclear-syntax: they have\
    \ reference behaviour but value syntax.</p>\n</div>"
- - When to use references vs. pointers
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>From <a href=\"https://isocpp.org/wiki/faq/references#refs-vs-ptrs\"\
    \ rel=\"noreferrer\">C++ FAQ Lite</a> - </p>\n<blockquote>\n<p>Use references\
    \ when you can, and pointers when you have to.</p>\n<p>References are usually\
    \ preferred over pointers whenever you don't need\n  \"reseating\". This usually\
    \ means that references are most useful in a\n  class's public interface. References\
    \ typically appear on the skin of\n  an object, and pointers on the inside.</p>\n\
    <p>The exception to the above is where a function's parameter or return\n  value\
    \ needs a \"sentinel\" reference — a reference that does not refer\n  to an object.\
    \ This is usually best done by returning/taking a pointer,\n  and giving the NULL\
    \ pointer this special significance (references must\n  always alias objects,\
    \ not a dereferenced NULL pointer).</p>\n<p>Note: Old line C programmers sometimes\
    \ don't like references since\n  they provide reference semantics that isn't explicit\
    \ in the caller's\n  code. After some C++ experience, however, one quickly realizes\
    \ this is\n  a form of information hiding, which is an asset rather than a\n \
    \ liability. E.g., programmers should write code in the language of the\n  problem\
    \ rather than the language of the machine.</p>\n</blockquote>\n</div>"
- - Why does the C++ STL not provide any “tree” containers?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There are two reasons you could\
    \ want to use a tree:</p>\n<p>You want to mirror the problem using a tree-like\
    \ structure:<br/>\nFor this we have <a href=\"http://www.boost.org/doc/libs/1_36_0/libs/graph/doc/index.html\"\
    \ rel=\"noreferrer\">boost graph library</a></p>\n<p>Or you want a container that\
    \ has tree like access characteristics\nFor this we have</p>\n<ul>\n<li><a href=\"\
    http://en.cppreference.com/w/cpp/container/map\" rel=\"noreferrer\"><code>std::map</code></a></li>\n\
    <li><a href=\"http://en.cppreference.com/w/cpp/container/set\" rel=\"noreferrer\"\
    ><code>std::set</code></a></li>\n</ul>\n<p>Basically the characteristics of these\
    \ two containers is such that they practically have to be implemented using trees\
    \ (though this is not actually a requirement).</p>\n<p>See also this question:\n\
    <a href=\"https://stackoverflow.com/questions/181630/whats-a-good-and-stable-c-tree-implementation\"\
    >C tree Implementation</a></p>\n</div>"
- - Why does the C++ STL not provide any “tree” containers?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Probably for the same reason\
    \ that there is no tree container in boost. There are many ways to implement such\
    \ a container, and there is no good way to satisfy everyone who would use it.</p>\n\
    <p>Some issues to consider:<br/>\n - Are the number of children for a node fixed\
    \ or variable?<br/>\n - How much overhead per node? - ie, do you need parent pointers,\
    \ sibling pointers, etc.<br/>\n - What algorithms to provide? - different iterators,\
    \ search algorithms, etc.</p>\n<p>In the end, the problem ends up being that a\
    \ tree container that would be useful enough to everyone, would be too heavyweight\
    \ to satisfy most of the people using it. If you are looking for something powerful,\
    \ <a href=\"http://www.boost.org/doc/libs/1_36_0/libs/graph/doc/table_of_contents.html\"\
    \ rel=\"noreferrer\">Boost Graph Library</a> is essentially a superset of what\
    \ a tree library could be used for.</p>\n<p>Here are some other generic tree implementations:<br/>\n\
    \ - <a href=\"http://tree.phi-sci.com/\" rel=\"noreferrer\">Kasper Peeters' tree.hh</a><br/>\n\
    \ - <a href=\"http://stlab.adobe.com/group__forest__related.html\" rel=\"noreferrer\"\
    >Adobe's forest</a><br/>\n - <a href=\"http://archive.gamedev.net/archive/reference/programming/features/coretree1/\"\
    \ rel=\"noreferrer\">core::tree</a></p>\n</div>"
- - Why does the C++ STL not provide any “tree” containers?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The STL's philosophy is that\
    \ you choose a container based on guarantees and not based on how the container\
    \ is implemented.  For example, your choice of container may be based on a need\
    \ for fast lookups.  For all you care, the container may be implemented as a unidirectional\
    \ list -- as long as searching is very fast you'd be happy.  That's because you're\
    \ not touching the internals anyhow, you're using iterators or member functions\
    \ for the access.  Your code is not bound to how the container is implemented\
    \ but to how fast it is, or whether it has a fixed and defined ordering, or whether\
    \ it is efficient on space, and so on.</p>\n</div>"
- - What is std::promise?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In the words of [futures.state]\
    \ a <code>std::future</code> is an <em>asynchronous return object</em> (\"an object\
    \ that reads results from a shared state\") and a <code>std::promise</code> is\
    \ an <em>asynchronous provider</em> (\"an object that provides a result to a shared\
    \ state\") i.e. a promise is the thing that you <em>set</em> a result on, so that\
    \ you can <em>get</em> it from the associated future.</p>\n<p>The asynchronous\
    \ provider is what initially creates the shared state that a future refers to.\
    \ <code>std::promise</code> is one type of asynchronous provider, <code>std::packaged_task</code>\
    \ is another, and the internal detail of <code>std::async</code> is another. \
    \ Each of those can create a shared state and give you a <code>std::future</code>\
    \ that shares that state, and can make the state ready.</p>\n<p><code>std::async</code>\
    \ is a higher-level convenience utility that gives you an asynchronous result\
    \ object and internally takes care of creating the asynchronous provider and making\
    \ the shared state ready when the task completes. You could emulate it with a\
    \ <code>std::packaged_task</code> (or <code>std::bind</code> and a <code>std::promise</code>)\
    \ and a <code>std::thread</code> but it's safer and easier to use <code>std::async</code>.</p>\n\
    <p><code>std::promise</code> is a bit lower-level, for when you want to pass an\
    \ asynchronous result to the future, but the code that makes the result ready\
    \ cannot be wrapped up in a single function suitable for passing to <code>std::async</code>.\
    \  For example, you might have an array of several <code>promise</code>s and associated\
    \ <code>future</code>s and have a single thread which does several calculations\
    \ and sets a result on each promise. <code>async</code> would only allow you to\
    \ return a single result, to return several you would need to call <code>async</code>\
    \ several times, which might waste resources.</p>\n</div>"
- - What is std::promise?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I understand the situation a\
    \ bit better now (in no small amount due to the answers here!), so I thought I\
    \ add a little write-up of my own.</p>\n<hr/>\n<p>There are two distinct, though\
    \ related, concepts in C++11: Asynchronous computation (a function that is called\
    \ somewhere else), and concurrent execution (a <em>thread</em>, something that\
    \ does work concurrently). The two are somewhat orthogonal concepts. Asynchronous\
    \ computation is just a different flavour of func­tion call, while a thread is\
    \ an execution context. Threads are useful in their own right, but for the pur­pose\
    \ of this discussion, I will treat them as an implementation detail.</p>\n<p><br/></p>\n\
    <p>There is a hierarchy of abstraction for asynchronous computation. For example's\
    \ sake, suppose we have a function that takes some arguments:</p>\n<pre><code>int\
    \ foo(double, char, bool);\n</code></pre>\n<p>First off, we have the template\
    \ <a href=\"http://en.cppreference.com/w/cpp/thread/future\" rel=\"noreferrer\"\
    ><code>std::future&lt;T&gt;</code></a>, which represents a future value of type\
    \ <code>T</code>. The val­ue can be retrieved via the member function <code>get()</code>,\
    \ which effectively synchronizes the program by wait­ing for the result. Alternatively,\
    \ a future supports <code>wait_for()</code>, which can be used to probe whether\
    \ or not the result is already available. Futures should be thought of as the\
    \ asynchronous drop-in re­place­ment for ordinary return types. For our example\
    \ function, we expect a <code>std::future&lt;int&gt;</code>.</p>\n<p>Now, on to\
    \ the hierarchy, from highest to lowest level:</p>\n<ol>\n<li><p><a href=\"http://en.cppreference.com/w/cpp/thread/async\"\
    \ rel=\"noreferrer\"><code>std::async</code></a>: The most convenient and straight-forward\
    \ way to perform an asynchronous com­pu­ta­tion is via the <code>async</code>\
    \ function template, which returns the matching future immediately:</p>\n<pre><code>auto\
    \ fut = std::async(foo, 1.5, 'x', false);  // is a std::future&lt;int&gt;\n</code></pre>\n\
    <p>We have very little control over the details. In particular, we don't even\
    \ know if the function is exe­cu­ted concurrently, serially upon <code>get()</code>,\
    \ or by some other black magic. However, the result is easily ob­tained when needed:</p>\n\
    <pre><code>auto res = fut.get();  // is an int\n</code></pre></li>\n<li><p>We\
    \ can now consider how to <em>implement</em> something like <code>async</code>,\
    \ but in a fashion that <em>we</em> control. For example, we may insist that the\
    \ function be executed in a separate thread. We already know that we can provide\
    \ a separate thread by means of the <a href=\"http://en.cppreference.com/w/cpp/thread/thread\"\
    \ rel=\"noreferrer\"><code>std::thread</code></a> class.</p>\n<p>The next lower\
    \ level of abstraction does exactly that: <a href=\"http://en.cppreference.com/w/cpp/thread/packaged_task\"\
    \ rel=\"noreferrer\"><code>std::packaged_task</code></a>. This is a template that\
    \ wraps a function and provides a future for the functions return value, but the\
    \ object itself is call­able, and calling it is at the user's discretion. We can\
    \ set it up like this:</p>\n<pre><code>std::packaged_task&lt;int(double, char,\
    \ bool)&gt; tsk(foo);\n\nauto fut = tsk.get_future();    // is a std::future&lt;int&gt;\n\
    </code></pre>\n<p>The future becomes ready once we call the task and the call\
    \ completes. This is the ideal job for a se­pa­rate thread. We just have to make\
    \ sure to <em>move</em> the task into the thread:</p>\n<pre><code>std::thread\
    \ thr(std::move(tsk), 1.5, 'x', false);\n</code></pre>\n<p>The thread starts running\
    \ immediately. We can either <code>detach</code> it, or have <code>join</code>\
    \ it at the end of the scope, or whenever (e.g. using Anthony Williams's <code>scoped_thread</code>\
    \ wrapper, which really should be in the standard library). The details of using\
    \ <code>std::thread</code> don't concern us here, though; just be sure to join\
    \ or detach <code>thr</code> eventually. What matters is that whenever the function\
    \ call finishes, our result is ready:</p>\n<pre><code>auto res = fut.get();  //\
    \ as before\n</code></pre></li>\n<li><p>Now we're down to the lowest level: How\
    \ would we <em>implement</em> the packaged task? This is where the <a href=\"\
    http://en.cppreference.com/w/cpp/thread/promise\" rel=\"noreferrer\"><code>std::promise</code></a>\
    \ comes in. The promise is the building block for communicating with a future.\
    \ The principal steps are these:</p>\n<ul>\n<li><p>The calling thread makes a\
    \ promise.</p></li>\n<li><p>The calling thread obtains a future from the promise.</p></li>\n\
    <li><p>The promise, along with function arguments, are moved into a separate thread.</p></li>\n\
    <li><p>The new thread executes the function and populates fulfills the promise.</p></li>\n\
    <li><p>The original thread retrieves the result.</p></li>\n</ul>\n<p>As an example,\
    \ here's our very own \"packaged task\":</p>\n<pre><code>template &lt;typename&gt;\
    \ class my_task;\n\ntemplate &lt;typename R, typename ...Args&gt;\nclass my_task&lt;R(Args...)&gt;\n\
    {\n    std::function&lt;R(Args...)&gt; fn;\n    std::promise&lt;R&gt; pr;    \
    \         // the promise of the result\npublic:\n    template &lt;typename ...Ts&gt;\n\
    \    explicit my_task(Ts &amp;&amp;... ts) : fn(std::forward&lt;Ts&gt;(ts)...)\
    \ { }\n\n    template &lt;typename ...Ts&gt;\n    void operator()(Ts &amp;&amp;...\
    \ ts)\n    {\n        pr.set_value(fn(std::forward&lt;Ts&gt;(ts)...));  // fulfill\
    \ the promise\n    }\n\n    std::future&lt;R&gt; get_future() { return pr.get_future();\
    \ }\n\n    // disable copy, default move\n};\n</code></pre>\n<p>Usage of this\
    \ template is essentially the same as that of <code>std::packaged_task</code>.\
    \ Note that moving the entire task subsumes moving the promise. In more ad-hoc\
    \ situations, one could also move a promise object explicitly into the new thread\
    \ and make it a function argument of the thread function, but a task wrapper like\
    \ the one above seems like a more flexible and less intrusive solution.</p></li>\n\
    </ol>\n<hr/>\n<h2>Making exceptions</h2>\n<p>Promises are intimately related to\
    \ exceptions. The interface of a promise alone is not enough to convey its state\
    \ completely, so exceptions are thrown whenever an operation on a promise does\
    \ not make sense. All exceptions are of type <code>std::future_error</code>, which\
    \ derives from <code>std::logic_error</code>. First off, a description of some\
    \ constraints:</p>\n<ul>\n<li><p>A default-constructed promise is inactive. Inactive\
    \ promises can die without consequence.</p></li>\n<li><p>A promise becomes active\
    \ when a future is obtained via <code>get_future()</code>. However, only <em>one</em>\
    \ future may be obtained!</p></li>\n<li><p>A promise must either be satisfied\
    \ via <code>set_value()</code> or have an exception set via <code>set_exception()</code>\
    \ before its lifetime ends if its future is to be consumed. A satisfied promise\
    \ can die without consequence, and <code>get()</code> becomes available on the\
    \ future. A promise with an exception will raise the stored exception upon call\
    \ of <code>get()</code> on the future. If the promise dies with neither value\
    \ nor exception, calling <code>get()</code> on the future will raise a \"broken\
    \ promise\" exception.</p></li>\n</ul>\n<p>Here is a little test series to demonstrate\
    \ these various exceptional behaviours. First, the harness:</p>\n<pre><code>#include\
    \ &lt;iostream&gt;\n#include &lt;future&gt;\n#include &lt;exception&gt;\n#include\
    \ &lt;stdexcept&gt;\n\nint test();\n\nint main()\n{\n    try\n    {\n        return\
    \ test();\n    }\n    catch (std::future_error const &amp; e)\n    {\n       \
    \ std::cout &lt;&lt; \"Future error: \" &lt;&lt; e.what() &lt;&lt; \" / \" &lt;&lt;\
    \ e.code() &lt;&lt; std::endl;\n    }\n    catch (std::exception const &amp; e)\n\
    \    {\n        std::cout &lt;&lt; \"Standard exception: \" &lt;&lt; e.what()\
    \ &lt;&lt; std::endl;\n    }\n    catch (...)\n    {\n        std::cout &lt;&lt;\
    \ \"Unknown exception.\" &lt;&lt; std::endl;\n    }\n}\n</code></pre>\n<p>Now\
    \ on to the tests.</p>\n<p><strong>Case 1: Inactive promise</strong></p>\n<pre><code>int\
    \ test()\n{\n    std::promise&lt;int&gt; pr;\n    return 0;\n}\n// fine, no problems\n\
    </code></pre>\n<p><strong>Case 2: Active promise, unused</strong></p>\n<pre><code>int\
    \ test()\n{\n    std::promise&lt;int&gt; pr;\n    auto fut = pr.get_future();\n\
    \    return 0;\n}\n// fine, no problems; fut.get() would block indefinitely\n\
    </code></pre>\n<p><strong>Case 3: Too many futures</strong></p>\n<pre><code>int\
    \ test()\n{\n    std::promise&lt;int&gt; pr;\n    auto fut1 = pr.get_future();\n\
    \    auto fut2 = pr.get_future();  //   Error: \"Future already retrieved\"\n\
    \    return 0;\n}\n</code></pre>\n<p><strong>Case 4: Satisfied promise</strong></p>\n\
    <pre><code>int test()\n{\n    std::promise&lt;int&gt; pr;\n    auto fut = pr.get_future();\n\
    \n    {\n        std::promise&lt;int&gt; pr2(std::move(pr));\n        pr2.set_value(10);\n\
    \    }\n\n    return fut.get();\n}\n// Fine, returns \"10\".\n</code></pre>\n\
    <p><strong>Case 5: Too much satisfaction</strong></p>\n<pre><code>int test()\n\
    {\n    std::promise&lt;int&gt; pr;\n    auto fut = pr.get_future();\n\n    {\n\
    \        std::promise&lt;int&gt; pr2(std::move(pr));\n        pr2.set_value(10);\n\
    \        pr2.set_value(10);  // Error: \"Promise already satisfied\"\n    }\n\n\
    \    return fut.get();\n}\n</code></pre>\n<p>The same exception is thrown if there\
    \ is more than one of <em>either</em> of <code>set_value</code> or <code>set_exception</code>.</p>\n\
    <p><strong>Case 6: Exception</strong></p>\n<pre><code>int test()\n{\n    std::promise&lt;int&gt;\
    \ pr;\n    auto fut = pr.get_future();\n\n    {\n        std::promise&lt;int&gt;\
    \ pr2(std::move(pr));\n        pr2.set_exception(std::make_exception_ptr(std::runtime_error(\"\
    Booboo\")));\n    }\n\n    return fut.get();\n}\n// throws the runtime_error exception\n\
    </code></pre>\n<p><strong>Case 7: Broken promise</strong></p>\n<pre><code>int\
    \ test()\n{\n    std::promise&lt;int&gt; pr;\n    auto fut = pr.get_future();\n\
    \n    {\n        std::promise&lt;int&gt; pr2(std::move(pr));\n    }   // Error:\
    \ \"broken promise\"\n\n    return fut.get();\n}\n</code></pre>\n</div>"
- - What is std::promise?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"http://bartoszmilewski.com/2009/03/03/broken-promises-c0x-futures/\"\
    >Bartosz Milewski</a> provides a good writeup. </p>\n<blockquote>\n<p>C++ splits\
    \ the implementation of futures into a set \n  of small blocks</p>\n</blockquote>\n\
    <p>std::promise is one of these parts. </p>\n<blockquote>\n<p>A promise is a vehicle\
    \ for passing the return value (or an \n  exception) from the thread executing\
    \ a function to the thread \n  that cashes in on the function future. </p>\n</blockquote>\n\
    <p>...</p>\n<blockquote>\n<p>A future is the synchronization object constructed\
    \ around the \n  receiving end of the promise channel.</p>\n</blockquote>\n<p>So,\
    \ if you want to use a future, you end up with a promise that you use to get the\
    \ result of the asynchronous processing. </p>\n<p>An example from the page is:</p>\n\
    <pre><code>promise&lt;int&gt; intPromise;\nfuture&lt;int&gt; intFuture = intPromise.get_future();\n\
    std::thread t(asyncFun, std::move(intPromise));\n// do some other stuff\nint result\
    \ = intFuture.get(); // may throw MyException\n</code></pre>\n</div>"
- - Checking if a double (or float) is NaN in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>According to the IEEE standard,\
    \ NaN values have the odd property that comparisons involving them are <em>always</em>\
    \ false. That is, for a float f, <code>f != f</code> will be true <em>only</em>\
    \ if f is NaN. </p>\n<p>Note that, as some comments below have pointed out, not\
    \ all compilers respect this when optimizing code. </p>\n<p>For any compiler which\
    \ claims to use IEEE floating point, this trick <em>should</em> work. But I can't\
    \ guarantee that it <em>will</em> work in practice. Check with your compiler,\
    \ if in doubt.</p>\n</div>"
- - Checking if a double (or float) is NaN in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There is no <code>isnan()</code>\
    \ function available in current C++ Standard Library. It was introduced in <a\
    \ href=\"http://en.wikipedia.org/wiki/C99\" rel=\"noreferrer\">C99</a> and defined\
    \ as a <a href=\"http://en.wikipedia.org/wiki/C_preprocessor\" rel=\"noreferrer\"\
    >macro</a> not a function. Elements of standard library defined by C99 are not\
    \ part of current C++ standard ISO/IEC 14882:1998 neither its update ISO/IEC 14882:2003.</p>\n\
    <p>In 2005 Technical Report 1 was proposed. The TR1 brings compatibility with\
    \ C99 to C++. In spite of the fact it has never been officially adopted to become\
    \ C++ standard, many (<a href=\"http://gcc.gnu.org/gcc-4.0/changes.html\" rel=\"\
    noreferrer\">GCC 4.0+</a> or <a href=\"http://msdn.microsoft.com/en-us/library/bb982198.aspx\"\
    \ rel=\"noreferrer\">Visual C++ 9.0+</a> C++ implementations do provide TR1 features,\
    \ all of them or only some (Visual C++ 9.0 does not provide C99 math functions).</p>\n\
    <p>If TR1 is available, then <code>cmath</code> includes C99 elements like <code>isnan()</code>,\
    \ <code>isfinite()</code>, etc. but they are defined as functions, not macros,\
    \ usually in <code>std::tr1::</code> namespace, though many implementations (i.e.\
    \ GCC 4+ on Linux or in XCode on Mac OS X 10.5+) inject them directly to <code>std::</code>,\
    \ so <code>std::isnan</code> is well defined.</p>\n<p>Moreover, some implementations\
    \ of C++ still make C99 <code>isnan()</code> macro available for C++ (included\
    \ through <code>cmath</code> or <code>math.h</code>), what may cause more confusions\
    \ and developers may assume it's a standard behaviour.</p>\n<p>A note about Viusal\
    \ C++, as mentioned above, it does not provide <code>std::isnan</code> neither\
    \ <code>std::tr1::isnan</code>, but it provides an extension function defined\
    \ as <code>_isnan()</code> which has been available since <a href=\"http://msdn.microsoft.com/en-us/library/aa298428%28VS.60%29.aspx\"\
    \ rel=\"noreferrer\">Visual C++ 6.0</a></p>\n<p>On XCode, there is even more fun.\
    \ As mentioned, GCC 4+ defines <code>std::isnan</code>. For older versions of\
    \ compiler and library form XCode, it seems (here is <a href=\"http://lists.apple.com/archives/Xcode-users/2006/Aug/msg00619.html\"\
    \ rel=\"noreferrer\">relevant discussion</a>), haven't had chance to check myself)\
    \ two functions are defined, <code>__inline_isnand()</code> on Intel and <code>__isnand()</code>\
    \ on Power PC.</p>\n</div>"
- - Checking if a double (or float) is NaN in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<h1>First solution: if you are using\
    \ C++11</h1>\n<p>Since this was asked there were a bit of new developments: it\
    \ is important to know that <code>std::isnan()</code> is part of C++11</p>\n<h2>Synopsis</h2>\n\
    <p>Defined in header <code>&lt;cmath&gt;</code></p>\n<pre><code>bool isnan( float\
    \ arg ); (since C++11)\nbool isnan( double arg ); (since C++11)\nbool isnan( long\
    \ double arg ); (since C++11)\n</code></pre>\n<p>Determines if the given floating\
    \ point number arg is not-a-number (<code>NaN</code>).</p>\n<p><strong>Parameters</strong></p>\n\
    <p><code>arg</code>: floating point value</p>\n<p><strong>Return value</strong></p>\n\
    <p><code>true</code> if arg is <code>NaN</code>, <code>false</code> otherwise</p>\n\
    <p><strong>Reference</strong></p>\n<p><a href=\"http://en.cppreference.com/w/cpp/numeric/math/isnan\"\
    \ rel=\"noreferrer\">http://en.cppreference.com/w/cpp/numeric/math/isnan</a></p>\n\
    <p>Please note that this is incompatible with -fast-math if you use g++, see below\
    \ for other suggestions.</p>\n<hr/>\n<h1>Other solutions: if you using non C++11\
    \ compliant tools</h1>\n<p>For C99, in C, this is implemented as a macro <code>isnan(c)</code>that\
    \ returns an int value. The type of <code>x</code> shall be float, double or long\
    \ double.</p>\n<p>Various vendors may or may not include or not a function <code>isnan()</code>.</p>\n\
    <p>The supposedly portable way to check for <code>NaN</code> is to use the IEEE\
    \ 754 property that <code>NaN</code> is not equal to itself: i.e. <code>x == x</code>\
    \ will be false for <code>x</code> being <code>NaN</code>.</p>\n<p>However the\
    \ last option may not work with every compiler and some settings (particularly\
    \ optimisation settings), so in last resort, you can always check the bit pattern\
    \ ...</p>\n</div>"
- - How do I print the full value of a long string in gdb?
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>set print elements 0\n\
    </code></pre>\n<p><a href=\"http://ftp.gnu.org/old-gnu/Manuals/gdb-5.1.1/html_node/gdb_57.html#IDX353\"\
    \ rel=\"noreferrer\">From the GDB manual</a>: </p>\n<blockquote><code>set print\
    \ elements </code><i><code>number-of-elements</code></i></blockquote>\n<blockquote>\n\
    Set a limit on how many elements of an array GDB will print. If GDB is printing\
    \ a large array, it stops printing after it has printed the number of elements\
    \ set by the <code>set print elements</code> command. This limit also applies\
    \ to the display of strings. When GDB starts, this limit is set to 200. <b>Setting\
    \ <i>number-of-elements</i> to zero means that the printing is unlimited</b>.\n\
    </blockquote>\n</div>"
- - How do I print the full value of a long string in gdb?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>As long as your program's in\
    \ a sane state, you can also <code>call (void)puts(your_string)</code> to print\
    \ it to stdout. Same principle applies to all functions available to the debugger,\
    \ actually.</p>\n</div>"
- - How do I print the full value of a long string in gdb?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There is a third option: the\
    \ x command, which allows you to set a different limit for the specific command\
    \ instead of changing a global setting. To print the first 300 characters of a\
    \ string you can use <code>x/300s your_string</code>. The output might be a bit\
    \ harder to read. For example printing a SQL query results in:</p>\n<pre>\n(gdb)\
    \ x/300sb stmt.c_str()\n0x9cd948:    \"SELECT article.r\"...\n0x9cd958:    \"\
    owid FROM articl\"...\n..\n</pre>\n</div>"
- - Debug vs Release in CMake
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>With CMake, it's generally recommended\
    \ to do an <a href=\"https://cmake.org/Wiki/CMake_FAQ#Out-of-source_build_trees\"\
    \ rel=\"noreferrer\">\"out of source\" build</a>. Create your <code>CMakeLists.txt</code>\
    \ in the root of your project. Then from the root of your project:</p>\n<pre><code>mkdir\
    \ Release\ncd Release\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\n</code></pre>\n\
    <p>And for <code>Debug</code> (again from the root of your project):</p>\n<pre><code>mkdir\
    \ Debug\ncd Debug\ncmake -DCMAKE_BUILD_TYPE=Debug ..\nmake\n</code></pre>\n<p><code>Release</code>\
    \ / <code>Debug</code> will add the appropriate flags for your compiler. There\
    \ are also <code>RelWithDebInfo</code> and <code>MinSizeRel</code> build configurations.</p>\n\
    <hr/>\n<p>You can modify/add to the flags in your <code>CMakeLists.txt</code>\
    \ via <code>CMAKE_C_FLAGS_DEBUG</code> and <code>CMAKE_C_FLAGS_RELEASE</code>\
    \ variables, e.g.:</p>\n<pre><code>set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\
    \ -Wall\")\nset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -Wall\")\n\
    </code></pre>\n<p>See <a href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html\"\
    \ rel=\"noreferrer\">CMAKE_BUILD_TYPE</a> for more details.</p>\n<hr/>\n<p>As\
    \ for your third question, I'm not sure what you are asking exactly. CMake should\
    \ automatically detect and use the compiler appropriate for your different source\
    \ files.</p>\n</div>"
- - Debug vs Release in CMake
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>For debug/release flags, see\
    \ the <code>CMAKE_BUILD_TYPE</code> variable (you pass it as <code>cmake -DCMAKE_BUILD_TYPE=value</code>).\
    \ It takes values like <code>Release</code>, <code>Debug</code>, etc.</p>\n<p><a\
    \ href=\"http://cmake.org/Wiki/CMake_Useful_Variables#Compilers_and_Tools\" rel=\"\
    noreferrer\">http://cmake.org/Wiki/CMake_Useful_Variables#Compilers_and_Tools</a></p>\n\
    <p>cmake uses the extension to choose the compiler, so just name your files .c.</p>\n\
    <p>You can override this with various settings:</p>\n<p>For example:</p>\n<pre><code>set_source_files_properties(yourfile.c\
    \ LANGUAGE CXX) \n</code></pre>\n<p>Would compile .c files with g++. The link\
    \ above also shows how to select a specific compiler for C/C++.</p>\n</div>"
- - Debug vs Release in CMake
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Instead of manipulating the <code>CMAKE_CXX_FLAGS</code>\
    \ strings directly (which could be done more nicely using <code>string(APPEND\
    \ CMAKE_CXX_FLAGS_DEBUG \" -g3\")</code> btw), you can use <code>add_compiler_options</code>:</p>\n\
    <pre><code>add_compile_options(\n  \"-Wall\" \"-Wpedantic\" \"-Wextra\" \"-fexceptions\"\
    \n  \"$&lt;$&lt;CONFIG:DEBUG&gt;:-O0;-g3;-ggdb&gt;\"\n)\n</code></pre>\n<p>This\
    \ would add the specified warnings to all build types, but only the given debugging\
    \ flags to the <code>DEBUG</code> build. Note that compile options are stored\
    \ as a CMake list, which is just a string separating its elements by semicolons\
    \ <code>;</code>.</p>\n</div>"
- - When should you use 'friend' in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Firstly (IMO) don't listen to\
    \ people who say <code>friend</code> is not useful. It IS useful. In many situations\
    \ you will have objects with data or functionality that are not intended to be\
    \ publicly available. This is particularly true of large codebases with many authors\
    \ who may only be superficially familiar with different areas. </p>\n<p>There\
    \ ARE alternatives to the friend specifier, but often they are cumbersome (cpp-level\
    \ concrete classes/masked typedefs) or not foolproof (comments or function name\
    \ conventions).</p>\n<p>Onto the answer; </p>\n<p>The <code>friend</code> specifier\
    \ allows the designated class access to protected data or functionality within\
    \ the class making the friend statement. For example in the below code anyone\
    \ may ask a child for their name, but only the mother and the child may change\
    \ the name. </p>\n<p>You can take this simple example further by considering a\
    \ more complex class such as a Window. Quite likely a Window will have many function/data\
    \ elements that should not be publicly accessible, but ARE needed by a related\
    \ class such as a WindowManager.</p>\n<pre><code>class Child\n{\n//Mother class\
    \ members can access the private parts of class Child.\nfriend class Mother;\n\
    \npublic:\n\n  string name( void );\n\nprotected:\n\n  void setName( string newName\
    \ );\n};\n</code></pre>\n</div>"
- - When should you use 'friend' in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>At work we <strong>use friends\
    \ for testing code</strong>, extensively. It means we can provide proper encapsulation\
    \ and information hiding for the main application code. But also we can have separate\
    \ test code that uses friends to inspect internal state and data for testing.</p>\n\
    <p>Suffice to say I wouldn't use the friend keyword as an essential component\
    \ of your design.</p>\n</div>"
- - When should you use 'friend' in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The <code>friend</code> keyword\
    \ has a number of good uses. Here are the two uses immediately visible to me:</p>\n\
    <h2>Friend Definition</h2>\n<p>Friend definition allows to define a function in\
    \ class-scope, but the function will not be defined as a member function, but\
    \ as a free function of the enclosing namespace, and won't be visible normally\
    \ except for argument dependent lookup. That makes it especially useful for operator\
    \ overloading:</p>\n<pre><code>namespace utils {\n    class f {\n    private:\n\
    \        typedef int int_type;\n        int_type value;\n\n    public:\n     \
    \   // let's assume it doesn't only need .value, but some\n        // internal\
    \ stuff.\n        friend f operator+(f const&amp; a, f const&amp; b) {\n     \
    \       // name resolution finds names in class-scope. \n            // int_type\
    \ is visible here.\n            return f(a.value + b.value);\n        }\n\n  \
    \      int getValue() const { return value; }\n    };\n}\n\nint main() {\n   \
    \ utils::f a, b;\n    std::cout &lt;&lt; (a + b).getValue(); // valid\n}\n</code></pre>\n\
    <h2>Private CRTP Base Class</h2>\n<p>Sometimes, you find the need that a policy\
    \ needs access to the derived class:</p>\n<pre><code>// possible policy used for\
    \ flexible-class.\ntemplate&lt;typename Derived&gt;\nstruct Policy {\n    void\
    \ doSomething() {\n        // casting this to Derived* requires us to see that\
    \ we are a \n        // base-class of Derived.\n        some_type const&amp; t\
    \ = static_cast&lt;Derived*&gt;(this)-&gt;getSomething();\n    }\n};\n\n// note,\
    \ derived privately\ntemplate&lt;template&lt;typename&gt; class SomePolicy&gt;\n\
    struct FlexibleClass : private SomePolicy&lt;FlexibleClass&gt; {\n    // we derive\
    \ privately, so the base-class wouldn't notice that, \n    // (even though it's\
    \ the base itself!), so we need a friend declaration\n    // to make the base\
    \ a friend of us.\n    friend class SomePolicy&lt;FlexibleClass&gt;;\n\n    void\
    \ doStuff() {\n         // calls doSomething of the policy\n         this-&gt;doSomething();\n\
    \    }\n\n    // will return useful information\n    some_type getSomething();\n\
    };\n</code></pre>\n<p>You will find a non-contrived example for that in <a href=\"\
    https://stackoverflow.com/questions/356294/is-partial-class-template-specialization-the-answer-to-this-design-problem#356576\"\
    >this</a> answer. Another code using that is in <a href=\"https://stackoverflow.com/questions/286402/initializing-struct-using-an-array#287353\"\
    >this</a> answer. The CRTP base casts its this pointer, to be able to access data-fields\
    \ of the derived class using data-member-pointers.  </p>\n</div>"
- - Use of 'const' for function parameters
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The reason is that const for\
    \ the parameter only applies locally within the function, since it is working\
    \ on a copy of the data. This means the function signature is really the same\
    \ anyways. It's probably bad style to do this a lot though.</p>\n<p>I personally\
    \ tend to not use const except for reference and pointer parameters. For copied\
    \ objects it doesn't really matter, although it can be safer as it signals intent\
    \ within the function. It's really a judgement call. I do tend to use const_iterator\
    \ though when looping on something and I don't intend on modifying it, so I guess\
    \ to each his own, as long as const correctness for reference types is rigorously\
    \ maintained.</p>\n</div>"
- - Use of 'const' for function parameters
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><em>\"const is pointless when\
    \ the argument is passed by value since you will not be modifying the caller's\
    \ object.\"</em></p>\n<p>Wrong. </p>\n<p>It's about self-documenting your code\
    \ and your assumptions.</p>\n<p>If your code has many people working on it and\
    \ your functions are non-trivial then you should mark \"const\" any and everything\
    \ that you can. When writing industrial-strength code, you should always assume\
    \ that your coworkers are psychopaths trying to get you any way they can (especially\
    \ since it's often yourself in the future).</p>\n<p>Besides, as somebody mentioned\
    \ earlier, it <em>might</em> help the compiler optimize things a bit  (though\
    \ it's a long shot).</p>\n</div>"
- - Use of 'const' for function parameters
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Sometimes (too often!) I have\
    \ to untangle someone else's C++ code. And we all know that <em>someone else's</em>\
    \ C++ code is a complete mess almost by definition :) So the first thing I do\
    \ to decipher local data flow is put <strong>const</strong> in every variable\
    \ definition until compiler starts barking. This means const-qualifying value\
    \ arguments as well, because they are just fancy local variables initialized by\
    \ caller.</p>\n<p>Ah, I wish variables were <strong>const</strong> by default\
    \ and <strong>mutable</strong> was required for non-const variables :)</p>\n</div>"
- - What is the lifetime of a static variable in a C++ function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The lifetime of function <code>static</code>\
    \ variables begins the first time<sup>[0]</sup> the program flow encounters the\
    \ declaration and it ends at program termination. This means that the run-time\
    \ must perform some book keeping in order to destruct it only if it was actually\
    \ constructed. </p>\n<p>Additionally, since the standard says that the destructors\
    \ of static objects must run in the reverse order of the completion of their construction<sup>[1]</sup>,\
    \ and the order of construction may depend on the specific program run, the order\
    \ of construction must be taken into account.</p>\n<p><strong>Example</strong>\
    \ </p>\n<pre><code>struct emitter {\n    string str;\n    emitter(const string&amp;\
    \ s) : str(s) { cout &lt;&lt; \"Created \" &lt;&lt; str &lt;&lt; endl; }\n   \
    \ ~emitter() { cout &lt;&lt; \"Destroyed \" &lt;&lt; str &lt;&lt; endl; }\n};\n\
    \nvoid foo(bool skip_first) \n{\n    if (!skip_first)\n        static emitter\
    \ a(\"in if\");\n    static emitter b(\"in foo\");\n}\n\nint main(int argc, char*[])\n\
    {\n    foo(argc != 2);\n    if (argc == 3)\n        foo(false);\n}\n</code></pre>\n\
    <p><strong>Output:</strong></p>\n<blockquote>\n<p>C:&gt;sample.exe<br/>\n  Created\
    \ in foo<br/>\n  Destroyed in foo  </p>\n<p>C:&gt;sample.exe  1<br/>\n  Created\
    \ in if<br/>\n  Created in foo<br/>\n  Destroyed in foo<br/>\n  Destroyed in if\
    \  </p>\n<p>C:&gt;sample.exe 1 2<br/>\n  Created in foo<br/>\n  Created in if<br/>\n\
    \  Destroyed in if<br/>\n  Destroyed in foo  </p>\n</blockquote>\n<p><code>[0]</code>\
    \ Since <strong>C++98</strong><sup>[2]</sup> has no reference to multiple threads\
    \ how this will be behave in a multi-threaded environment is unspecified, and\
    \ can be problematic as <a href=\"https://stackoverflow.com/questions/246564/what-is-the-lifetime-of-a-static-variable-in-a-c-function#246594\"\
    >Roddy</a> mentions.</p>\n<p><code>[1]</code> <strong>C++98</strong> section <code>3.6.3.1</code>\
    \ <em>[basic.start.term]</em></p>\n<p><code>[2]</code> In C++11 statics are initialized\
    \ in a thread safe way, this is also known as <a href=\"http://herbsutter.com/2013/09/09/visual-studio-2013-rc-is-now-available/\"\
    \ rel=\"noreferrer\"><em>Magic Statics</em></a>.</p>\n</div>"
- - What is the lifetime of a static variable in a C++ function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Motti is right about the order,\
    \ but there are some other things to consider:</p>\n<p>Compilers typically use\
    \ a hidden flag variable to indicate if the local statics have already been initialized,\
    \ and this flag is checked on every entry to the function. Obviously this is a\
    \ small performance hit, but what's more of a concern is that this flag is not\
    \ guaranteed to be thread-safe.</p>\n<p>If you have a local static as above, and\
    \ 'foo' is called from multiple threads, you may have race conditions causing\
    \ 'plonk' to be initialized incorrectly or even multiple times. Also, in this\
    \ case 'plonk' may get destructed by a different thread than the one which constructed\
    \ it.</p>\n<p>Despite what the standard says, I'd be very wary of the actual order\
    \ of local static destruction, because it's possible that you may unwittingly\
    \ rely on a static being still valid after it's been destructed, and this is really\
    \ difficult to track down. </p>\n</div>"
- - What is the lifetime of a static variable in a C++ function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The existing explanations aren't\
    \ really complete without the actual rule from the Standard, found in 6.7:</p>\n\
    <blockquote>\n<p>The zero-initialization of all block-scope variables with static\
    \ storage duration or thread storage duration is performed before any other initialization\
    \ takes place.  Constant initialization of a block-scope entity with static storage\
    \ duration, if applicable, is performed before its block is first entered.  An\
    \ implementation is permitted to perform early initialization of other block-scope\
    \ variables with static or thread storage duration under the same conditions that\
    \ an implementation is permitted to statically initialize a variable with static\
    \ or thread storage duration in namespace scope.  Otherwise such a variable is\
    \ initialized the first time control passes through its declaration; such a variable\
    \ is considered initialized upon the  completion  of  its  initialization.   If\
    \  the  initialization  exits  by  throwing  an  exception,  the  initialization\n\
    \  is  not  complete,  so  it  will  be  tried  again  the  next  time  control\
    \  enters  the  declaration.   If  control  enters the declaration concurrently\
    \ while the variable is being initialized, the concurrent execution shall wait\
    \ for completion of the initialization.  If control re-enters the declaration\
    \ recursively while the variable is being initialized, the behavior is undefined.</p>\n\
    </blockquote>\n</div>"
- - Is 0 a decimal literal or an octal literal?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Yes, <code>0</code> is an <strong>Octal\
    \ literal</strong> in C++.  </p>\n<p>As per the C++ Standard:</p>\n<p><em><strong>2.14.2\
    \ Integer literals [lex.icon]</strong></em> </p>\n<pre><code>integer-literal:\
    \  \n    decimal-literal integer-suffixopt  \n    octal-literal integer-suffixopt\
    \  \n    hexadecimal-literal integer-suffixopt  \ndecimal-literal:  \n    nonzero-digit\
    \  \n    decimal-literal digit  \noctal-literal:  \n    0                    \
    \       &lt;--------------------&lt;Here&gt;\n    octal-literal octal-digit\n\
    </code></pre>\n</div>"
- - Is 0 a decimal literal or an octal literal?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Any integer value prefixed with\
    \ <code>0</code> is an octal value. I.e.: 01 is octal 1, 010 is octal 10, which\
    \ is decimal 8, and 0 is octal 0 (which is decimal, and any other, 0).</p>\n<p>So\
    \ yes, '0' is an octal.</p>\n<p>That's plain English translation of the grammar\
    \ snippet in @Als's answer :-)</p>\n<hr/>\n<p>An integer prefixed with <code>0x</code>\
    \ is <em>not</em> prefixed with <code>0</code>. <code>0x</code> is an explicitly\
    \ different prefix. Apparently there are people who cannot make this distinction.</p>\n\
    <p>As per that same standard, if we continue:</p>\n<pre class=\"lang-none prettyprint-override\"\
    ><code> integer-literal:\n     decimal-literal integer-suffixopt\n     octal-literal\
    \ integer-suffixopt\n     hexadecimal-literal integer-suffixopt\n decimal-literal:\n\
    \     nonzero-digit                       &lt;&lt;&lt;---- That's the case of\
    \ no prefix.\n     decimal-literal digit-separatoropt digit\n octal-literal:\n\
    \     0                                    &lt;&lt;&lt;---- '0' prefix defined\
    \ here.\n     octal-literal digit-separatoropt octal-digit &lt;&lt;&lt;---- No\
    \ 'x' or 'X' is\n                                                          allowed\
    \ here.\n hexadecimal-literal:\n     0x hexadecimal-digit                 &lt;&lt;&lt;----\
    \ '0x' prefix defined here\n     0X hexadecimal-digit                 &lt;&lt;&lt;----\
    \ And here.\n     hexadecimal-literal digit-separatoropt hexadecimal-digit\n</code></pre>\n\
    </div>"
- - Is 0 a decimal literal or an octal literal?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Apparently all integer literals\
    \ starting with zero are in fact octal. This means that it includes 0 as well.\
    \ This makes little difference since zero is zero. But not knowing this fact can\
    \ hurt you.</p>\n<p>I realized this when I was trying to write a program to convert\
    \ binary numbers to decimal and hexidecimal output. Everytime that I was giving\
    \ a number starting with zero I was getting the wrong output (For example, 012\
    \ = 10, not 12).</p>\n<p>It's good to know this information so you don't make\
    \ the same mistake.</p>\n</div>"
- - Is there any advantage of using map over unordered_map in case of trivial keys?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Don't forget the <code>map</code>'s\
    \ keep their elements ordered. If you can't give up that, obviously you can't\
    \ use an <code>unordered_map</code>.</p>\n<p>Something else to keep in mind is\
    \ that <code>unordered_map</code>'s generally use more memory. A <code>map</code>\
    \ just has a few house-keeping pointers then memory for each object. Contrarily,\
    \ <code>unordered_map</code>'s have a big array (these can get quite big in some\
    \ implementations) and then additional memory for each object. If you need to\
    \ be memory-aware, a <code>map</code> should prove better, because it lacks the\
    \ large array.</p>\n<p>So, if you need pure lookup-retrieval, I'd say an <code>unordered_map</code>\
    \ is the way to go. But there are always trade-offs, and if you can't afford them,\
    \ then you can't use it.</p>\n<p>Just from personal experience, I found an enormous\
    \ improvement in performance (measured, of course) when using an <code>unordered_map</code>\
    \ instead of a <code>map</code> in a main entity look-up table.</p>\n<p>On the\
    \ other hand, I found it was much slower at repeatedly inserting and removing\
    \ elements. It's great for a relatively static collection of elements, but if\
    \ you're doing tons of insertions and deletions the hashing + bucketing seems\
    \ to add up. (Note, this was over many iterations.)</p>\n</div>"
- - Is there any advantage of using map over unordered_map in case of trivial keys?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>If you want to compare the speed\
    \ of your <code>std::map</code> and <code>std::unordered_map</code> implementations,\
    \ you could use Google's <a href=\"http://code.google.com/p/google-sparsehash/\"\
    \ rel=\"nofollow noreferrer\">sparsehash</a> project which has a time_hash_map\
    \ program to time them.  For example, with gcc 4.4.2 on an x86_64 Linux system</p>\n\
    <pre><code>$ ./time_hash_map\nTR1 UNORDERED_MAP (4 byte objects, 10000000 iterations):\n\
    map_grow              126.1 ns  (27427396 hashes, 40000000 copies)  290.9 MB\n\
    map_predict/grow       67.4 ns  (10000000 hashes, 40000000 copies)  232.8 MB\n\
    map_replace            22.3 ns  (37427396 hashes, 40000000 copies)\nmap_fetch\
    \              16.3 ns  (37427396 hashes, 40000000 copies)\nmap_fetch_empty  \
    \       9.8 ns  (10000000 hashes,        0 copies)\nmap_remove             49.1\
    \ ns  (37427396 hashes, 40000000 copies)\nmap_toggle             86.1 ns  (20000000\
    \ hashes, 40000000 copies)\n\nSTANDARD MAP (4 byte objects, 10000000 iterations):\n\
    map_grow              225.3 ns  (       0 hashes, 20000000 copies)  462.4 MB\n\
    map_predict/grow      225.1 ns  (       0 hashes, 20000000 copies)  462.6 MB\n\
    map_replace           151.2 ns  (       0 hashes, 20000000 copies)\nmap_fetch\
    \             156.0 ns  (       0 hashes, 20000000 copies)\nmap_fetch_empty  \
    \       1.4 ns  (       0 hashes,        0 copies)\nmap_remove            141.0\
    \ ns  (       0 hashes, 20000000 copies)\nmap_toggle             67.3 ns  (  \
    \     0 hashes, 20000000 copies)\n</code></pre>\n</div>"
- - Is there any advantage of using map over unordered_map in case of trivial keys?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I'd echo roughly the same point\
    \ GMan made: depending on the type of use, <code>std::map</code> can be (and often\
    \ is) faster than <code>std::tr1::unordered_map</code> (using the implementation\
    \ included in VS 2008 SP1).</p>\n<p>There are a few complicating factors to keep\
    \ in mind. For example, in <code>std::map</code>, you're comparing keys, which\
    \ means you only ever look at enough of the beginning of a key to distinguish\
    \ between the right and left sub-branches of the tree. In my experience, nearly\
    \ the only time you look at an entire key is if you're using something like int\
    \ that you can compare in a single instruction. With a more typical key type like\
    \ std::string, you often compare only a few characters or so.</p>\n<p>A decent\
    \ hash function, by contrast, always looks at the <em>entire</em> key. IOW, even\
    \ if the table lookup is constant complexity, the hash itself has roughly linear\
    \ complexity (though on the length of the key, not the number of items). With\
    \ long strings as keys, an <code>std::map</code> might finish a search before\
    \ an <code>unordered_map</code> would even <em>start</em> its search.</p>\n<p>Second,\
    \ while there are several methods of resizing hash tables, most of them are pretty\
    \ slow -- to the point that unless lookups are <em>considerably</em> more frequent\
    \ than insertions and deletions, std::map will often be faster than <code>std::unordered_map</code>.</p>\n\
    <p>Of course, as I mentioned in the comment on your previous question, you can\
    \ also use a table of trees. This has both advantages and disadvantages. On one\
    \ hand, it limits the worst case to that of a tree. It also allows fast insertion\
    \ and deletion, because (at least when I've done it) I've used a fixed-size of\
    \ table. Eliminating <em>all</em> table resizing allows you to keep your hash\
    \ table a lot simpler and typically faster.</p>\n<p>One other point: the requirements\
    \ for hashing and tree-based maps are different. Hashing obviously requires a\
    \ hash function, and an equality comparison, where ordered maps require a less-than\
    \ comparison. Of course the hybrid I mentioned requires both. Of course, for the\
    \ common case of using a string as the key, this isn't really a problem, but some\
    \ types of keys suit ordering better than hashing (or vice versa).</p>\n</div>"
- - Rule-of-Three becomes Rule-of-Five with C++11?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I'd say the Rule of Three becomes\
    \ the Rule of Three, Four and Five:</p>\n<blockquote>\n<p>Each class should explicitly\
    \ define exactly one\n  of the following set of special member\n  functions:</p>\n\
    <ul>\n<li>None</li>\n<li>Destructor, copy constructor, copy assignment operator</li>\n\
    </ul>\n<p>In addition, each class that explicitly defines a destructor may explicitly\
    \ define a move constructor and/or a move assignment operator.</p>\n<p>Usually,\
    \ one of the following sets of special member\n  functions is sensible:</p>\n\
    <ul>\n<li>None (for many simple classes where the implicitly generated special\
    \ member functions are correct and fast)</li>\n<li>Destructor, copy constructor,\
    \ copy assignment operator (in this case the\n  class will not be movable)</li>\n\
    <li>Destructor, move constructor, move assignment operator (in this case the class\
    \ will not be copyable, useful for resource-managing classes where the underlying\
    \ resource is not copyable)</li>\n<li>Destructor, copy constructor, copy assignment\
    \ operator, move constructor (because of copy elision, there is no overhead if\
    \ the copy assignment operator takes its argument by value)</li>\n<li>Destructor,\
    \ copy constructor, copy assignment operator, move constructor,\n  move assignment\
    \ operator</li>\n</ul>\n</blockquote>\n<p>Note that move constructor and move\
    \ assignment operator won't be generated for a class that explicitly declares\
    \ any of the other special member functions, that copy constructor and copy assignment\
    \ operator won't be generated for a class that explicitly declares a move constructor\
    \ or move assignment operator, and that a class with a explicitly declared destructor\
    \ and implicitly defined copy constructor or implicitly defined copy assignment\
    \ operator is considered deprecated. In particular, the following perfectly valid\
    \ C++03 polymorphic base class</p>\n<pre><code>class C {\n  virtual ~C() { } \
    \  // allow subtype polymorphism\n};\n</code></pre>\n<p>should be rewritten as\
    \ follows:</p>\n<pre><code>class C {\n  C(const C&amp;) = default;           \
    \    // Copy constructor\n  C(C&amp;&amp;) = default;                    // Move\
    \ constructor\n  C&amp; operator=(const C&amp;) = default;  // Copy assignment\
    \ operator\n  C&amp; operator=(C&amp;&amp;) = default;       // Move assignment\
    \ operator\n  virtual ~C() { }                     // Destructor\n};\n</code></pre>\n\
    <p>A bit annoying, but probably better than the alternative (automatic generation\
    \ of all special member functions).</p>\n<p>In contrast to the Rule of the Big\
    \ Three, where failing to adhere to the rule can cause serious damage, not explicitly\
    \ declaring the move constructor and move assignment operator is generally fine\
    \ but often suboptimal with respect to efficiency. As mentioned above, move constructor\
    \ and move assignment operators are only generated if there is no explicitly declared\
    \ copy constructor, copy assignment operator or destructor. This is not symmetric\
    \ to the traditional C++03 behavior with respect to auto-generation of copy constructor\
    \ and copy assignment operator, but is much safer. So the possibility to define\
    \ move constructors and move assignment operators is very useful and creates new\
    \ possibilities (purely movable classes), but classes that adhere to the C++03\
    \ Rule of the Big Three will still be fine.</p>\n<p>For resource-managing classes\
    \ you can define the copy constructor and copy assignment operator as deleted\
    \ (which counts as definition) if the underlying resource cannot be copied. Often\
    \ you still want move constructor and move assignment operator. Copy and move\
    \ assignment operators will often be implemented using <code>swap</code>, as in\
    \ C++03. If you have a move constructor and move assignment operator, specializing\
    \ <code>std::swap</code> will become unimportant because the generic <code>std::swap</code>\
    \ uses the move constructor and move assignment operator if available, and that\
    \ should be fast enough.</p>\n<p>Classes that are not meant for resource management\
    \ (i.e., no non-empty destructor) or subtype polymorphism (i.e., no virtual destructor)\
    \ should declare none of the five special member functions; they will all be auto-generated\
    \ and behave correct and fast.</p>\n</div>"
- - Rule-of-Three becomes Rule-of-Five with C++11?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I can't believe that nobody linked\
    \ to <a href=\"https://web.archive.org/web/20161023192637/https://rmf.io/cxx11/rule-of-zero\"\
    \ rel=\"noreferrer\">this</a>.</p>\n<p>Basically article argues for \"Rule of\
    \ Zero\".\nIt is not appropriate for me to quote entire article but I believe\
    \ this is the main point:</p>\n<blockquote>\n<p>Classes that have custom destructors,\
    \ copy/move constructors or copy/move assignment operators should deal exclusively\
    \ with ownership.\n  Other classes should not have custom destructors, copy/move\n\
    \  constructors or copy/move assignment operators.</p>\n</blockquote>\n<p>Also\
    \ this bit is IMHO important:</p>\n<blockquote>\n<p>Common \"ownership-in-a-package\"\
    \ classes are included in the standard\n  library: <code>std::unique_ptr</code>\
    \ and <code>std::shared_ptr</code>. Through the use of\n  custom deleter objects,\
    \ both have been made flexible enough to manage\n  virtually any kind of resource.</p>\n\
    </blockquote>\n</div>"
- - Rule-of-Three becomes Rule-of-Five with C++11?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I don't think so, <a href=\"\
    http://en.wikipedia.org/wiki/Rule_of_three_%28C%2B%2B_programming%29\" rel=\"\
    noreferrer\">the rule of three</a> is a rule of thumb that states that a class\
    \ that implements one of the following but not them all is probably buggy.</p>\n\
    <ol>\n<li>Copy constructor</li>\n<li>Assignment operator</li>\n<li>Destructor</li>\n\
    </ol>\n<p>However leaving out the move constructor or move assignment operator\
    \ does not imply a bug. It <em>may</em> be a missed opportunity at optimization\
    \ (in most cases) or that move semantics aren't relevant for this class but this\
    \ isn't a bug.</p>\n<p>While it may be best practice to define a move constructor\
    \ when relevant, it isn't mandatory. There are many cases in which a move constructor\
    \ isn't relevant for a class (e.g. <code>std::complex</code>) and all classes\
    \ that behave correctly in C++03 will continue to behave correctly in C++0x even\
    \ if they don't define a move constructor.</p>\n</div>"
- - What is array decaying?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>It's said that arrays \"decay\"\
    \ into pointers.  A C++ array declared as <code>int numbers [5]</code> cannot\
    \ be re-pointed, i.e. you can't say <code>numbers = 0x5a5aff23</code>. More importantly\
    \ the term decay signifies loss of type and dimension; <code>numbers</code> decay\
    \ into <code>int*</code> by losing the dimension information (count 5) and the\
    \ type is not <code>int [5]</code> any more. Look here for <a href=\"https://stackoverflow.com/questions/17752978/exception-to-array-not-decaying-into-a-pointer\"\
    >cases where the decay doesn't happen</a>.</p>\n<p>If you're passing an array\
    \ by value, what you're really doing is copying a pointer - a pointer to the array's\
    \ first element is copied to the parameter (whose type should also be a pointer\
    \ the array element's type). This works due to array's decaying nature; once decayed,\
    \ <code>sizeof</code> no longer gives the complete array's size, because it essentially\
    \ becomes a pointer.  This is why it's preferred (among other reasons) to pass\
    \ by reference or pointer.</p>\n<p>Three ways to pass in an array<sup>1</sup>:</p>\n\
    <pre><code>void by_value(const T* array)   // const T array[] means the same\n\
    void by_pointer(const T (*array)[U])\nvoid by_reference(const T (&amp;array)[U])\n\
    </code></pre>\n<p>The last two will give proper <code>sizeof</code> info, while\
    \ the first one won't since the array argument has decayed to be assigned to the\
    \ parameter.</p>\n<p><sup>1 The constant U should be known at compile-time.</sup></p>\n\
    </div>"
- - What is array decaying?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Arrays are basically the same\
    \ as pointers in C/C++, but not quite. Once you convert an array:</p>\n<pre><code>const\
    \ int a[] = { 2, 3, 5, 7, 11 };\n</code></pre>\n<p>into a pointer (which works\
    \ without casting, and therefore can happen unexpectedly in some cases):</p>\n\
    <pre><code>const int* p = a;\n</code></pre>\n<p>you lose the ability of the <code>sizeof</code>\
    \ operator to count elements in the array:</p>\n<pre><code>assert( sizeof(p) !=\
    \ sizeof(a) );  // sizes are not equal\n</code></pre>\n<p>This lost ability is\
    \ referred to as \"decay\".</p>\n<p>For more details, check out this <a href=\"\
    http://web.archive.org/web/20081208122434/http://www.transcendentaxis.com/dthompson/blog/archives/9\"\
    \ rel=\"noreferrer\">article about array decay</a>.</p>\n</div>"
- - What is array decaying?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Here's what the standard says\
    \ (C99 6.3.2.1/3 - Other operands - Lvalues, arrays, and function designators):</p>\n\
    <blockquote>\n<p>Except when it is the operand of the sizeof operator or the unary\
    \ &amp; operator, or is a\n  string literal used to initialize an array, an expression\
    \ that has type ‘‘array of type’’ is\n  converted to an expression with type ‘‘pointer\
    \ to type’’ that points to the initial element of\n  the array object and is not\
    \ an lvalue.</p>\n</blockquote>\n<p>This means that pretty much anytime the array\
    \ name is used in an expression, it is automatically converted to a pointer to\
    \ the 1st item in the array.</p>\n<p>Note that function names act in a similar\
    \ way, but function pointers are used far less and in a much more specialized\
    \ way that it doesn't cause nearly as much confusion as the automatic conversion\
    \ of array names to pointers.</p>\n<p>The C++ standard (4.2 Array-to-pointer conversion)\
    \ loosens the conversion requirement to (emphasis mine):</p>\n<blockquote>\n<p>An\
    \ lvalue or rvalue of type “array of N T” or “array of unknown bound of T” <strong>can</strong>\
    \ be converted to an rvalue\n  of type “pointer to T.”</p>\n</blockquote>\n<p>So\
    \ the conversion doesn't <em>have</em> to happen like it pretty much always does\
    \ in C (this lets functions overload or templates match on the array type).</p>\n\
    <p>This is also why in C you should avoid using array parameters in function prototypes/definitions\
    \ (in my opinion - I'm not sure if there's any general agreement).  They cause\
    \ confusion and are a fiction anyway - use pointer parameters and the confusion\
    \ might not go away entirely, but at least the parameter declaration isn't lying.</p>\n\
    </div>"
- - Why does C++ not have reflection?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There are several problems with\
    \ reflection in C++.</p>\n<ul>\n<li><p>It's a lot of work to add, and the C++\
    \ committee is fairly conservative, and don't spend time    on radical new features\
    \ unless they're sure it'll pay off. (A suggestion for adding a module system\
    \ similar to .NET assemblies has been made, and while I think there's general\
    \ consensus that it'd be nice to have, it's not their top priority at the moment,\
    \ and has been pushed back until well after C++0x. The motivation for this feature\
    \ is to get rid of the <code>#include</code> system, but it would also enable\
    \ at least some metadata).</p></li>\n<li><p>You don't pay for what you don't\n\
    use. That's one of the must basic\ndesign philosophies underlying C++.\nWhy should\
    \ my code carry around\nmetadata if I may never need it?\nMoreover, the addition\
    \ of metadata\nmay inhibit the compiler from\noptimizing. Why should I pay that\n\
    cost in my code if I may never need\nthat metadata?</p></li>\n<li><p>Which leads\
    \ us to another big point:\nC++ makes <em>very</em> few guarantees\nabout the\
    \ compiled code. The\ncompiler is allowed to do pretty\nmuch anything it likes,\
    \ as long as\nthe resulting functionality is what\nis expected. For example, your\n\
    classes aren't required to actually\n<em>be there</em>. The compiler can optimize\
    \ them away, inline\neverything they do, and it\nfrequently does just that, because\n\
    even simple template code tends to\ncreate quite a few template\ninstantiations.\
    \ The C++ standard\nlibrary <em>relies</em> on this aggressive\noptimization.\
    \ Functors are only\nperformant if the overhead of\ninstantiating and destructing\
    \ the\nobject can be optimized away.\n<code>operator[]</code> on a vector is only\
    \ comparable to raw\narray indexing in performance\nbecause the entire operator\
    \ can be\ninlined and thus removed entirely\nfrom the compiled code. C# and Java\n\
    make a lot of guarantees about the\noutput of the compiler. If I define\na class\
    \ in C#, then that class <em>will\nexist</em> in the resulting assembly.\nEven\
    \ if I never use it. Even if all\ncalls to its member functions could\nbe inlined.\
    \ The class has to be\nthere, so that reflection can find\nit. Part of this is\
    \ alleviated by C#\ncompiling to bytecode, which means\nthat the JIT compiler\
    \ <em>can</em> remove\nclass definitions and inline\nfunctions if it likes, even\
    \ if the\ninitial C# compiler can't. In C++,\nyou only have one compiler, and\
    \ it\nhas to output efficient code. If you\nwere allowed to inspect the metadata\n\
    of a C++ executable, you'd expect to\nsee every class it defined, which\nmeans\
    \ that the compiler would have\nto preserve all the defined classes,\neven if\
    \ they're not necessary.</p></li>\n<li><p>And then there are templates.\nTemplates\
    \ in C++ are nothing like\ngenerics in other languages. Every\ntemplate instantiation\
    \ creates a\n<em>new</em> type. <code>std::vector&lt;int&gt;</code> is a completely\
    \ separate class from\n<code>std::vector&lt;float&gt;</code>. That adds up to\n\
    a lot of different types in a entire\nprogram. What should our reflection\nsee?\
    \ The <em>template</em> <code>std::vector</code>? But\nhow can it, since that's\
    \ a\nsource-code construct, which has no\nmeaning at runtime? It'd have to see\n\
    the separate classes\n<code>std::vector&lt;int&gt;</code> and\n<code>std::vector&lt;float&gt;</code>.\
    \ And\n<code>std::vector&lt;int&gt;::iterator</code> and\n<code>std::vector&lt;float&gt;::iterator</code>,\
    \ same\nfor <code>const_iterator</code> and so on. And\nonce you step into template\n\
    metaprogramming, you quickly end up\ninstantiating hundreds of templates,\nall\
    \ of which get inlined and removed\nagain by the compiler. They have no\nmeaning,\
    \ except as part of a\ncompile-time metaprogram. Should all\nthese hundreds of\
    \ classes be visible\nto reflection? They'd have to,\nbecause otherwise our reflection\n\
    would be useless, if it doesn't even guarantee that the classes I defined will\
    \ actually <em>be there</em>. And a side problem is that the template class doesn't\
    \ exist until it is instantiated. Imagine a program which uses <code>std::vector&lt;int&gt;</code>.\
    \ Should our reflection system be able to see <code>std::vector&lt;int&gt;::iterator</code>?\
    \ On one hand, you'd certainly expect so. It's an important class, and it's defined\
    \ in terms of <code>std::vector&lt;int&gt;</code>, which <em>does</em> exist in\
    \ the metadata. On the other hand, if the program never actually <em>uses</em>\
    \ this iterator class template, its type will never have been instantiated, and\
    \ so the compiler won't have generated the class in the first place. And it's\
    \ too late to create it at runtime, since it requires access to the source code.</p></li>\n\
    <li>And finally, reflection isn't quite\nas vital in C++ as it is in C#. The\n\
    reason is again, template\nmetaprogramming. It can't solve\neverything, but for\
    \ many cases where\nyou'd otherwise resort to\nreflection, it's possible to write\
    \ a\nmetaprogram which does the same\nthing at compile-time.\n<code>boost::type_traits</code>\
    \ is a simple\nexample. You want to know about type\n<code>T</code>? Check its\
    \ <code>type_traits</code>. In C#,\nyou'd have to fish around after its\ntype\
    \ using reflection. Reflection\nwould still be useful for some\nthings (the main\
    \ use I can see,\nwhich metaprogramming can't easily\nreplace, is for autogenerated\n\
    serialization code), but it would\ncarry some significant costs for\nC++, and\
    \ it's just not necessary as often as it is in other languages.</li>\n</ul>\n\
    <p><em>Edit:</em>\nIn response to comments:</p>\n<p>cdleary:\nYes, debug symbols\
    \ do something similar, in that they store metadata about the types used in the\
    \ executable. But they also suffer from the problems I described. If you've ever\
    \ tried debugging a release build, you'll know what I mean. There are large logical\
    \ gaps where you created a class in the source code, which has gotten inlined\
    \ away in the final code. If you were to use reflection for anything useful, you'd\
    \ need it to be more reliable and consistent. As it is, types would be vanishing\
    \ and disappearing almost every time you compile. You change a tiny little detail,\
    \ and the compiler decides to change which types get inlined and which ones don't,\
    \ as a response. How do you extract anything useful from that, when you're not\
    \ even guaranteed that the most relevant types will be represented in your metadata?\
    \ The type you were looking for may have been there in the last build, but now\
    \ it's gone. And tomorrow, someone will check in a small innocent change to a\
    \ small innocent function, which makes the type just big enough that it won't\
    \ get completely inlined, so it'll be back again. That's still useful for debug\
    \ symbols, but not much more than that. I'd hate trying to generate serialization\
    \ code for a class under those terms.</p>\n<p>Evan Teran: Of course these issues\
    \ <em>could</em> be resolved. But that falls back to my point #1. It'd take a\
    \ lot of work, and the C++ committee has plenty of things they feel is more important.\
    \ Is the benefit of getting some limited reflection (and it would be limited)\
    \ in C++ really big enough to justify focusing on that at the expense of other\
    \ features? Is there really a huge benefit in adding features the core language\
    \ which can already (mostly) be done through libraries and preprocessors like\
    \ QT's? Perhaps, but the need is a lot less urgent than if such libraries didn't\
    \ exist.\nFor your specific suggestions though, I believe disallowing it on templates\
    \ would make it completely useless. You'd be unable to use reflection on the standard\
    \ library, for example. What kind of reflection wouldn't let you see a <code>std::vector</code>?\
    \ Templates are a <em>huge</em> part of C++. A feature that doesn't work on templates\
    \ is basically useless.</p>\n<p>But you're right, some form of reflection could\
    \ be implemented. But it'd be a major change in the language. As it is now, types\
    \ are exclusively a compile-time construct. They exist for the benefit of the\
    \ compiler, and nothing else. Once the code has been compiled, there <em>are</em>\
    \ no classes. If you stretch yourself, you could argue that functions still exist,\
    \ but really, all there is is a bunch of jump assembler instructions, and a lot\
    \ of stack push/pop's. There's not much to go on, when adding such metadata.</p>\n\
    <p>But like I said, there is a proposal for changes to the compilation model,\
    \ adding self-contained modules, storing metadata for select types, allowing other\
    \ modules to reference them without having to mess with <code>#include</code>s.\
    \ That's a good start, and to be honest, I'm surprised the standard committee\
    \ didn't just throw the proposal out for being too big a change. So perhaps in\
    \ 5-10 years? :)</p>\n</div>"
- - Why does C++ not have reflection?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Reflection requires some metadata\
    \ about types to be stored somewhere that can be queried. Since C++ compiles to\
    \ native machine code and undergoes heavy changes due to optimization, high level\
    \ view of the application is pretty much lost in the process of compilation, consequently,\
    \ it won't be possible to query them at run time. Java and .NET use a very high\
    \ level representation in the binary code for virtual machines making this level\
    \ of reflection possible. In some C++ implementations, however, there is something\
    \ called Run Time Type Information (RTTI) which can be considered a stripped down\
    \ version of reflection.</p>\n</div>"
- - Why does C++ not have reflection?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>All languages should not try\
    \ to incorporate every feature of every other language.  </p>\n<p>C++ is essentially\
    \ a very, very sophisticated macro assembler.  It is NOT (in a traditional sense)\
    \ a high-level language like C#, Java, Objective-C, Smalltalk, etc.</p>\n<p>It\
    \ is good to have different tools for different jobs.  If we only have hammers,\
    \ all things are going to look like nails, etc.  Having script languages is useful\
    \ for some jobs, and reflective OO-languages (Java, Obj-C, C#) are useful for\
    \ another class of jobs, and super-efficient bare-bones close-to-the-machine languages\
    \ are useful for yet another class of jobs (C++, C, Assembler).</p>\n<p>C++ does\
    \ an amazing job of extending Assembler technology to incredible levels of complexity\
    \ management, and abstractions to make programming larger, more complex tasks\
    \ vastly more possible for human beings.  But it is not necessarily a language\
    \ that is the best suited for those who are approaching their problem from a strictly\
    \ high-level perspective (Lisp, Smalltalk, Java, C#).  If you need a language\
    \ with those features to best implement a solution to your problems, then thank\
    \ those who've created such languages for all of us to use!</p>\n<p>But C++ is\
    \ for those who, for whatever reason(s), need to have a strong correlation between\
    \ their code and the underlying machine's operation.  Whether its efficiency,\
    \ or programming device drivers, or interaction with the lower-level OS services,\
    \ or whatever, C++ is better suited to those tasks.  </p>\n<p>C#, Java, Objective-C\
    \ all require a much larger, richer runtime system to support their execution.\
    \  That runtime has to be delivered to the system in question - preinstalled to\
    \ support the operation of your software.  And that layer has to be maintained\
    \ for various target systems, customized by SOME OTHER LANGUAGE to make it work\
    \ on that platform.  And that middle layer - that adaptive layer between the host\
    \ OS and the your code - the runtime, is almost always written in a language like\
    \ C or C++ where efficiency is #1, where understanding predictably the exact interaction\
    \ between software and hardware can be well understood, and manipulated to maximum\
    \ gain.</p>\n<p>I love Smalltalk, Objective-C, and having a rich runtime system\
    \ with reflection, meta-data, garbage collection, etc.  Amazing code can be written\
    \ to take advantage of these facilities!  But that's simply a higher layer on\
    \ the stack, a layer that must rest on lower layers, that themselves must ultimately\
    \ sit upon the OS and the hardware.  And we will always need a language that is\
    \ best suited for building that layer: C++/C/Assembler.</p>\n<p>Addendum: C++11/14\
    \ are continuing to expand C++ ability to support higher-level abstractions and\
    \ systems.  Threading, synchronization, precise memory models, more precise abstract\
    \ machine definitions are enabling C++ developers to achieve many of the high-level\
    \ abstractions that some of these high-level only languages used to have exclusive\
    \ domain over, while continuing to provide close-to-metal performance and excellent\
    \ predictability (i.e minimal runtime subsystems).  Perhaps reflection facilities\
    \ will be selectively enabled in a future revision of C++, for those who want\
    \ it - or perhaps a library will provide such runtime services (maybe there is\
    \ one now, or the beginnings of one in boost?). </p>\n</div>"
- - Is there a performance difference between i++ and ++i in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>[Executive Summary: Use <code>++i</code>\
    \ if you don't have a specific reason to use <code>i++</code>.]</p>\n<p>For C++,\
    \ the answer is a bit more complicated.</p>\n<p>If <code>i</code> is a simple\
    \ type (not an instance of a C++ class), <a href=\"https://stackoverflow.com/a/24887/194894\"\
    >then the answer given for C (\"No there is no performance difference\")</a> holds,\
    \ since the compiler is generating the code.</p>\n<p>However, if <code>i</code>\
    \ is an instance of a C++ class, then <code>i++</code> and <code>++i</code> are\
    \ making calls to one of the <code>operator++</code> functions. Here's a standard\
    \ pair of these functions:</p>\n<pre><code>Foo&amp; Foo::operator++()   // called\
    \ for ++i\n{\n    this-&gt;data += 1;\n    return *this;\n}\n\nFoo Foo::operator++(int\
    \ ignored_dummy_value)   // called for i++\n{\n    Foo tmp(*this);   // variable\
    \ \"tmp\" cannot be optimized away by the compiler\n    ++(*this);\n    return\
    \ tmp;\n}\n</code></pre>\n<p>Since the compiler isn't generating code, but just\
    \ calling an <code>operator++</code> function, there is no way to optimize away\
    \ the <code>tmp</code> variable and its associated copy constructor. If the copy\
    \ constructor is expensive, then this can have a significant performance impact.</p>\n\
    </div>"
- - Is there a performance difference between i++ and ++i in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Yes.  There is.</p>\n<p>The ++\
    \ operator may or may not be defined as a function.  For primitive types (int,\
    \ double, ...) the operators are built in, so the compiler will probably be able\
    \ to optimize your code.  But in the case of an object that defines the ++ operator\
    \ things are different.</p>\n<p>The operator++(int) function must create a copy.\
    \  That is because postfix ++ is expected to return a different value than what\
    \ it holds:  it must hold its value in a temp variable, increment its value and\
    \ return the temp.  In the case of operator++(), prefix ++, there is no need to\
    \ create a copy:  the object can increment itself and then simply return itself.</p>\n\
    <p>Here is an illustration of the point:</p>\n<pre><code>struct C\n{\n    C&amp;\
    \ operator++();      // prefix\n    C  operator++(int);   // postfix\n\nprivate:\n\
    \n    int i_;\n};\n\nC&amp; C::operator++()\n{\n    ++i_;\n    return *this; \
    \  // self, no copy created\n}\n\nC C::operator++(int ignored_dummy_value)\n{\n\
    \    C t(*this);\n    ++(*this);\n    return t;   // return a copy\n}\n</code></pre>\n\
    <p>Every time you call operator++(int) you must create a copy, and the compiler\
    \ can't do anything about it.  When given the choice, use operator++();  this\
    \ way you don't save a copy.  It might be significant in the case of many increments\
    \ (large loop?) and/or large objects.</p>\n</div>"
- - Is there a performance difference between i++ and ++i in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Here's a benchmark for the case\
    \ when increment operators are in different translation units. Compiler with g++\
    \ 4.5.</p>\n<p>Ignore the style issues for now</p>\n<pre><code>// a.cc\n#include\
    \ &lt;ctime&gt;\n#include &lt;array&gt;\nclass Something {\npublic:\n    Something&amp;\
    \ operator++();\n    Something operator++(int);\nprivate:\n    std::array&lt;int,PACKET_SIZE&gt;\
    \ data;\n};\n\nint main () {\n    Something s;\n\n    for (int i=0; i&lt;1024*1024*30;\
    \ ++i) ++s; // warm up\n    std::clock_t a = clock();\n    for (int i=0; i&lt;1024*1024*30;\
    \ ++i) ++s;\n    a = clock() - a;\n\n    for (int i=0; i&lt;1024*1024*30; ++i)\
    \ s++; // warm up\n    std::clock_t b = clock();\n    for (int i=0; i&lt;1024*1024*30;\
    \ ++i) s++;\n    b = clock() - b;\n\n    std::cout &lt;&lt; \"a=\" &lt;&lt; (a/double(CLOCKS_PER_SEC))\n\
    \              &lt;&lt; \", b=\" &lt;&lt; (b/double(CLOCKS_PER_SEC)) &lt;&lt;\
    \ '\\n';\n    return 0;\n}\n</code></pre>\n<hr/>\n<h1>O(n) increment</h1>\n<h2>Test</h2>\n\
    <pre><code>// b.cc\n#include &lt;array&gt;\nclass Something {\npublic:\n    Something&amp;\
    \ operator++();\n    Something operator++(int);\nprivate:\n    std::array&lt;int,PACKET_SIZE&gt;\
    \ data;\n};\n\n\nSomething&amp; Something::operator++()\n{\n    for (auto it=data.begin(),\
    \ end=data.end(); it!=end; ++it)\n        ++*it;\n    return *this;\n}\n\nSomething\
    \ Something::operator++(int)\n{\n    Something ret = *this;\n    ++*this;\n  \
    \  return ret;\n}\n</code></pre>\n<h2>Results</h2>\n<p>Results (timings are in\
    \ seconds) with g++ 4.5 on a virtual machine:</p>\n<pre><code>Flags (--std=c++0x)\
    \       ++i   i++\n-DPACKET_SIZE=50 -O1      1.70  2.39\n-DPACKET_SIZE=50 -O3\
    \      0.59  1.00\n-DPACKET_SIZE=500 -O1    10.51 13.28\n-DPACKET_SIZE=500 -O3\
    \     4.28  6.82\n</code></pre>\n<hr/>\n<h1>O(1) increment</h1>\n<h2>Test</h2>\n\
    <p>Let us now take the following file:</p>\n<pre><code>// c.cc\n#include &lt;array&gt;\n\
    class Something {\npublic:\n    Something&amp; operator++();\n    Something operator++(int);\n\
    private:\n    std::array&lt;int,PACKET_SIZE&gt; data;\n};\n\n\nSomething&amp;\
    \ Something::operator++()\n{\n    return *this;\n}\n\nSomething Something::operator++(int)\n\
    {\n    Something ret = *this;\n    ++*this;\n    return ret;\n}\n</code></pre>\n\
    <p>It does nothing in the incrementation. This simulates the case when incrementation\
    \ has constant complexity.</p>\n<h2>Results</h2>\n<p>Results now vary extremely:</p>\n\
    <pre><code>Flags (--std=c++0x)       ++i   i++\n-DPACKET_SIZE=50 -O1      0.05\
    \   0.74\n-DPACKET_SIZE=50 -O3      0.08   0.97\n-DPACKET_SIZE=500 -O1     0.05\
    \   2.79\n-DPACKET_SIZE=500 -O3     0.08   2.18\n-DPACKET_SIZE=5000 -O3    0.07\
    \  21.90\n</code></pre>\n<hr/>\n<h1>Conclusion</h1>\n<h2>Performance-wise</h2>\n\
    <p>If you do not need the previous value, make it a habit to use pre-increment.\
    \ Be consistent even with builtin types, you'll get used to it and do not run\
    \ risk of suffering unecessary performance loss if you ever replace a builtin\
    \ type with a custom type.</p>\n<h2>Semantic-wise</h2>\n<ul>\n<li><code>i++</code>\
    \ says <code>increment i, I am interested in the previous value, though</code>.</li>\n\
    <li><code>++i</code> says <code>increment i, I am interested in the current value</code>\
    \ or <code>increment i, no interest in the previous value</code>. Again, you'll\
    \ get used to it, even if you are not right now.</li>\n</ul>\n<h2>Knuth.</h2>\n\
    <p>Premature optimization is the root of all evil. As is premature pessimization.</p>\n\
    </div>"
- - How to convert int to QString?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Use <a href=\"http://doc.qt.io/qt-5/qstring.html#number\"\
    \ rel=\"noreferrer\"><code>QString::number()</code></a>:</p>\n<pre><code>int i\
    \ = 42;\nQString s = QString::number(i);\n</code></pre>\n</div>"
- - How to convert int to QString?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>And if you want to put it into\
    \ string within some text context, forget about <code>+</code> operator. \nSimply\
    \ do:</p>\n<pre><code>// Qt 5 + C++11\nauto i = 13;    \nauto printable = QStringLiteral(\"\
    My magic number is %1. That's all!\").arg(i);\n\n// Qt 5\nint i = 13;    \nQString\
    \ printable = QStringLiteral(\"My magic number is %1. That's all!\").arg(i);\n\
    \n// Qt 4\nint i = 13;    \nQString printable = QString::fromLatin1(\"My magic\
    \ number is %1. That's all!\").arg(i);\n</code></pre>\n</div>"
- - How to convert int to QString?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Moreover to convert whatever\
    \ you want, you can use <code>QVariant</code>.\nFor an <code>int</code> to a <code>QString</code>\
    \ you get:</p>\n<pre><code>QVariant(3).toString();\n</code></pre>\n<p>A <code>float</code>\
    \ to a <code>string</code> or a <code>string</code> to a <code>float</code>:</p>\n\
    <pre><code>QVariant(3.2).toString();\nQVariant(\"5.2\").toFloat();\n</code></pre>\n\
    </div>"
- - Is uninitialized local variable the fastest random number generator?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>As others have noted, this is\
    \ Undefined Behavior (UB).</p>\n<p>In practice, it will (probably) actually (kindof)\
    \ work.  Reading from an uninitialized register on x86[-64] architectures will\
    \ indeed produce garbage results, and probably won't do anything bad (as opposed\
    \ to e.g. Itanium, where <a href=\"http://blogs.msdn.com/b/oldnewthing/archive/2004/01/19/60162.aspx\"\
    >registers can be flagged as invalid</a>, so that reads propagate errors like\
    \ NaN).</p>\n<p>There are two main problems though:</p>\n<ol>\n<li><p><strong>It\
    \ won't be particularly random.</strong>  In this case, you're reading from the\
    \ stack, so you'll get whatever was there previously.  Which might be effectively\
    \ random, completely structured, the password you entered ten minutes ago, or\
    \ your grandmother's cookie recipe.</p></li>\n<li><p><strong>It's Bad (capital\
    \ 'B')</strong> practice to let things like this creep into your code.  Technically,\
    \ the compiler could insert <code>reformat_hdd();</code> every time you read an\
    \ undefined variable.  It <em>won't</em>, but you shouldn't do it anyway.  Don't\
    \ do unsafe things.  The fewer exceptions you make, the safer you are from accidental\
    \ mistakes <em>all</em> the time.</p>\n<p>The more pressing issue with UB is that\
    \ it makes your entire program's behavior undefined.  Modern compilers can use\
    \ this to elide huge swaths of your code or even <a href=\"http://blogs.msdn.com/b/oldnewthing/archive/2014/06/27/10537746.aspx\"\
    >go back in time</a>.  Playing with UB is like a victorian engineer dismantling\
    \ a live nuclear reactor.  There's a zillion things to go wrong, and you probably\
    \ won't know half of the underlying principles or implemented technology.  It\
    \ <em>might</em> be okay, but you still shouldn't let it happen.  Look at the\
    \ other nice answers for details.</p></li>\n</ol>\n<p>Also, I'd fire you.</p>\n\
    </div>"
- - Is uninitialized local variable the fastest random number generator?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Let me say this clearly: <strong>we\
    \ do not invoke undefined behavior in our programs</strong>. It is never ever\
    \ a good idea, period. There are rare exceptions to this rule; for example, if\
    \ you are a <a href=\"https://stackoverflow.com/q/6433339/1708801\">library implementer\
    \ implementing offsetof</a>. If your case falls under such an exception you likely\
    \ know this already. In this case we <a href=\"https://stackoverflow.com/q/23415661/1708801\"\
    >know using uninitialized automatic variables is undefined behavior</a>.</p>\n\
    <p>Compilers have become very aggressive with optimizations around undefined behavior\
    \ and we can find many cases where undefined behavior has lead to security flaws.\
    \ The most infamous case is probably the <a href=\"http://blog.regehr.org/archives/970\"\
    \ rel=\"noreferrer\">Linux kernel null pointer check removal</a> which I mention\
    \ in <a href=\"https://stackoverflow.com/a/32507135/1708801\">my answer to C++\
    \ compilation bug?</a> where a compiler optimization around undefined behavior\
    \ turned a finite loop into an infinite one.</p>\n<p>We can read CERT's <a href=\"\
    https://pubweb.eng.utah.edu/~cs5785/slides-f10/Dangerous+Optimizations.pdf\" rel=\"\
    noreferrer\">Dangerous Optimizations and the Loss of Causality</a> (<a href=\"\
    https://www.youtube.com/watch?v=cjQQCrQ_wvs\" rel=\"noreferrer\">video</a>) which\
    \ says, amongst other things:</p>\n<blockquote>\n<p>Increasingly, compiler writers\
    \ are taking advantage of undefined\n  behaviors in the C and C++ programming\
    \ languages to improve\n  optimizations.</p>\n<p>Frequently, these optimizations\
    \ are interfering with\n  the ability of developers to perform cause-effect analysis\
    \ on their\n  source code, that is, analyzing the dependence of downstream results\n\
    \  on prior results.</p>\n<p>Consequently, these optimizations are eliminating\n\
    \  causality in software and are increasing the probability of software\n  faults,\
    \ defects, and vulnerabilities.</p>\n</blockquote>\n<p>Specifically with respect\
    \ to indeterminate values, the C standard <a href=\"http://www.open-std.org/Jtc1/sc22/WG14/www/docs/dr_451.htm\"\
    \ rel=\"noreferrer\">defect report 451: Instability of uninitialized automatic\
    \ variables</a> makes for some interesting reading. It has not been resolved yet\
    \ but introduces the concept of <em>wobbly values</em> which means the indeterminatness\
    \ of a value may propagate through the program and can have different indeterminate\
    \ values at different points in the program.</p>\n<p>I don't know of any examples\
    \ where this happens but at this point we can't rule it out.</p>\n<p><b>Real examples,\
    \ not the result you expect</b></p>\n<p>You are unlikely to get random values.\
    \ A compiler could optimize the away the loop altogether. For example, with this\
    \ simplified case:</p>\n<pre><code>void updateEffect(int  arr[20]){\n    for(int\
    \ i=0;i&lt;20;i++){\n        int r ;    \n        arr[i] = r ;\n    }\n}\n</code></pre>\n\
    <p>clang optimizes it away (<em><a href=\"http://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%2C%22colouriseAsm%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22FANw9glgJgBArgBygQwC4FMCiAzb6DGqAFBAHaowzIBO1A2gEwAMAugJQDewll2Y1JcjAgBeJgG4IAHmaSA1HM7ceKshWoxxK5Sso16EFjBEwN4nTAC%2Bwa0A%22%2C%22compiler%22%3A%22clang37x%22%2C%22options%22%3A%22-std%3Dc%2B%2B14%20-O3%20-Wall%20-Wextra%20-fverbose-asm%20-fno-inline%22%7D%5D%7D\"\
    \ rel=\"noreferrer\">see it live</a></em>):</p>\n<pre><code>updateEffect(int*):\
    \                     # @updateEffect(int*)\n    retq\n</code></pre>\n<p>or perhaps\
    \ get all zeros, as with this modified case:</p>\n<pre><code>void updateEffect(int\
    \  arr[20]){\n    for(int i=0;i&lt;20;i++){\n        int r ;    \n        arr[i]\
    \ = r%255 ;\n    }\n}\n</code></pre>\n<p><a href=\"http://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%2C%22colouriseAsm%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22FANw9glgJgBArgBygQwC4FMCiAzb6DGqAFBAHaowzIBO1A2gEwAMAugJQDewll2Y1JcjAgBeJgG4IAHmaSA1HM7ceKshWoxxK5Sso16EFjBExqAUgYBWS5p0wAvsEdAA%22%2C%22compiler%22%3A%22clang37x%22%2C%22options%22%3A%22-std%3Dc%2B%2B14%20-O3%20-Wall%20-Wextra%20-fverbose-asm%20-fno-inline%22%7D%5D%7D\"\
    \ rel=\"noreferrer\">see it live</a>:</p>\n<pre><code>updateEffect(int*):    \
    \                 # @updateEffect(int*)\n    xorps   %xmm0, %xmm0\n    movups\
    \  %xmm0, 64(%rdi)\n    movups  %xmm0, 48(%rdi)\n    movups  %xmm0, 32(%rdi)\n\
    \    movups  %xmm0, 16(%rdi)\n    movups  %xmm0, (%rdi)\n    retq\n</code></pre>\n\
    <p>Both of these cases are perfectly acceptable forms of undefined behavior.</p>\n\
    <p>Note, if we are on an Itanium we could <a href=\"http://pdos.csail.mit.edu/papers/ub:apsys12.pdf\"\
    \ rel=\"noreferrer\">end up with a trap value</a>:</p>\n<blockquote>\n<p>[...]if\
    \ the register happens to hold a special not-a-thing value,\n  reading the register\
    \ traps except for a few instructions[...]</p>\n</blockquote>\n<p><b>Other important\
    \ notes</b></p>\n<p>It is interesting to note the <a href=\"http://blog.regehr.org/archives/1234\"\
    \ rel=\"noreferrer\">variance between gcc and clang noted in the UB Canaries project</a>\
    \ over how willing they are to take advantage of undefined behavior with respect\
    \ to uninitialized memory. The article notes (<em>emphasis mine</em>):</p>\n<blockquote>\n\
    <p>Of course we need to be completely clear with ourselves that any such expectation\
    \ has nothing to do with the language standard and everything to do with what\
    \ a particular compiler happens to do, either because the providers of that compiler\
    \ are unwilling to exploit that UB <strong>or just because they have not gotten\
    \ around to exploiting it yet</strong>. When no real guarantee from the compiler\
    \ provider exists, <strong>we like to say that as-yet unexploited UBs are time\
    \ bombs</strong>: they’re waiting to go off next month or next year when the compiler\
    \ gets a bit more aggressive.</p>\n</blockquote>\n<p>As Matthieu M. points out\
    \ <a href=\"http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html\"\
    \ rel=\"noreferrer\">What Every C Programmer Should Know About Undefined Behavior\
    \ #2/3</a> is also relevant to this question. It says amongst other things (<em>emphasis\
    \ mine</em>):</p>\n<blockquote>\n<p>The important and scary thing to realize is\
    \ that <strong>just about <em>any</em>\n  optimization based on undefined behavior\
    \ can start being triggered on\n  buggy code at any time in the future</strong>.\
    \ Inlining, loop unrolling, memory\n  promotion and other optimizations will keep\
    \ getting better, and a\n  significant part of their reason for existing is to\
    \ expose secondary\n  optimizations like the ones above.</p>\n<p>To me, this is\
    \ deeply dissatisfying, partially because the compiler\n  inevitably ends up getting\
    \ blamed, but also because it means that huge\n  bodies of C code are <strong>land\
    \ mines just waiting to explode.</strong></p>\n</blockquote>\n<p>For completeness\
    \ sake I should probably mention that implementations can choose to make undefined\
    \ behavior well defined, for example <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Type-punning\"\
    \ rel=\"noreferrer\">gcc allows type punning through unions</a> while <a href=\"\
    https://stackoverflow.com/questions/11373203/accessing-inactive-union-member-undefined\"\
    >in C++ this seems like undefined behavior</a>. If this is the case the implementation\
    \ should document it and this will usually not be portable.</p>\n</div>"
- - Is uninitialized local variable the fastest random number generator?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>No, it's terrible.</p>\n<p>The\
    \ behaviour of using an uninitialised variable is undefined in both C and C++,\
    \ and it's very unlikely that such a scheme would have desirable statistical properties.</p>\n\
    <p>If you want a \"quick and dirty\" random number generator, then <code>rand()</code>\
    \ is your best bet. In its implementation, all it does is a multiplication, an\
    \ addition, and a modulus.</p>\n<p>The fastest generator I know of requires you\
    \ to use a <code>uint32_t</code> as the type of the pseudo-random variable <code>I</code>,\
    \ and use</p>\n<p><code>I = 1664525 * I + 1013904223</code></p>\n<p>to generate\
    \ successive values. You can choose any initial value of <code>I</code> (called\
    \ the <em>seed</em>) that takes your fancy. Obviously you can code that inline.\
    \ The standard-guaranteed wraparound of an unsigned type acts as the modulus.\
    \ (The numeric constants are hand-picked by that remarkable scientific programmer\
    \ Donald Knuth.)</p>\n</div>"
- - How do you get assembler output from C/C++ source in gcc?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Use the <code>-S</code> option\
    \ to gcc (or g++).</p>\n<pre><code>gcc -S helloworld.c\n</code></pre>\n<p>This\
    \ will run the preprocessor (cpp) over helloworld.c, perform the initial compilation\
    \ and then stop before the assembler is run.</p>\n<p>By default this will output\
    \ a file <code>helloworld.s</code>. The output file can be still be set by using\
    \ the <code>-o</code> option.</p>\n<pre><code>gcc -S -o my_asm_output.s helloworld.c\n\
    </code></pre>\n<p>Of course this only works if you have the original source.\n\
    An alternative if you only have the resultant object file is to use <code>objdump</code>,\
    \ by setting the <code>--disassemble</code> option (or <code>-d</code> for the\
    \ abbreviated form).</p>\n<pre><code>objdump -S --disassemble helloworld &gt;\
    \ helloworld.dump\n</code></pre>\n<p>This option works best if debugging option\
    \ is enabled for the object file (<code>-g</code> at compilation time) and the\
    \ file hasn't been stripped.</p>\n<p>Running <code>file helloworld</code> will\
    \ give you some indication as to the level of detail that you will get by using\
    \ objdump.</p>\n</div>"
- - How do you get assembler output from C/C++ source in gcc?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This will generate the asm code\
    \ with the C code + line numbers interweaved to more easily see what lines generate\
    \ what code.</p>\n<pre><code># create assembler code:\nc++ -S -fverbose-asm -g\
    \ -O2 test.cc -o test.s\n# create asm interlaced with source lines:\nas -alhnd\
    \ test.s &gt; test.lst\n</code></pre>\n<p>Found in <a href=\"http://www.jjj.de/fxt/fxtbook.pdf\"\
    \ rel=\"nofollow noreferrer\">Algorithms for programmers</a>, page 3 (which is\
    \ the overall 15th page of the PDF).</p>\n</div>"
- - How do you get assembler output from C/C++ source in gcc?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The following command line is\
    \ from <a href=\"http://christiangarbin.blogspot.com/2013/05/c-generating-assembly-code-with-gccg.html\"\
    \ rel=\"noreferrer\">Christian Garbin's blog</a> </p>\n<pre><code>g++ -g -O -Wa,-aslh\
    \ horton_ex2_05.cpp &gt;list.txt\n</code></pre>\n<p>I ran G++ from a DOS window\
    \ on Win-XP, against a routine that contains an implicit cast</p>\n<pre><code>c:\\\
    gpp_code&gt;g++ -g -O -Wa,-aslh horton_ex2_05.cpp &gt;list.txt\nhorton_ex2_05.cpp:\
    \ In function `int main()':\nhorton_ex2_05.cpp:92: warning: assignment to `int'\
    \ from `double'\n</code></pre>\n<p>The output is asssembled generated code iterspersed\
    \ with the original C++ code (the C++ code is shown as comments in the generated\
    \ asm stream)</p>\n<pre><code>  16:horton_ex2_05.cpp **** using std::setw;\n \
    \ 17:horton_ex2_05.cpp ****\n  18:horton_ex2_05.cpp **** void disp_Time_Line (void);\n\
    \  19:horton_ex2_05.cpp ****\n  20:horton_ex2_05.cpp **** int main(void)\n  21:horton_ex2_05.cpp\
    \ **** {\n 164                    %ebp\n 165                            subl $128,%esp\n\
    ?GAS LISTING C:\\DOCUME~1\\CRAIGM~1\\LOCALS~1\\Temp\\ccx52rCc.s\n166 0128 55 \
    \                   call ___main\n167 0129 89E5          .stabn 68,0,21,LM2-_main\n\
    168 012b 81EC8000      LM2:\n168      0000\n169 0131 E8000000      LBB2:\n169\
    \      00\n170                    .stabn 68,0,25,LM3-_main\n171              \
    \      LM3:\n172                            movl $0,-16(%ebp)\n</code></pre>\n\
    </div>"
- - What's the purpose of using braces (i.e. {}) for a single-line if or loop?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Let's attempt to also modify\
    \ <code>i</code> when we increment <code>j</code>:</p>\n<pre><code>int j = 0;\n\
    for (int i = 0 ; i &lt; 100 ; ++i)\n    if (i % 2 == 0)\n        j++;\n      \
    \  i++;\n</code></pre>\n<p>Oh no! Coming from Python, this looks ok, but in fact\
    \ it isn't, as it's equivalent to:</p>\n<pre><code>int j = 0;\nfor (int i = 0\
    \ ; i &lt; 100 ; ++i)\n    if (i % 2 == 0)\n        j++;\ni++;\n</code></pre>\n\
    <p>Of course, this is a silly mistake, but one that even an experienced programmer\
    \ could make.</p>\n<p><strong>Another very good reason</strong> is pointed out\
    \ in <a href=\"https://stackoverflow.com/a/12193223/673730\">ta.speot.is's answer</a>.</p>\n\
    <p><strong>A third</strong> one I can think of is nested <code>if</code>'s:</p>\n\
    <pre><code>if (cond1)\n   if (cond2) \n      doSomething();\n</code></pre>\n<p>Now,\
    \ assume you now want to <code>doSomethingElse()</code> when <code>cond1</code>\
    \ is not met (new feature). So:</p>\n<pre><code>if (cond1)\n   if (cond2) \n \
    \     doSomething();\nelse\n   doSomethingElse();\n</code></pre>\n<p>which is\
    \ obviously wrong, since the <code>else</code> associates with the inner <code>if</code>.</p>\n\
    <hr/>\n<p>Edit: Since this is getting some attention, I'll clarify my view. The\
    \ question I was answering is:</p>\n<blockquote>\n<p>What's the benefit of using\
    \ the 1st version?</p>\n</blockquote>\n<p>Which I have described. There are some\
    \ benefits. But, IMO, \"always\" rules don't always apply. So I don't wholly support</p>\n\
    <blockquote>\n<p>Always use a { } block - even for a single line // not OK, why\
    \ ???</p>\n</blockquote>\n<p>I'm not saying <em>always</em> use a <code>{}</code>\
    \ block. If it's a simple enough condition &amp; behavior, don't. If you suspect\
    \ someone might come in later &amp; change your code to add functionality, do.</p>\n\
    </div>"
- - What's the purpose of using braces (i.e. {}) for a single-line if or loop?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>It's very easy to accidentally\
    \ change control-flow with comments if you do not use <code>{</code> and <code>}</code>.\
    \ For example:</p>\n<pre><code>if (condition)\n  do_something();\nelse\n  do_something_else();\n\
    \nmust_always_do_this();\n</code></pre>\n<p>If you comment out <code>do_something_else()</code>\
    \ with a single line comment, you'll end up with this:</p>\n<pre><code>if (condition)\n\
    \  do_something();\nelse\n  //do_something_else();\n\nmust_always_do_this();\n\
    </code></pre>\n<p>It compiles, but <code>must_always_do_this()</code> isn't always\
    \ called.</p>\n<p>We had this issue in our code base, where someone had gone in\
    \ to disable some functionality very quickly before release. Fortunately we caught\
    \ it in code review.</p>\n</div>"
- - What's the purpose of using braces (i.e. {}) for a single-line if or loop?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I have my doubts as to the competence\
    \ of the lecturer.  Considering his\npoints:</p>\n<ol>\n<li>OK</li>\n<li>Would\
    \ anyone really write (or want to read) <code>(b*b) - ((4*a)*c)</code>?\nSome\
    \ precedences are obvious (or should be), and the extra parentheses\njust add\
    \ to confusion.  (On the other hand, you _should_ use the\nparentheses in less\
    \ obvious cases, even if you know that they're not\nneeded.)\n</li>\n<li>Sort\
    \ of.  There are two wide spread conventions for formatting\nconditionals and\
    \ loops: \n<pre>\nif ( cond ) {\n    code;\n}\n</pre>\nand:\n<pre>\nif ( cond\
    \ )\n{\n    code;\n}\n</pre>\nIn the first, I'd agree with him.  The opening <code>{</code>\
    \ is not that visible,\nso it's best to assume it's always there.  In the second,\
    \ however, I\n(and most of the people I've worked with) have no problem with omitting\n\
    the braces for a single statement.  (Provided, of course, that the\nindentation\
    \ is systematic and that you use this style consistently.\n(And a lot of very\
    \ good programmers, writing very readable code, omit\nthe braces even when formatting\
    \ the first way.)\n</li>\n<li><b>NO</b>. Things like <code>if ( NULL == ptr )</code>\
    \ are ugly enough to hinder\nreadability.  Write the comparisons intuitively.\
    \  (Which in many cases\nresults in the constant on the right.)  His 4 is bad\
    \ advice; anything\nwhich makes the code unnatural makes it less readable.\n</li>\n\
    <li><b>NO</b>.  Anything but <code>int</code> is reserved for special cases. \
    \ To\nexperienced C and C++ programmers, the use of <code>unsigned</code> signals\
    \ bit\noperators.  C++ doesn't have a real cardinal type (or any other\neffective\
    \ subrange type); <code>unsigned</code> doesn't work for numeric values,\nbecause\
    \ of the promotion rules.  Numerical values on which no\narithmetic operations\
    \ would make sense, like serial numbers, could\npresumably be <code>unsigned</code>.\
    \  I'd argue against it, however, because it\nsends the wrong message: bitwise\
    \ operations don't make sense either.\nThe basic rule is that integral types are\
    \ <code>int</code>, _unless_ there is a\nsignificant reason for using another\
    \ type.\n</li>\n<li><b>NO</b>.  Doing this systematically is misleading, and doesn't\
    \ actually\nprotect against anything.  In strict OO code, <code>delete this;</code>\
    \ is often\nthe most frequent case (and you can't set <code>this</code> to <code>NULL</code>),\
    \ and\notherwise, most <code>delete</code> are in destructors, so you can't access\
    \ the\npointer later anyway.  And setting it to <code>NULL</code> doesn't do anything\n\
    about any other pointers floating around.  Setting the pointer\nsystematically\
    \ to <code>NULL</code> gives a false sense of security, and doesn't\nreally buy\
    \ you anything.\n</li>\n</ol>\n<p>Look at the code in any of the typical references.\
    \ Stroustrup violates\nevery rule you've given except for the first, for example.</p>\n\
    <p>I'd suggest that you find another lecturer.  One who actually knows what\n\
    he's talking about.</p>\n</div>"
- - C++ Virtual/Pure Virtual Explained
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>From <a href=\"https://en.wikipedia.org/wiki/Virtual_function\"\
    \ rel=\"noreferrer\">Wikipedia's Virtual function</a>\n...</p>\n<blockquote>\n\
    <p>In object-oriented programming, in languages such as C++, and Object Pascal,\
    \ a virtual function or virtual method is an inheritable and overridable function\
    \ or method for which dynamic dispatch is facilitated. This concept is an important\
    \ part of the (runtime) polymorphism portion of object-oriented programming (OOP).\
    \ In short, a virtual function defines a target function to be executed, but the\
    \ target might not be known at compile time.</p>\n</blockquote>\n<p>Unlike a non-virtual\
    \ function, when a virtual function is overridden the most-derived version is\
    \ used at all levels of the class hierarchy, rather than just the level at which\
    \ it was created. Therefore if one method of the base class <em>calls</em> a virtual\
    \ method, the version defined in the derived class will be used instead of the\
    \ version defined in the base class. </p>\n<p>This is in contrast to non-virtual\
    \ functions, which can still be overridden in a derived class, but the \"new\"\
    \ version will only be used by the derived class and below, but will not change\
    \ the functionality of the base class at all.</p>\n<p>whereas..</p>\n<blockquote>\n\
    <p>A pure virtual function or pure virtual method is a virtual function that is\
    \ required to be implemented by a derived class if the derived class is not abstract.</p>\n\
    </blockquote>\n<p>When a pure virtual method exists, the class is \"abstract\"\
    \ and can not be instantiated on its own. Instead, a derived class that implements\
    \ the pure-virtual method(s) must be used. A pure-virtual isn't defined in the\
    \ base-class at all, so a derived class <em>must</em> define it, or that derived\
    \ class is also abstract, and can not be instantiated. Only a class that has no\
    \ abstract methods can be instantiated.</p>\n<p>A virtual provides a way to override\
    \ the functionality of the base class, and a pure-virtual <em>requires</em> it.</p>\n\
    </div>"
- - C++ Virtual/Pure Virtual Explained
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I'd like to comment on Wikipedia's\
    \ definition of virtual, as repeated by several here. [At the time this answer\
    \ was written,] Wikipedia defined a virtual method as one that can be overridden\
    \ in subclasses. [Fortunately, Wikipedia has been edited since, and it now explains\
    \ this correctly.] That is incorrect: any method, not just virtual ones, can be\
    \ overridden in subclasses. What virtual does is to give you polymorphism, that\
    \ is, the <strong>ability to select at run-time the most-derived override of a\
    \ method</strong>.</p>\n<p>Consider the following code:</p>\n<pre><code>#include\
    \ &lt;iostream&gt;\nusing namespace std;\n\nclass Base {\npublic:\n    void NonVirtual()\
    \ {\n        cout &lt;&lt; \"Base NonVirtual called.\\n\";\n    }\n    virtual\
    \ void Virtual() {\n        cout &lt;&lt; \"Base Virtual called.\\n\";\n    }\n\
    };\nclass Derived : public Base {\npublic:\n    void NonVirtual() {\n        cout\
    \ &lt;&lt; \"Derived NonVirtual called.\\n\";\n    }\n    void Virtual() {\n \
    \       cout &lt;&lt; \"Derived Virtual called.\\n\";\n    }\n};\n\nint main()\
    \ {\n    Base* bBase = new Base();\n    Base* bDerived = new Derived();\n\n  \
    \  bBase-&gt;NonVirtual();\n    bBase-&gt;Virtual();\n    bDerived-&gt;NonVirtual();\n\
    \    bDerived-&gt;Virtual();\n}\n</code></pre>\n<p>What is the output of this\
    \ program?</p>\n<pre><code>Base NonVirtual called.\nBase Virtual called.\nBase\
    \ NonVirtual called.\nDerived Virtual called.\n</code></pre>\n<p>Derived overrides\
    \ every method of Base: not just the virtual one, but also the non-virtual.</p>\n\
    <p>We see that when you have a Base-pointer-to-Derived (bDerived), calling NonVirtual\
    \ calls the Base class implementation. This is resolved at compile-time: the compiler\
    \ sees that bDerived is a Base*, that NonVirtual is not virtual, so it does the\
    \ resolution on class Base.</p>\n<p>However, calling Virtual calls the Derived\
    \ class implementation. Because of the keyword virtual, the selection of the method\
    \ happens at <em>run-time</em>, not compile-time. What happens here at compile-time\
    \ is that the compiler sees that this is a Base*, and that it's calling a virtual\
    \ method, so it insert a call to the vtable instead of class Base. This vtable\
    \ is instantiated at run-time, hence the run-time resolution to the most-derived\
    \ override.</p>\n<p>I hope this wasn't too confusing. In short, any method can\
    \ be overridden, but only virtual methods give you polymorphism, that is, run-time\
    \ selection of the most derived override. In practice, however, overriding a non-virtual\
    \ method is considered bad practice and rarely used, so many  people (including\
    \ whoever wrote that Wikipedia article) think that only virtual methods can be\
    \ overridden.</p>\n</div>"
- - C++ Virtual/Pure Virtual Explained
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The virtual keyword gives C++\
    \ its' ability to support polymorphism. When you have a pointer to an object of\
    \ some class such as:</p>\n<pre><code>class Animal\n{\n  public:\n    virtual\
    \ int GetNumberOfLegs() = 0;\n};\n\nclass Duck : public Animal\n{\n  public:\n\
    \     int GetNumberOfLegs() { return 2; }\n};\n\nclass Horse : public Animal\n\
    {\n  public:\n     int GetNumberOfLegs() { return 4; }\n};\n\nvoid SomeFunction(Animal\
    \ * pAnimal)\n{\n  cout &lt;&lt; pAnimal-&gt;GetNumberOfLegs();\n}\n</code></pre>\n\
    <p>In this (silly) example, the GetNumberOfLegs() function returns the appropriate\
    \ number based on the class of the object that it is called for.</p>\n<p>Now,\
    \ consider the function 'SomeFunction'. It doesn't care what type of animal object\
    \ is passed to it, as long as it is derived from Animal. The compiler will automagically\
    \ cast any Animal-derived class to a Animal as it is a base class.</p>\n<p>If\
    \ we do this:</p>\n<pre><code>Duck d;\nSomeFunction(&amp;d);\n</code></pre>\n\
    <p>it'd output '2'. If we do this:</p>\n<pre><code>Horse h;\nSomeFunction(&amp;h);\n\
    </code></pre>\n<p>it'd output '4'. We can't do this:</p>\n<pre><code>Animal a;\n\
    SomeFunction(&amp;a);\n</code></pre>\n<p>because it won't compile due to the GetNumberOfLegs()\
    \ virtual function being pure, which means it must be implemented by deriving\
    \ classes (subclasses).</p>\n<p>Pure Virtual Functions are mostly used to define:</p>\n\
    <p>a) abstract classes</p>\n<p>These are base classes where you have to derive\
    \ from them and then implement the pure virtual functions.</p>\n<p>b) interfaces</p>\n\
    <p>These are 'empty' classes where all functions are pure virtual and hence you\
    \ have to derive and then implement all of the functions.</p>\n</div>"
- - Compiling C++11 with g++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Flags (or compiler options) are\
    \ nothing but ordinary command line arguments passed to the compiler executable.</p>\n\
    <p>Assuming you are invoking g++ from the command line (terminal):</p>\n<p><code>$\
    \ g++ -std=c++11 your_file.cpp -o your_program</code></p>\n<p>or</p>\n<p><code>$\
    \ g++ -std=c++0x your_file.cpp -o your_program</code></p>\n<p>if the above doesn't\
    \ work.</p>\n</div>"
- - Compiling C++11 with g++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can check your <code>g++</code>\
    \ by command:</p>\n<pre><code>which g++\ng++ --version\n</code></pre>\n<p>this\
    \ will tell you which complier is currently it is pointing.</p>\n<p>To switch\
    \ to <code>g++</code> 4.7 (assuming that you have installed it in your machine),run:</p>\n\
    <pre><code>sudo update-alternatives --config gcc\n\nThere are 2 choices for the\
    \ alternative gcc (providing /usr/bin/gcc).\n\n  Selection    Path           \
    \   Priority   Status\n------------------------------------------------------------\n\
    \  0            /usr/bin/gcc-4.6   60        auto mode\n  1            /usr/bin/gcc-4.6\
    \   60        manual mode\n* 2            /usr/bin/gcc-4.7   40        manual\
    \ mode\n</code></pre>\n<p>Then select <code>2</code> as selection(My machine already\
    \ pointing to <code>g++</code> 4.7,so the *)</p>\n<p>Once you switch the complier\
    \ then again run <code>g++ --version</code> to check the switching has happened\
    \ correctly.</p>\n<p>Now compile your program with </p>\n<pre><code>g++ -std=c++11\
    \ your_file.cpp -o main\n</code></pre>\n</div>"
- - Compiling C++11 with g++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Your ubuntu definitely has a\
    \ sufficiently recent version of g++. The flag to use is <code>-std=c++0x</code>.</p>\n\
    </div>"
- - What is the easiest way to make a C++ program crash?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The <code>abort()</code> function\
    \ is probably your best bet. It's part of the C standard library, and is defined\
    \ as \"causing abnormal program termination\" (e.g, a fatal error or crash).</p>\n\
    </div>"
- - What is the easiest way to make a C++ program crash?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Try:</p>\n<pre><code>raise(SIGSEGV);\
    \  // simulates a standard crash when access invalid memory\n                \
    \ // ie anything that can go wrong with pointers.\n</code></pre>\n<p>Found in:\
    \ </p>\n<pre><code>#include &lt;signal.h&gt;\n</code></pre>\n</div>"
- - What is the easiest way to make a C++ program crash?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Dividing by zero will crash the\
    \ application:</p>\n<pre><code>int main()\n{\n    return 1 / 0;\n}\n</code></pre>\n\
    </div>"
- - Do I need to explicitly call the base virtual destructor?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>No, destructors are called automatically\
    \ in the reverse order of construction. (Base classes last).  Do not call base\
    \ class destructors.</p>\n</div>"
- - Do I need to explicitly call the base virtual destructor?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>No you don't need to call the\
    \ base destructor, a base destructor is always called for you by the derived destructor.\
    \   <a href=\"https://stackoverflow.com/questions/654428/what-is-the-order-in-which-the-destructors-and-the-constructors-are-called-in-c/654432#654432\"\
    >Please see my related answer here for order of destruction</a>. </p>\n<p>To understand\
    \ why you want a virtual destructor in the base class, please see the code below:</p>\n\
    <pre><code>class B\n{\npublic:\n    virtual ~B()\n    {\n        cout&lt;&lt;\"\
    B destructor\"&lt;&lt;endl;\n    }\n};\n\n\nclass D : public B\n{\npublic:\n \
    \   virtual ~D()\n    {\n        cout&lt;&lt;\"D destructor\"&lt;&lt;endl;\n \
    \   }\n};\n</code></pre>\n<p>When you do:</p>\n<pre><code>B *pD = new D();\ndelete\
    \ pD;\n</code></pre>\n<p>Then if you did not have a virtual destructor in B, only\
    \ ~B() would be called.  But since you have a virtual destructor, first ~D() will\
    \ be called, then ~B().</p>\n</div>"
- - Do I need to explicitly call the base virtual destructor?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>What the others said, but also\
    \ note that you do not have to declare the destructor virtual in the derived class.\
    \ Once you declare a destructor virtual, as you do in the base class, all derived\
    \ destructors will be virtual whether you declare them so or not. In other words:</p>\n\
    <pre><code>struct A {\n   virtual ~A() {}\n};\n\nstruct B : public A {\n   virtual\
    \ ~B() {}   // this is virtual\n};\n\nstruct C : public A {\n   ~C() {}      \
    \    // this is virtual too\n};\n</code></pre>\n</div>"
- - Struct Constructor in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In C++ the only difference between\
    \ a <code>class</code> and a <code>struct</code> is that members and base classes\
    \ are private by default in classes, whereas they are public by default in structs.\
    \ </p>\n<p>So structs can have constructors, and the syntax is the same as for\
    \ classes.</p>\n</div>"
- - Struct Constructor in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>struct TestStruct {\n\
    \        int id;\n        TestStruct() : id(42)\n        {\n        }\n};\n</code></pre>\n\
    </div>"
- - Struct Constructor in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Yes, but if you have your structure\
    \ in a union then you cannot.  It is the same as a class.</p>\n<pre><code>struct\
    \ Example\n{\n   unsigned int mTest;\n   Example()\n   {\n   }\n};\n</code></pre>\n\
    <p>Unions will not allow constructors in the structs.  You can make a constructor\
    \ on the union though. <a href=\"https://stackoverflow.com/questions/321351/initializing-a-union-with-a-non-trivial-constructor\"\
    >This question relates to non-trivial constructors in unions.</a></p>\n</div>"
- - '#pragma once vs include guards?'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I don't think it will make a\
    \ significant difference in compile time but <code>#pragma once</code> is very\
    \ well supported across compilers but not actually part of the standard.  The\
    \ preprocessor may be a little faster with it as it is more simple to understand\
    \ your exact intent.</p>\n<p><code>#pragma once</code> is less prone to making\
    \ mistakes and it is less code to type.</p>\n<p>To speed up compile time more\
    \ just forward declare instead of including in .h files when you can. </p>\n<p>I\
    \ prefer to use <code>#pragma once</code>.</p>\n<p>See this <a href=\"http://en.wikipedia.org/wiki/Pragma_once\"\
    \ rel=\"noreferrer\">wikipedia article about the possibility of using both</a>.\
    \ </p>\n</div>"
- - '#pragma once vs include guards?'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I just wanted to add to this\
    \ discussion that I am just compiling on VS and GCC, and used to use include guards.\
    \ I have now switched to <code>#pragma once</code>, and the only reason for me\
    \ is not performance or portability or standard as I don't really care what is\
    \ standard as long as VS and GCC support it, and that is that:</p>\n<p><strong><code>#pragma\
    \ once</code> reduces possibilities for bugs.</strong></p>\n<p>It is all too easy\
    \ to copy and paste a header file to another header file, modify it to suit ones\
    \ needs, and forget to change the name of the include guard. Once both are included,\
    \ it takes you a while to track down the error, as the error messages aren't necessarily\
    \ clear.</p>\n</div>"
- - '#pragma once vs include guards?'
  - "<div class=\"post-text\" itemprop=\"text\">\n<h2><code>#pragma once</code> has\
    \ <em>unfixable</em> bugs. It should never be used.</h2>\n<p>If your <code>#include</code>\
    \ search path is sufficiently complicated, the compiler may be unable to tell\
    \ the difference between two headers with the same basename (e.g. <code>a/foo.h</code>\
    \ and <code>b/foo.h</code>), so a <code>#pragma once</code> in one of them will\
    \ suppress <em>both</em>.  It may also be unable to tell that two different relative\
    \ includes (e.g. <code>#include \"foo.h\"</code> and <code>#include \"../a/foo.h\"\
    </code> refer to the same file, so <code>#pragma once</code> will fail to suppress\
    \ a redundant include when it should have.</p>\n<p>This also affects the compiler's\
    \ ability to avoid rereading files with <code>#ifndef</code> guards, but that\
    \ is just an optimization.  With <code>#ifndef</code> guards, the compiler can\
    \ safely read any file it isn't <em>sure</em> it has seen already; if it's wrong,\
    \ it just has to do some extra work.  As long as no two headers define the same\
    \ guard macro, the code will compile as expected.  And if two headers <em>do</em>\
    \ define the same guard macro, the programmer can go in and change one of them.</p>\n\
    <p><code>#pragma once</code> has no such safety net -- if the compiler is wrong\
    \ about the identity of a header file, <em>either way</em>, the program will fail\
    \ to compile.  If you hit this bug, your only options are to stop using <code>#pragma\
    \ once</code>, or to rename one of the headers.  The names of headers are part\
    \ of your API contract, so renaming is probably not an option.</p>\n<p>(The short\
    \ version of why this is <em>unfixable</em> is that neither the Unix nor the Windows\
    \ filesystem API offer any mechanism that <em>guarantees</em> to tell you whether\
    \ two absolute pathnames refer to the same file.  If you are under the impression\
    \ that inode numbers can be used for that, sorry, you're wrong.)</p>\n<p>(Historical\
    \ note: The only reason I didn't rip <code>#pragma once</code> and <code>#import</code>\
    \ out of GCC when I had the authority to do so, ~12 years ago, was Apple's system\
    \ headers relying on them.  In retrospect, that shouldn't have stopped me.)</p>\n\
    <p>(Since this has now come up twice in the comment thread: The GCC developers\
    \ did put quite a bit of effort into making <code>#pragma once</code> as reliable\
    \ as possible; see <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=11569\"\
    \ rel=\"noreferrer\">GCC bug report 11569</a>.  However, the implementation in\
    \ current versions of GCC <em>can still fail</em> under plausible conditions,\
    \ such as build farms suffering from clock skew.  I do not know what any other\
    \ compiler's implementation is like, but I would not expect anyone to have done\
    \ <em>better</em>.)</p>\n</div>"
- - What is the usefulness of `enable_shared_from_this`?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>It enables you to get a valid\
    \ <code>shared_ptr</code> instance to <code>this</code>, when all you have is\
    \ <code>this</code>. Without it, you would have no way of getting a <code>shared_ptr</code>\
    \ to <code>this</code>, unless you already had one as a member. This example from\
    \ the <a href=\"http://www.boost.org/doc/libs/1_38_0/libs/smart_ptr/enable_shared_from_this.html\"\
    \ rel=\"noreferrer\">boost documentation for enable_shared_from_this</a>:</p>\n\
    <pre><code>class Y: public enable_shared_from_this&lt;Y&gt;\n{\npublic:\n\n  \
    \  shared_ptr&lt;Y&gt; f()\n    {\n        return shared_from_this();\n    }\n\
    }\n\nint main()\n{\n    shared_ptr&lt;Y&gt; p(new Y);\n    shared_ptr&lt;Y&gt;\
    \ q = p-&gt;f();\n    assert(p == q);\n    assert(!(p &lt; q || q &lt; p)); //\
    \ p and q must share ownership\n}\n</code></pre>\n<p>The method f() returns a\
    \ valid <code>shared_ptr</code>, even though it had no member instance. Note that\
    \ you cannot simply do this:</p>\n<pre><code>class Y: public enable_shared_from_this&lt;Y&gt;\n\
    {\npublic:\n\n    shared_ptr&lt;Y&gt; f()\n    {\n        return shared_ptr&lt;Y&gt;(this);\n\
    \    }\n}\n</code></pre>\n<p>The shared pointer that this returned will have a\
    \ different reference count from the \"proper\" one, and one of them will end\
    \ up losing and holding a dangling reference when the object is deleted.</p>\n\
    <p><code>enable_shared_from_this</code> has become part of C++ 11 standard. You\
    \ can also get it from there as well as from boost.</p>\n</div>"
- - What is the usefulness of `enable_shared_from_this`?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>from Dr Dobbs article on weak\
    \ pointers, I think this example is easier to understand (source: <a href=\"http://drdobbs.com/cpp/184402026\"\
    \ rel=\"noreferrer\">http://drdobbs.com/cpp/184402026</a>):</p>\n<p>...code like\
    \ this won't work correctly:</p>\n<pre><code>int *ip = new int;\nshared_ptr&lt;int&gt;\
    \ sp1(ip);\nshared_ptr&lt;int&gt; sp2(ip);\n</code></pre>\n<p>Neither of the two\
    \ <code>shared_ptr</code> objects knows about the other, so both will try to release\
    \ the resource when they are destroyed. That usually leads to problems. </p>\n\
    <p>Similarly, if a member function needs a <code>shared_ptr</code> object that\
    \ owns the object that it's being called on, it can't just create an object on\
    \ the fly:</p>\n<pre><code>struct S\n{\n  shared_ptr&lt;S&gt; dangerous()\n  {\n\
    \     return shared_ptr&lt;S&gt;(this);   // don't do this!\n  }\n};\n\nint main()\n\
    {\n   shared_ptr&lt;S&gt; sp1(new S);\n   shared_ptr&lt;S&gt; sp2 = sp1-&gt;dangerous();\n\
    \   return 0;\n}\n</code></pre>\n<p>This code has the same problem as the earlier\
    \ example, although in a more subtle form. When it is constructed, the <code>shared_pt</code>r\
    \ object <code>sp1</code> owns the newly allocated resource. The code inside the\
    \ member function <code>S::dangerous</code> doesn't know about that <code>shared_ptr</code>\
    \ object, so the <code>shared_ptr</code> object that it returns is distinct from\
    \ <code>sp1</code>. Copying the new <code>shared_ptr</code> object to <code>sp2</code>\
    \ doesn't help; when <code>sp2</code> goes out of scope, it will release the resource,\
    \ and when <code>sp1</code> goes out of scope, it will release the resource again.</p>\n\
    <p>The way to avoid this problem is to use the class template <code>enable_shared_from_this</code>.\
    \ The template takes one template type argument, which is the name of the class\
    \ that defines the managed resource. That class must, in turn, be derived publicly\
    \ from the template; like this:</p>\n<pre><code>struct S : enable_shared_from_this&lt;S&gt;\n\
    {\n  shared_ptr&lt;S&gt; not_dangerous()\n  {\n    return shared_from_this();\n\
    \  }\n};\n\nint main()\n{\n   shared_ptr&lt;S&gt; sp1(new S);\n   shared_ptr&lt;S&gt;\
    \ sp2 = sp1-&gt;not_dangerous();\n   return 0;\n}\n</code></pre>\n<p>When you\
    \ do this, keep in mind that the object on which you call <code>shared_from_this</code>\
    \ must be owned by a <code>shared_ptr</code> object. This won't work:</p>\n<pre><code>int\
    \ main()\n{\n   S *p = new S;\n   shared_ptr&lt;S&gt; sp2 = p-&gt;not_dangerous();\
    \     // don't do this\n}\n</code></pre>\n</div>"
- - What is the usefulness of `enable_shared_from_this`?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Here's my explanation, from a\
    \ nuts and bolts perspective (top answer didn't 'click' with me). *Note that this\
    \ is the result of investigating the source for shared_ptr and enable_shared_from_this\
    \ that comes with Visual Studio 2012. Perhaps other compilers implement enable_shared_from_this\
    \ differently...*</p>\n<p><code>enable_shared_from_this&lt;T&gt;</code> adds a\
    \ private <code>weak_ptr&lt;T&gt;</code> instance to <code>T</code> which holds\
    \ the '<strong>one true reference count</strong>' for the instance of <code>T</code>.</p>\n\
    <p>So, when you first create a <code>shared_ptr&lt;T&gt;</code> onto a new T*,\
    \ that T*'s internal weak_ptr gets initialized with a refcount of 1. The new <code>shared_ptr</code>\
    \ basically backs onto this <code>weak_ptr</code>.</p>\n<p><code>T</code> can\
    \ then, in its methods, call <code>shared_from_this</code> to obtain an instance\
    \ of <code>shared_ptr&lt;T&gt;</code> that <strong>backs onto the same internally\
    \ stored reference count</strong>. This way, you always have one place where <code>T*</code>'s\
    \ ref-count is stored rather than having multiple <code>shared_ptr</code> instances\
    \ that don't know about each other, and each think they are the <code>shared_ptr</code>\
    \ that is in charge of ref-counting <code>T</code> and deleting it when their\
    \ ref-count reaches zero.</p>\n</div>"
- - Deoptimizing a program for the pipeline in Intel Sandybridge-family CPUs
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Important background reading:\
    \ <strong><a href=\"http://agner.org/optimize/\" rel=\"noreferrer\">Agner Fog's\
    \ microarch pdf</a></strong>, and probably also Ulrich Drepper's <a href=\"http://www.akkadia.org/drepper/cpumemory.pdf\"\
    \ rel=\"noreferrer\">What Every Programmer Should Know About Memory</a>.  See\
    \ also the other links in the <a class=\"post-tag\" href=\"/questions/tagged/x86\"\
    \ rel=\"tag\" title=\"show questions tagged 'x86'\">x86</a> tag wiki, especially\
    \ Intel's optimization manuals, and David Kanter's <a href=\"http://www.realworldtech.com/haswell-cpu/\"\
    \ rel=\"noreferrer\">analysis of the Haswell microarchitecture, with diagrams</a>.</p>\n\
    <p>Very cool assignment; much better than the ones I've seen where <a href=\"\
    https://stackoverflow.com/a/32001196/224132\">students were asked to optimize\
    \ some code for <code>gcc -O0</code></a>, learning a bunch of tricks that don't\
    \ matter in real code.  In this case, you're being asked to learn about the CPU\
    \ pipeline and use that to guide your de-optimization efforts, not just blind\
    \ guessing.  <strong>The most fun part of this one is justifying each pessimization\
    \ with \"diabolical incompetence\", not intentional malice.</strong></p>\n<hr/>\n\
    <p><strong>Problems with the assignment wording and code</strong>:</p>\n<p>The\
    \ uarch-specific options for this code are limited.  It doesn't use any arrays,\
    \ and much of the cost is calls to <code>exp</code>/<code>log</code> library functions.\
    \  There isn't an obvious way to have more or less instruction-level parallelism,\
    \ and the loop-carried dependency chain is very short.</p>\n<p><strong>I'd love\
    \ to see an answer that attempted to get a slowdown from re-arranging the expressions\
    \ to change the dependencies, to reduce <a href=\"https://en.wikipedia.org/wiki/Instruction-level_parallelism\"\
    \ rel=\"noreferrer\">ILP</a> just from dependencies (hazards).</strong>  I haven't\
    \ attempted it.</p>\n<p>Intel Sandybridge-family CPUs are aggressive out-of-order\
    \ designs that spend lots of transistors and power to find parallelism and avoid\
    \ hazards (dependencies) that would trouble <a href=\"https://en.wikipedia.org/wiki/Classic_RISC_pipeline\"\
    \ rel=\"noreferrer\">a classic RISC in-order pipeline</a>.  Usually the only traditional\
    \ hazards that slow it down are RAW \"true\" dependencies that cause throughput\
    \ to be limited by latency.</p>\n<p><strong><a href=\"https://en.wikipedia.org/wiki/Hazard_(computer_architecture)\"\
    \ rel=\"noreferrer\">WAR and WAW hazards</a> for registers are pretty much not\
    \ an issue, thanks to register renaming</strong>.  (except for <code>popcnt</code>/<code>lzcnt</code>/<code>tzcnt</code>,\
    \ which have a <a href=\"https://stackoverflow.com/questions/25078285/replacing-a-32-bit-loop-count-variable-with-64-bit-introduces-crazy-performance/25089720#25089720\"\
    >false dependency their destination on Intel CPUs</a>, even though it's write-only.\
    \  i.e. WAW being handled as a RAW hazard + a write).  For memory ordering, modern\
    \ CPUs use <a href=\"https://en.wikipedia.org/wiki/Memory_disambiguation#Avoiding_WAR_and_WAW_dependencies\"\
    \ rel=\"noreferrer\">store queues to delay commit into cache until retirement,\
    \ also avoiding WAR and WAW hazards</a>.</p>\n<p><a href=\"https://stackoverflow.com/q/45113527\"\
    >Why does mulss take only 3 cycles on Haswell, different from Agner's instruction\
    \ tables?</a> has more about register renaming and hiding FMA latency in an FP\
    \ dot product loop.</p>\n<hr/>\n<p><strong>The \"i7\" brand-name was introduced\
    \ with Nehalem (successor to Core2)</strong>, and some Intel manuals even say\
    \ \"Core i7\" when they seem to mean Nehalem, but they kept the \"i7\" branding\
    \ <a href=\"https://en.wikipedia.org/wiki/Sandy_Bridge\" rel=\"noreferrer\">for\
    \ Sandybridge</a> and later microarchitectures.  <a href=\"http://www.realworldtech.com/sandy-bridge/\"\
    \ rel=\"noreferrer\">SnB is when the P6-family evolved into a new species, the\
    \ SnB-family</a>.  In many ways, Nehalem has more in common with Pentium III than\
    \ with Sandybridge (e.g. register read stalls and ROB-read stalls don't happen\
    \ on SnB, because it changed to using a physical register file.  Also a uop cache\
    \ and a different internal uop format).  <strong>The term \"i7 architecture\"\
    \ is not useful</strong>, because it makes little sense to group the SnB-family\
    \ with Nehalem but not Core2.  (Nehalem did introduce the shared inclusive L3\
    \ cache architecture for connecting multiple cores together, though.  And also\
    \ integrated GPUs.  So chip-level, the naming makes more sense.)</p>\n<hr/>\n\
    <h1>Summary of the good ideas that diabolical incompetence can justify</h1>\n\
    <p>Even the diabolically incompetent are unlikely to add obviously useless work\
    \ or an infinite loop, and making a mess with C++/Boost classes is beyond the\
    \ scope of the assignment.</p>\n<ul>\n<li>Multi-thread with a single <em>shared</em>\
    \ <code>std::atomic&lt;uint64_t&gt;</code> loop counter, so the right total number\
    \ of iterations happen.  Atomic uint64_t is especially bad with <code>-m32 -march=i586</code>.\
    \  For bonus points, arrange for it to be misaligned, and crossing a page boundary\
    \ with an uneven split (not 4:4).</li>\n<li><strong>False sharing</strong> for\
    \ some other non-atomic variable -&gt; memory-order mis-speculation pipeline clears,\
    \ as well as extra cache misses.</li>\n<li>Instead of using <code>-</code> on\
    \ FP variables, XOR the high byte with 0x80 to flip the sign bit, causing <strong>store-forwarding\
    \ stalls</strong>.</li>\n<li>Time each iteration independently, with something\
    \ even heavier than <code>RDTSC</code>.   e.g. <code>CPUID</code> / <code>RDTSC</code>\
    \ or a time function that makes a system call.  Serializing instructions are inherently\
    \ pipeline-unfriendly.</li>\n<li>Change multiplies by constants to divides by\
    \ their reciprocal (\"for ease of reading\").  <strong>div is slow and not fully\
    \ pipelined.</strong></li>\n<li>Vectorize the multiply/sqrt with AVX (SIMD), but\
    \ fail to use <code>vzeroupper</code> before calls to scalar math-library <code>exp()</code>\
    \ and <code>log()</code> functions, causing <strong>AVX&lt;-&gt;SSE transition\
    \ stalls</strong>.</li>\n<li>Store the RNG output in a linked list, or in arrays\
    \ which you traverse out of order.  Same for the result of each iteration, and\
    \ sum at the end.</li>\n</ul>\n<p>Also covered in this answer but excluded from\
    \ the summary: suggestions that would be just as slow on a non-pipelined CPU,\
    \ or that don't seem to be justifiable even with diabolical incompetence.  e.g.\
    \ many gimp-the-compiler ideas that produce obviously different / worse asm.</p>\n\
    <hr/>\n<h2>Multi-thread badly</h2>\n<p>Maybe use OpenMP to multi-thread loops\
    \ with very few iterations, with way more overhead than speed gain.  Your monte-carlo\
    \ code has enough parallelism to actually get a speedup, though, esp. if we succeed\
    \ at making each iteration slow.  (Each thread computes a partial <code>payoff_sum</code>,\
    \ added at the end).  <code>#omp parallel</code> on that loop would probably be\
    \ an optimization, not a pessimization.</p>\n<p><strong>Multi-thread but force\
    \ both threads to share the same loop counter (with <code>atomic</code> increments\
    \ so the total number of iterations is correct).</strong> This seems diabolically\
    \ logical.  This means using a <code>static</code> variable as a loop counter.\
    \  This justifies use of <code>atomic</code> for loop counters, and creates actual\
    \ <a href=\"http://www.artima.com/cppsource/how_to_go_slow.html\" rel=\"noreferrer\"\
    >cache-line ping-ponging</a> (as long as the threads don't run on the same physical\
    \ core with hyperthreading; that might not be <em>as</em> slow).  Anyway, this\
    \ is <em>much</em> slower than the un-contended case for <code>lock inc</code>.\
    \  And <code>lock cmpxchg8b</code> to atomically increment a contended <code>uint64_t</code>\
    \ on a 32bit system will have to retry in a loop instead of having the hardware\
    \ arbitrate an atomic <code>inc</code>.</p>\n<p>Also create <strong>false sharing</strong>,\
    \ where multiple threads keep their private data (e.g. RNG state) in different\
    \ bytes of the same cache line.  <a href=\"https://software.intel.com/en-us/articles/avoiding-and-identifying-false-sharing-among-threads/\"\
    \ rel=\"noreferrer\">(Intel tutorial about it, including perf counters to look\
    \ at)</a>.  <strong>There's a microarchitecture-specific aspect to this</strong>:\
    \  Intel CPUs speculate on memory mis-ordering <em>not</em> happening, and there's\
    \ a <a href=\"http://www.jaist.ac.jp/iscenter-new/mpc/altix/altixdata/opt/intel/vtune/doc/users_guide/mergedProjects/analyzer_ec/mergedProjects/reference_olh/pentium4_hh/er4/memory_order_machine_clear_performance_impact.htm\"\
    \ rel=\"noreferrer\">memory-order machine-clear perf event to detect this, at\
    \ least on P4</a>.  The penalty might not be as large on Haswell.  As that link\
    \ points out, a <code>lock</code>ed instruction assumes this will happen, avoiding\
    \ mis-speculation.  A normal load speculates that other cores won't invalidate\
    \ a cache line between when the load executes and when it retires in program-order\
    \ (<a href=\"http://www.felixcloutier.com/x86/PAUSE.html\" rel=\"noreferrer\"\
    >unless you use <code>pause</code></a>).  True sharing without <code>lock</code>ed\
    \ instructions is usually a bug.  It would be interesting to compare a non-atomic\
    \ shared loop counter with the atomic case.  To really pessimize, keep the shared\
    \ atomic loop counter, and cause false sharing in the same or a different cache\
    \ line for some other variable.</p>\n<hr/>\n<h1>Random uarch-specific ideas:</h1>\n\
    <p>If you can introduce <strong>any unpredictable branches</strong>, that will\
    \ pessimize the code substantially.  Modern x86 CPUs have quite long pipelines,\
    \ so a mispredict costs ~15 cycles (when running from the uop cache).</p>\n<hr/>\n\
    <h3>Dependency chains:</h3>\n<p>I think this was one of the intended parts of\
    \ the assignment.</p>\n<p>Defeat the CPU's ability to exploit instruction-level\
    \ parallelism by choosing an order of operations that has one long dependency\
    \ chain instead of multiple short dependency chains.   Compilers aren't allowed\
    \ to change the order of operations for FP calculations unless you use <code>-ffast-math</code>,\
    \ because that can change the results (as discussed below).</p>\n<p>To really\
    \ make this effective, increase the length of a loop-carried dependency chain.\
    \  Nothing leaps out as obvious, though:  The loops as written have very short\
    \ loop-carried dependency chains: just an FP add. (3 cycles).  Multiple iterations\
    \ can have their calculations in-flight at once, because they can start well before\
    \ the <code>payoff_sum +=</code> at the end of the previous iteration.  (<code>log()</code>\
    \ and <code>exp</code> take many instructions, but not a lot more than <a href=\"\
    http://www.realworldtech.com/haswell-cpu/3/\" rel=\"noreferrer\">Haswell's out-of-order\
    \ window for finding parallelism: ROB size=192 fused-domain uops, and scheduler\
    \ size=60 unfused-domain uops</a>.  As soon as execution of the current iteration\
    \ progresses far enough to make room for instructions from the next iteration\
    \ to issue, any parts of it that have their inputs ready (i.e. independent/separate\
    \ dep chain) can start executing when older instructions leave the execution units\
    \ free (e.g. because they're bottlenecked on latency, not throughput.).</p>\n\
    <p>The RNG state will almost certainly be a longer loop-carried dependency chain\
    \ than the <code>addps</code>.</p>\n<hr/>\n<h3>Use slower/more FP operations (esp.\
    \ more division):</h3>\n<p>Divide by 2.0 instead of multiplying by 0.5, and so\
    \ on.  FP multiply is heavily pipelined in Intel designs, and has one per 0.5c\
    \ throughput on Haswell and later.  <strong>FP <code>divsd</code>/<code>divpd</code>\
    \ is only partially pipelined</strong>.  (Although Skylake has an impressive one\
    \ per 4c throughput for <code>divpd xmm</code>, with 13-14c latency, vs not pipelined\
    \ at all on Nehalem (7-22c)).</p>\n<p>The <code>do { ...; euclid_sq = x*x + y*y;\
    \  } while (euclid_sq &gt;= 1.0);</code> is clearly testing for a distance, so\
    \ clearly it would be proper to <code>sqrt()</code> it.  :P  (<code>sqrt</code>\
    \ is even slower than <code>div</code>).</p>\n<p>As @Paul Clayton suggests, rewriting\
    \ expressions with associative/distributive equivalents can introduce more work\
    \ (as long as you don't use <code>-ffast-math</code> to allow the compiler to\
    \ re-optimize).  <code>(exp(T*(r-0.5*v*v))</code> could become <code>exp(T*r -\
    \ T*v*v/2.0)</code>.  Note that while math on real numbers is associative, <a\
    \ href=\"https://stackoverflow.com/a/36526143/224132\">floating point math is\
    \ <em>not</em></a>, even without considering overflow/NaN (which is why <code>-ffast-math</code>\
    \ isn't on by default).  See <a href=\"https://stackoverflow.com/questions/37361145/deoptimizing-a-c-program/37362225?noredirect=1#comment62243542_37362225\"\
    >Paul's comment</a> for a very hairy nested <code>pow()</code> suggestion.</p>\n\
    <p>If you can scale the calculations down to very small numbers, then FP math\
    \ ops take <strong>~120 extra cycles to trap to microcode when an operation on\
    \ two normal numbers produces a denormal</strong>.  See Agner Fog's microarch\
    \ pdf for the exact numbers and details.  This is unlikely since you have a lot\
    \ of multiplies, so the scale factor would be squared and underflow all the way\
    \ to 0.0.  I don't see any way to justify the necessary scaling with incompetence\
    \ (even diabolical), only intentional malice.</p>\n<hr/>\n<h3>If you can use intrinsics\
    \ (<code>&lt;immintrin.h&gt;</code>)</h3>\n<p><a href=\"https://stackoverflow.com/questions/35516878/acquire-release-semantics-with-non-temporal-stores-on-x64#comment58847294_35571387\"\
    >Use <code>movnti</code> to evict your data from cache</a>.  Diabolical: it's\
    \ new and weakly-ordered, so that should let the CPU run it faster, right?  Or\
    \ see that linked question for a case where someone was in danger of doing exactly\
    \ this (for scattered writes where only some of the locations were hot).  <code>clflush</code>\
    \ is probably impossible without malice.</p>\n<p>Use integer shuffles between\
    \ FP math operations to cause bypass delays.</p>\n<p><strong><a href=\"https://software.intel.com/en-us/articles/intel-avx-state-transitions-migrating-sse-code-to-avx\"\
    \ rel=\"noreferrer\">Mixing SSE and AVX instructions without proper use of <code>vzeroupper</code>\
    \ causes large stalls in pre-Skylake</a></strong> (and a different penalty <a\
    \ href=\"http://www.agner.org/optimize/blog/read.php?i=415#477\" rel=\"noreferrer\"\
    >in Skylake</a>).  Even without that, vectorizing badly can be worse than scalar\
    \ (more cycles spent shuffling data into/out of vectors than saved by doing the\
    \ add/sub/mul/div/sqrt operations for 4 Monte-Carlo iterations at once, with 256b\
    \ vectors).  add/sub/mul execution units are fully pipelined and full-width, but\
    \ div and sqrt on 256b vectors aren't as fast as on 128b vectors (or scalars),\
    \ so the speedup isn't dramatic for <code>double</code>.</p>\n<p><code>exp()</code>\
    \ and <code>log()</code> don't have hardware support, so that part would require\
    \ extracting vector elements back to scalar and calling the library function separately,\
    \ then shuffling the results back into a vector.  libm is typically compiled to\
    \ only use SSE2, so will use the legacy-SSE encodings of scalar math instructions.\
    \  If your code uses 256b vectors and calls <code>exp</code> without doing a <code>vzeroupper</code>\
    \ first, then you stall.  After returning, an AVX-128 instruction like <code>vmovsd</code>\
    \ to set up the next vector element as an arg for <code>exp</code> will also stall.\
    \  And then <code>exp()</code> will stall again when it runs an SSE instruction.\
    \  <strong>This is exactly what happened <a href=\"https://stackoverflow.com/questions/21960229/unexpectedly-good-performance-with-openmp-parallel-for-loop\"\
    >in this question</a>, causing a 10x slowdown.</strong>  (Thanks @ZBoson).</p>\n\
    <p>See also <a href=\"https://news.ycombinator.com/item?id=11750294\" rel=\"noreferrer\"\
    >Nathan Kurz's experiments with Intel's math lib vs. glibc for this code</a>.\
    \  Future glibc will come with <a href=\"https://sourceware.org/glibc/wiki/libmvec\"\
    \ rel=\"noreferrer\">vectorized implementations of <code>exp()</code> and so on.</a></p>\n\
    <hr/>\n<p>If targeting pre-IvB, or esp. Nehalem, try to get gcc to cause partial-register\
    \ stalls with 16bit or 8bit operations followed by 32bit or 64bit operations.\
    \  In most cases, gcc will use <code>movzx</code> after an 8 or 16bit operation,\
    \ but <a href=\"https://stackoverflow.com/questions/37256507/gcc-inline-assembly-whats-wrong-with-the-dynamic-allocated-register-r-in-inp/37267621#37267621\"\
    >here's a case where gcc modifies <code>ah</code> and then reads <code>ax</code></a></p>\n\
    <hr/>\n<h2>With (inline) asm:</h2>\n<p>With (inline) asm, you could break the\
    \ uop cache: A 32B chunk of code that doesn't fit in three 6uop cache lines forces\
    \ a switch from the uop cache to the decoders.  An incompetent <code>ALIGN</code>\
    \ using many single-byte <code>nop</code>s instead of a couple long <code>nop</code>s\
    \ on a branch target inside the inner loop might do the trick.  Or put the alignment\
    \ padding after the label, instead of before. :P  This only matters if the frontend\
    \ is a bottleneck, which it won't be if we succeeded at pessimizing the rest of\
    \ the code.</p>\n<p>Use self-modifying code to trigger pipeline clears (aka machine-nukes).</p>\n\
    <p><a href=\"https://software.intel.com/en-us/forums/intel-performance-bottleneck-analyzer/topic/328256\"\
    \ rel=\"noreferrer\">LCP stalls</a> from 16bit instructions with immediates too\
    \ large to fit in 8 bits are unlikely to be useful.  The uop cache on SnB and\
    \ later means you only pay the decode penalty once.  On Nehalem (the first i7),\
    \ it might work for a loop that doesn't fit in the 28 uop loop buffer.  gcc will\
    \ sometimes generate such instructions, even with <code>-mtune=intel</code> and\
    \ when it could have used a 32bit instruction.</p>\n<hr/>\n<p><a href=\"https://stackoverflow.com/questions/12065721/why-isnt-rdtsc-a-serializing-instruction\"\
    >A common idiom for timing is <code>CPUID</code>(to serialize) then <code>RDTSC</code></a>.\
    \  Time every iteration separately with a <code>CPUID</code>/<code>RDTSC</code>\
    \ to make sure the <code>RDTSC</code> isn't reordered with earlier instructions,\
    \ which will slow things down a <em>lot</em>.  (In real life, the smart way to\
    \ time is to time all the iterations together, instead of timing each separately\
    \ and adding them up).</p>\n<hr/>\n<h1>Cause lots of cache misses and other memory\
    \ slowdowns</h1>\n<p>Use a <code>union { double d; char a[8]; }</code> for some\
    \ of your variables.   <a href=\"https://en.wikipedia.org/wiki/Memory_disambiguation#Store_to_load_forwarding\"\
    \ rel=\"noreferrer\"><strong>Cause a store-forwarding stall</strong></a> by doing\
    \ a narrow store (or Read-Modify-Write) to just one of the bytes.  (That wiki\
    \ article also covers a lot of other microarchitectural stuff for load/store queues).\
    \  e.g. <strong>flip the sign of a <code>double</code> using XOR 0x80 on just\
    \ the high byte</strong>, instead of a <code>-</code> operator.  The diabolically\
    \ incompetent developer may have heard that FP is slower than integer, and thus\
    \ try to do as much as possible using integer ops.  (A very good compiler targeting\
    \ FP math in SSE registers may possibly compile this to an <code>xorps</code>\
    \ with a constant in another xmm register, but the only way this isn't terrible\
    \ for x87 is if the compiler realizes that it's negating the value and replaces\
    \ the next add with a subtract.)</p>\n<hr/>\n<p>Use <code>volatile</code> if you're\
    \ compiling with <code>-O3</code> and not using <code>std::atomic</code>, to force\
    \ the compiler to actually store/reload all over the place.  Global variables\
    \ (instead of locals) will also force some stores/reloads, but <a href=\"http://preshing.com/20120930/weak-vs-strong-memory-models/\"\
    \ rel=\"noreferrer\">the C++ memory model's weak ordering</a> doesn't require\
    \ the compiler to spill/reload to memory all the time.</p>\n<p><strong>Replace\
    \ local vars with members of a big struct, so you can control the memory layout.</strong></p>\n\
    <p>Use arrays in the struct for padding (and storing random numbers, to justify\
    \ their existence).</p>\n<p>Choose your memory layout so <a href=\"https://stackoverflow.com/questions/37099454/force-to-l1-cache-miss\"\
    >everything goes into a different line in the same \"set\" in the L1 cache</a>.\
    \  It's only 8-way associative, i.e. each set has 8 \"ways\".  Cache lines are\
    \ 64B.</p>\n<p>Even better, <strong>put things exactly 4096B apart, since loads\
    \ have a false dependency on stores to different pages but with the same offset\
    \ within a page</strong>.  Aggressive out-of-order CPUs use <a href=\"https://en.wikipedia.org/wiki/Memory_disambiguation\"\
    \ rel=\"noreferrer\">Memory Disambiguation to figure out when loads and stores\
    \ can be reordered without changing the results</a>, and Intel's implementation\
    \ has false-positives that prevent loads from starting early.  Probably they only\
    \ check bits below the page offset, so the check can start before the TLB has\
    \ translated the high bits from a virtual page to a physical page.  As well as\
    \ Agner's guide, see <a href=\"https://stackoverflow.com/questions/7905760/matrix-multiplication-small-difference-in-matrix-size-large-difference-in-timi/7905949#7905949\"\
    >an answer from Stephen Canon</a>, and also a section near the end of @Krazy Glew's\
    \ answer on the same question.  (Andy Glew was one of the architects of Intel's\
    \ original P6 microarchitecture.)</p>\n<p>Use <code>__attribute__((packed))</code>\
    \ to let you mis-align variables so they span cache-line or even page boundaries.\
    \  (So a load of one <code>double</code> needs data from two cache-lines).  Misaligned\
    \ loads have no penalty in any Intel i7 uarch, except when crossing cache lines\
    \ and page lines.  <a href=\"http://www.agner.org/optimize/blog/read.php?i=415#423\"\
    \ rel=\"noreferrer\">Cache-line splits still take extra cycles</a>.  Skylake dramatically\
    \ reduces the penalty for page split loads, <a href=\"http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf#page=35\"\
    \ rel=\"noreferrer\">from 100 to 5 cycles. (Section 2.1.3)</a>.  Perhaps related\
    \ to being able to do two page walks in parallel.</p>\n<p><strong>A page-split\
    \ on an <code>atomic&lt;uint64_t&gt;</code> should be just about the worst case</strong>,\
    \ esp. if it's 5 bytes in one page and 3 bytes in the other page, or anything\
    \ other than 4:4.  Even splits down the middle are more efficient for cache-line\
    \ splits with 16B vectors on some uarches, IIRC.  Put everything in a <code>alignas(4096)\
    \ struct __attribute((packed))</code> (to save space, of course), including an\
    \ array for storage for the RNG results.  Achieve the misalignment by using <code>uint8_t</code>\
    \ or <code>uint16_t</code> for something before the counter.</p>\n<p>If you can\
    \ get the compiler to use indexed addressing modes, that will <a href=\"https://stackoverflow.com/questions/26046634/micro-fusion-and-addressing-modes/31027695#31027695\"\
    >defeat uop micro-fusion</a>.  Maybe by using <code>#define</code>s to replace\
    \ simple scalar variables with <code>my_data[constant]</code>.</p>\n<p>If you\
    \ can introduce an extra level of indirection, so load/store addresses aren't\
    \ known early, that can pessimize further.</p>\n<hr/>\n<h3>Traverse arrays in\
    \ non-contiguous order</h3>\n<p>I think we can come up with incompetent justification\
    \ for introducing an array in the first place:  It lets us separate the random\
    \ number generation from the random number use.  Results of each iteration could\
    \ also be stored in an array, to be summed later (with more diabolical incompetence).</p>\n\
    <p>For \"maximum randomness\", we could have a thread looping over the random\
    \ array writing new random numbers into it.  The thread consuming the random numbers\
    \ could generate a random index to load a random number from.  (There's some make-work\
    \ here, but microarchitecturally it helps for load-addresses to be known early\
    \ so any possible load latency can be resolved before the loaded data is needed.)\
    \  Having a reader and writer on different cores will cause memory-ordering mis-speculation\
    \ pipeline clears (as discussed earlier for the false-sharing case).</p>\n<p>For\
    \ maximum pessimization, loop over your array with a stride of 4096 bytes (i.e.\
    \ 512 doubles).  e.g. </p>\n<pre><code>for (int i=0 ; i&lt;512; i++)\n    for\
    \ (int j=i ; j&lt;UPPER_BOUND ; j+=512)\n        monte_carlo_step(rng_array[j]);\n\
    </code></pre>\n<p>So the access pattern is 0, 4096, 8192, ...,<br/>\n8, 4104,\
    \ 8200, ...<br/>\n16, 4112, 8208, ...</p>\n<p>This is what you'd get for accessing\
    \ a 2D array like <code>double rng_array[MAX_ROWS][512]</code> in the wrong order\
    \ (looping over rows, instead of columns within a row in the inner loop, as suggested\
    \ by @JesperJuhl).  If diabolical incompetence can justify a 2D array with dimensions\
    \ like that, garden variety real-world incompetence easily justifies looping with\
    \ the wrong access pattern.  This happens in real code in real life.</p>\n<p>Adjust\
    \ the loop bounds if necessary to use many different pages instead of reusing\
    \ the same few pages, if the array isn't that big.  Hardware prefetching doesn't\
    \ work (as well/at all) across pages.  The prefetcher can track one forward and\
    \ one backward stream within each page (which is what happens here), but will\
    \ only act on it if the memory bandwidth isn't already saturated with non-prefetch.</p>\n\
    <p>This will also generate lots of TLB misses, unless the pages get merged into\
    \ a hugepage (<a href=\"https://www.kernel.org/doc/Documentation/vm/transhuge.txt\"\
    \ rel=\"noreferrer\">Linux does this opportunistically for anonymous (not file-backed)\
    \ allocations like <code>malloc</code>/<code>new</code> that use <code>mmap(MAP_ANONYMOUS)</code></a>).</p>\n\
    <p>Instead of an array to store the list of results, you could use a <strong>linked\
    \ list</strong>.  Then every iteration would require a pointer-chasing load (a\
    \ RAW true dependency hazard for the load-address of the next load).  With a bad\
    \ allocator, you might manage to scatter the list nodes around in memory, defeating\
    \ cache.  With a diabolically incompetent allocator, it could put every node at\
    \ the beginning of its own page.  (e.g. allocate with <code>mmap(MAP_ANONYMOUS)</code>\
    \ directly, without breaking up pages or tracking object sizes to properly support\
    \ <code>free</code>).</p>\n<hr/>\n<p>These aren't really microarchitecture-specific,\
    \ and have little to do with the pipeline (most of these would also be a slowdown\
    \ on a non-pipelined CPU).</p>\n<h3>Somewhat off-topic: make the compiler generate\
    \ worse code / do more work:</h3>\n<p>Use C++11 <code>std::atomic&lt;int&gt;</code>\
    \ and <code>std::atomic&lt;double&gt;</code> for the most pessimal code.  The\
    \ MFENCEs and <code>lock</code>ed instructions are quite slow even without contention\
    \ from another thread.</p>\n<p><code>-m32</code> will make slower code, because\
    \ x87 code will be worse than SSE2 code.  The stack-based 32bit calling convention\
    \ takes more instructions, and passes even FP args on the stack to functions like\
    \ <code>exp()</code>.  <a href=\"http://gcc.godbolt.org/#compilers:!((compiler:g530,options:'-std%3Dgnu%2B%2B11+-O3+-Wall+-fverbose-asm+-m32+-march%3Di586',source:'%23include+%3Catomic%3E%0A%23include+%3Cstdint.h%3E%0A%0A//+-march%3Di386+just+calls+the+libgcc+helper+functions,+which+were+presumably+compiled+with+the+default+-march%0A//+-mi586+use+a+lock+cmpxchg8b+loop%0Astd::atomic%3Cuint64_t%3E+ll(0)%3B%0Avoid+foo_ll(void)+%7B+ll%2B%2B%3B+%7D%0A%0A//+-mfpmath%3Dsse+isn!'t+the+default+on+-m32%0A//+gcc+-m32!'s+trick+for+atomic+64bit+load/store+is+to+use+fild/fistp+to+bounce+data+to+the+stack.%0A//+in+this+case,+the+bit+pattern+being+moved+is+already+FP+data,+so+it+should+just+fld/fstp+from+d+directly%0A//+reported+as+https://gcc.gnu.org/bugzilla/show_bug.cgi%3Fid%3D71245%0Astd::atomic%3Cdouble%3E+d(5.0)%3B%0Avoid+foo_d(void)+%7B%0A++d+%3D++d+%2B+1.0%3B%0A++//+d%2B%3D1.0%3B++//+unimplemented%0A%7D%0A%0Astd::atomic%3Clong+double%3E+ld(5.0)%3B%0Avoid+foo_ld(void)+%7B+ld+%3D+ld+%2B+1.0%3B+%7D%0A')),filterAsm:(commentOnly:!t,directives:!t,intel:!t,labels:!t),version:3\"\
    \ rel=\"noreferrer\"><code>atomic&lt;uint64_t&gt;::operator++</code> on <code>-m32</code>\
    \ requires a <code>lock cmpxchg8B</code> loop</a> (i586).  (So use that for loop\
    \ counters!  [Evil laugh]).</p>\n<p><code>-march=i386</code> will also pessimize\
    \ (thanks @Jesper).  FP compares with <code>fcom</code> are slower than 686 <code>fcomi</code>.\
    \  Pre-586 doesn't provide an atomic 64bit store, (let alone a cmpxchg), so all\
    \ 64bit <code>atomic</code> ops compile to libgcc function calls (which is probably\
    \ compiled for i686, rather than actually using a lock).  Try it on the Godbolt\
    \ Compiler Explorer link in the last paragraph.</p>\n<p>Use <code>long double</code>\
    \ / <code>sqrtl</code> / <code>expl</code> for extra precision and extra slowness\
    \ in ABIs where sizeof(<code>long double</code>) is 10 or 16 (with padding for\
    \ alignment).  (IIRC, 64bit Windows uses 8byte <code>long double</code> equivalent\
    \ to <code>double</code>.  (Anyway, load/store of 10byte (80bit) FP operands is\
    \ 4 / 7 uops, vs. <code>float</code> or <code>double</code> only taking 1 uop\
    \ each for <code>fld m64/m32</code>/<code>fst</code>).  Forcing x87 with <code>long\
    \ double</code> defeats auto-vectorization even for gcc <code>-m64 -march=haswell\
    \ -O3</code>.</p>\n<p>If not using <code>atomic&lt;uint64_t&gt;</code> loop counters,\
    \ use <code>long double</code> for everything, including loop counters.</p>\n\
    <p><code>atomic&lt;double&gt;</code> compiles, but read-modify-write operations\
    \ like <code>+=</code> aren't supported for it (even on 64bit).  <code>atomic&lt;long\
    \ double&gt;</code> has to call a library function just for atomic loads/stores.\
    \  It's probably really inefficient, <a href=\"https://stackoverflow.com/questions/36624881/why-is-integer-assignment-on-a-naturally-aligned-variable-atomic/36685056#36685056\"\
    >because the x86 ISA doesn't naturally support atomic 10byte loads/stores</a>,\
    \ and the only way I can think of without locking (<code>cmpxchg16b</code>) requires\
    \ 64bit mode.</p>\n<hr/>\n<p>At <code>-O0</code>, breaking up a big expression\
    \ by assigning parts to temporary vars will cause more store/reloads.  Without\
    \ <code>volatile</code> or something, this won't matter with optimization settings\
    \ that a real build of real code would use.</p>\n<p>C aliasing rules allow a <code>char</code>\
    \ to alias anything, so storing through a <code>char*</code> forces the compiler\
    \ to store/reload everything before/after the byte-store, even at <code>-O3</code>.\
    \  (This is a problem for auto-vectorizing <a href=\"https://stackoverflow.com/questions/37351236/vectorize-a-function-in-clang\"\
    >code that operates on an array of <code>uint8_t</code></a>, for example.)</p>\n\
    <p>Try <code>uint16_t</code> loop counters, to force truncation to 16bit, probably\
    \ by using 16bit operand-size (potential stalls) and/or extra <code>movzx</code>\
    \ instructions (safe).  <a href=\"https://stackoverflow.com/questions/37325524/does-integer-overflow-cause-undefined-behavior-because-of-memory-corruption\"\
    >Signed overflow is undefined behaviour</a>, so unless you use <code>-fwrapv</code>\
    \ or at least <code>-fno-strict-overflow</code>, <a href=\"http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html\"\
    \ rel=\"noreferrer\">signed loop counters don't have to be re-sign-extended every\
    \ iteration</a>, even if used as offsets to 64bit pointers.</p>\n<hr/>\n<p>Force\
    \ conversion from integer to <code>float</code> and back again.  And/or <code>double</code>&lt;=&gt;<code>float</code>\
    \ conversions.  The instructions have greater-than-one latency, and scalar int-&gt;float\
    \ (<code>cvtsi2ss</code>) is badly designed to not zero the rest of the xmm register.\
    \  (gcc inserts an extra <code>pxor</code> to break dependencies, for this reason.)</p>\n\
    <hr/>\n<p>Frequently <strong>set your CPU affinity to a different CPU</strong>\
    \ (suggested by @Egwor).  diabolical reasoning: You don't want one core to get\
    \ overheated from running your thread for a long time, do you?  Maybe swapping\
    \ to another core will let that core turbo to a higher clock speed.  (In reality:\
    \ they're so thermally close to each other that this is highly unlikely except\
    \ in a multi-socket system).  Now just get the tuning wrong and do it way too\
    \ often.  Besides the time spent in the OS saving/restoring thread state, the\
    \ new core has cold L2/L1 caches, uop cache, and branch predictors.</p>\n<p>Introducing\
    \ frequent unnecessary system calls can slow you down no matter what they are.\
    \  Although some important but simple ones like <code>gettimeofday</code> may\
    \ be implemented in user-space with, with no transition to kernel mode.  (glibc\
    \ on Linux does this with the kernel's help, since the kernel exports code in\
    \ the <code>vdso</code>).</p>\n<p>For more on system call overhead (including\
    \ cache/TLB misses after returning to user-space, not just the context switch\
    \ itself), the <a href=\"https://www.cs.cmu.edu/~chensm/Big_Data_reading_group/papers/flexsc-osdi10.pdf\"\
    \ rel=\"noreferrer\">FlexSC paper</a> has some great perf-counter analysis of\
    \ the current situation, as well as a proposal for batching system calls from\
    \ massively multi-threaded server processes.</p>\n</div>"
- - Deoptimizing a program for the pipeline in Intel Sandybridge-family CPUs
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>A few things that you can do\
    \ to make things perform as bad as possible:</p>\n<ul>\n<li><p>compile the code\
    \ for the i386 architecture. This will prevent the use of SSE and newer instructions\
    \ and force the use of the x87 FPU.</p></li>\n<li><p>use <code>std::atomic</code>\
    \ variables everywhere. This will make them very expensive due to the compiler\
    \ being forced to insert memory barriers all over the place. And this is something\
    \ an incompetent person might plausibly do to \"ensure thread safety\".</p></li>\n\
    <li><p>make sure sure to access memory in the worst possible way for the prefetcher\
    \ to predict (column major vs row major).</p></li>\n<li><p>to make your variables\
    \ extra expensive you could make sure they all have 'dynamic storage duration'\
    \ (heap allocated) by allocating them with <code>new</code> rather than letting\
    \ them have 'automatic storage duration' (stack allocated).</p></li>\n<li><p>make\
    \ sure that all memory you allocate is very oddly aligned and by all means avoid\
    \ allocating huge pages, since doing so would be much too TLB efficient.</p></li>\n\
    <li><p>whatever you do, don't build your code with the compilers optimizer enabled.\
    \ And make sure to enable the most expressive  debug symbols you can (won't make\
    \ the code <em>run</em> slower, but it'll waste some extra disk space).</p></li>\n\
    </ul>\n<p>Note: This answer basically just summarizes my comments that @Peter\
    \ Cordes already incorporated into his very good answer. Suggest he get's your\
    \ upvote if you only have one to spare :)</p>\n</div>"
- - Deoptimizing a program for the pipeline in Intel Sandybridge-family CPUs
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can use <code>long double</code>\
    \ for computation. On x86 it should be the 80-bit format. Only the legacy, x87\
    \ FPU has support for this.</p>\n<p>Few shortcomings of x87 FPU:</p>\n<ol>\n<li>Lack\
    \ of SIMD, may need more instructions.</li>\n<li>Stack based, problematic for\
    \ super scalar and pipelined architectures.</li>\n<li>Separate and quite small\
    \ set of registers, may need more conversion from other registers and more memory\
    \ operations.</li>\n<li>On the Core i7 there are 3 ports for SSE and only 2 for\
    \ x87, the processor can execute less parallel instructions.</li>\n</ol>\n</div>"
- - How exactly does __attribute__((constructor)) work?
  - "<div class=\"post-text\" itemprop=\"text\">\n<ol>\n<li>It's run when a shared\
    \ library is loaded, typically during program startup.</li>\n<li>That's how all\
    \ GCC attributes are; presumably to distinguish them from function calls.</li>\n\
    <li>GCC-specific syntax.</li>\n<li>Yes, this also works in C an C++.</li>\n<li>No,\
    \ the function does not need to be static.</li>\n<li>The destructor is run when\
    \ the shared library is unloaded, typically at program exit.</li>\n</ol>\n<p>So,\
    \ the way the constructors and destructors work is that the shared object file\
    \ contains special sections (.ctors and .dtors on ELF) which contain references\
    \ to the functions marked with the constructor and destructor attributes, respectively.\
    \ When the library is loaded/unloaded the dynamic loader program (ld.so or somesuch)\
    \ checks whether such sections exist, and if so, calls the functions referenced\
    \ therein.</p>\n<p>Come to think of it, there is probably some similar magic in\
    \ the normal static linker, so that the same code is run on startup/shutdown regardless\
    \ if the user chooses static or dynamic linking.</p>\n</div>"
- - How exactly does __attribute__((constructor)) work?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><code>.init</code>/<code>.fini</code>\
    \ isn't deprecated. It's still part of the the ELF standard and I'd dare say it\
    \ will be forever. Code in <code>.init</code>/<code>.fini</code> is run by the\
    \ loader/runtime-linker when code is loaded/unloaded. I.e. on each ELF load (for\
    \ example a shared library) code in <code>.init</code> will be run. It's still\
    \ possible to use that mechanism to achieve about the same thing as with    <code>__attribute__((constructor))/((destructor))</code>.\
    \ It's old-school but it has some benefits.</p>\n<p><code>.ctors</code>/<code>.dtors</code>\
    \ mechanism for example require support by system-rtl/loader/linker-script. This\
    \ is far from certain to be available on all systems, for example deeply embedded\
    \ systems where code executes on bare metal. I.e. even if <code>__attribute__((constructor))/((destructor))</code>\
    \ is supported by GCC, it's not certain it will run as it's up to the linker to\
    \ organize it and to the loader (or in some cases, boot-code) to run it. To use\
    \ <code>.init</code>/<code>.fini</code> instead, the easiest way is to use linker\
    \ flags: -init &amp; -fini (i.e. from GCC command line, syntax would be <code>-Wl\
    \ -init my_init -fini my_fini</code>).</p>\n<p>On system supporting both methods,\
    \ one possible benefit is that code in <code>.init</code> is run before <code>.ctors</code>\
    \ and code in <code>.fini</code> after <code>.dtors</code>. If order is relevant\
    \ that's at least one crude but easy way to distinguish between init/exit functions.</p>\n\
    <p>A major drawback is that you can't easily have more than one <code>_init</code>\
    \ and one <code>_fini</code> function per each loadable module and would probably\
    \ have to fragment code in more <code>.so</code> than motivated. Another is that\
    \ when using the linker method described above, one replaces the original _init\
    \ and <code>_fini</code> default functions (provided by <code>crti.o</code>).\
    \ This is where all sorts of initialization usually occur (on Linux this is where\
    \ global variable assignment is initialized). A way around that is described <a\
    \ href=\"http://www.flipcode.com/archives/Calling_A_Function_At_ELF_Shared_Library_Load_Time.shtml\"\
    \ rel=\"noreferrer\">here</a></p>\n<p>Notice in the link above that a cascading\
    \ to the original <code>_init()</code> is not needed as it's still in place. The\
    \ <code>call</code> in the inline assembly however is x86-mnemonic and calling\
    \ a function from assembly would look completely different for many other architectures\
    \ (like ARM for example). I.e. code is not transparent.</p>\n<p><code>.init</code>/<code>.fini</code>\
    \ and <code>.ctors</code>/<code>.detors</code> mechanisms are similar, but not\
    \ quite. Code in <code>.init</code>/<code>.fini</code> runs \"as is\". I.e. you\
    \ can have several functions in <code>.init</code>/<code>.fini</code>, but it\
    \ is AFAIK syntactically difficult to put them there fully transparently in pure\
    \ C without breaking up code in many small <code>.so</code> files.</p>\n<p><code>.ctors</code>/<code>.dtors</code>\
    \ are differently organized than <code>.init</code>/<code>.fini</code>. <code>.ctors</code>/<code>.dtors</code>\
    \ sections are both just tables with pointers to functions, and the \"caller\"\
    \ is a system-provided loop that calls each function indirectly. I.e. the loop-caller\
    \ can be architecture specific, but as it's part of the system (if it exists at\
    \ all i.e.) it doesn't matter.</p>\n<p>The following snippet adds new function\
    \ pointers to the <code>.ctors</code> function array, principally the same way\
    \ as <code>__attribute__((constructor))</code> does (method can coexist with <code>__attribute__((constructor)))</code>.</p>\n\
    <pre><code>#define SECTION( S ) __attribute__ ((section ( S )))\nvoid test(void)\
    \ {\n   printf(\"Hello\\n\");\n}\nvoid (*funcptr)(void) SECTION(\".ctors\") =test;\n\
    void (*funcptr2)(void) SECTION(\".ctors\") =test;\nvoid (*funcptr3)(void) SECTION(\"\
    .dtors\") =test;\n</code></pre>\n<p>One can also add the function pointers to\
    \ a completely different self-invented section. A modified linker script and an\
    \ additional function mimicking the loader <code>.ctors</code>/<code>.dtors</code>\
    \ loop is needed in such case. But with it one can achieve better control over\
    \ execution order, add in-argument and return code handling e.t.a. (In a C++ project\
    \ for example, it would be useful if in need of something running before or after\
    \ global constructors). </p>\n<p>I'd prefer <code>__attribute__((constructor))/((destructor))</code>\
    \ where possible, it's a simple and elegant solution even it feels like cheating.\
    \ For bare-metal coders like myself, this is just not always an option.</p>\n\
    <p>Some good reference in the book <a href=\"http://www.becbapatla.ac.in/cse/naveenv/docs/LL1.pdf\"\
    \ rel=\"noreferrer\"><em>Linkers &amp; loaders</em></a>.</p>\n</div>"
- - How exactly does __attribute__((constructor)) work?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This page provides great understanding\
    \ about the <code>constructor</code> and <code>destructor</code> attribute implementation\
    \ and the sections within within ELF that allow them to work. After digesting\
    \ the information provided here, I compiled a bit of additional information and\
    \ (borrowing the section example from Michael Ambrus above) created an example\
    \ to illustrate the concepts and help my learning. Those results are provided\
    \ below along with the example source.</p>\n<p>As explained in this thread, the\
    \ <code>constructor</code> and <code>destructor</code> attributes create entries\
    \ in the <code>.ctors</code> and <code>.dtors</code> section of the object file.\
    \ You can place references to functions in either section in one of three ways.\
    \ (1) using either the <code>section</code> attribute; (2) <code>constructor</code>\
    \ and <code>destructor</code> attributes or (3) with an inline-assembly call (as\
    \ referenced the link in Ambrus' answer). </p>\n<p>The use of <code>constructor</code>\
    \ and <code>destructor</code> attributes allow you to additionally assign a priority\
    \ to the constructor/destructor to control its order of execution before <code>main()</code>\
    \ is called or after it returns. The lower the priority value given, the higher\
    \ the execution priority (lower priorities execute before higher priorities before\
    \ main() -- and subsequent to higher priorities after main() ). The priority values\
    \ you give <strong>must be greater than<code>100</code></strong> as the compiler\
    \ reserves priority values between 0-100 for implementation. A<code>constructor</code>\
    \ or <code>destructor</code> specified with priority executes before a <code>constructor</code>\
    \ or <code>destructor</code> specified without priority.</p>\n<p>With the 'section'\
    \ attribute or with inline-assembly, you can also place function references in\
    \ the <code>.init</code> and <code>.fini</code> ELF code section that will execute\
    \ before any constructor and after any destructor, respectively. Any functions\
    \ called by the function reference placed in the <code>.init</code> section, will\
    \ execute before the function reference itself (as usual).</p>\n<p>I have tried\
    \ to illustrate each of those in the example below:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\
    #include &lt;stdlib.h&gt;\n\n/*  test function utilizing attribute 'section' \"\
    .ctors\"/\".dtors\"\n    to create constuctors/destructors without assigned priority.\n\
    \    (provided by Michael Ambrus in earlier answer)\n*/\n\n#define SECTION( S\
    \ ) __attribute__ ((section ( S )))\n\nvoid test (void) {\nprintf(\"\\n\\ttest()\
    \ utilizing -- (.section .ctors/.dtors) w/o priority\\n\");\n}\n\nvoid (*funcptr1)(void)\
    \ SECTION(\".ctors\") =test;\nvoid (*funcptr2)(void) SECTION(\".ctors\") =test;\n\
    void (*funcptr3)(void) SECTION(\".dtors\") =test;\n\n/*  functions constructX,\
    \ destructX use attributes 'constructor' and\n    'destructor' to create prioritized\
    \ entries in the .ctors, .dtors\n    ELF sections, respectively.\n\n    NOTE:\
    \ priorities 0-100 are reserved\n*/\nvoid construct1 () __attribute__ ((constructor\
    \ (101)));\nvoid construct2 () __attribute__ ((constructor (102)));\nvoid destruct1\
    \ () __attribute__ ((destructor (101)));\nvoid destruct2 () __attribute__ ((destructor\
    \ (102)));\n\n/*  init_some_function() - called by elf_init()\n*/\nint init_some_function\
    \ () {\n    printf (\"\\n  init_some_function() called by elf_init()\\n\");\n\
    \    return 1;\n}\n\n/*  elf_init uses inline-assembly to place itself in the\
    \ ELF .init section.\n*/\nint elf_init (void)\n{\n    __asm__ (\".section .init\
    \ \\n call elf_init \\n .section .text\\n\");\n\n    if(!init_some_function ())\n\
    \    {\n        exit (1);\n    }\n\n    printf (\"\\n    elf_init() -- (.section\
    \ .init)\\n\");\n\n    return 1;\n}\n\n/*\n    function definitions for constructX\
    \ and destructX\n*/\nvoid construct1 () {\n    printf (\"\\n      construct1()\
    \ constructor -- (.section .ctors) priority 101\\n\");\n}\n\nvoid construct2 ()\
    \ {\n    printf (\"\\n      construct2() constructor -- (.section .ctors) priority\
    \ 102\\n\");\n}\n\nvoid destruct1 () {\n    printf (\"\\n      destruct1() destructor\
    \ -- (.section .dtors) priority 101\\n\\n\");\n}\n\nvoid destruct2 () {\n    printf\
    \ (\"\\n      destruct2() destructor -- (.section .dtors) priority 102\\n\");\n\
    }\n\n/* main makes no function call to any of the functions declared above\n*/\n\
    int\nmain (int argc, char *argv[]) {\n\n    printf (\"\\n\\t  [ main body of program\
    \ ]\\n\");\n\n    return 0;\n}\n</code></pre>\n<p>output:</p>\n<pre><code>init_some_function()\
    \ called by elf_init()\n\n    elf_init() -- (.section .init)\n\n    construct1()\
    \ constructor -- (.section .ctors) priority 101\n\n    construct2() constructor\
    \ -- (.section .ctors) priority 102\n\n        test() utilizing -- (.section .ctors/.dtors)\
    \ w/o priority\n\n        test() utilizing -- (.section .ctors/.dtors) w/o priority\n\
    \n        [ main body of program ]\n\n        test() utilizing -- (.section .ctors/.dtors)\
    \ w/o priority\n\n    destruct2() destructor -- (.section .dtors) priority 102\n\
    \n    destruct1() destructor -- (.section .dtors) priority 101\n</code></pre>\n\
    <p>The example helped cement the constructor/destructor behavior, hopefully it\
    \ will be useful to others as well.</p>\n</div>"
- - Why do we use volatile keyword in C++? [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Consider this code,</p>\n<pre><code>int\
    \ some_int = 100;\n\nwhile(some_int == 100)\n{\n   //your code\n}\n</code></pre>\n\
    <p>When this program gets compiled, the compiler may optimize this code, if it\
    \ finds that the program <strong>never</strong> ever makes any attempt to change\
    \ the value of <code>some_int</code>, so it may be tempted to optimize the <code>while</code>\
    \ loop by changing it from <code>while(some_int == 100)</code> to simply <code>while(true)</code>\
    \ so that the execution could be fast (since the condition in <code>while</code>\
    \ loop appears to be <code>true</code> always). <em>(if the compiler doesn't optimize\
    \ it, then it has to fetch the value of <code>some_int</code> (if it's not loaded\
    \ on a register) and compare it with 100, each time which obviously is a little\
    \ bit slow.)</em></p>\n<p>However, sometimes, optimization (of some parts of your\
    \ program) may be <strong>undesirable</strong>, because it may be that someone\
    \ else is changing the value of <code>some_int</code> from <strong>outside the\
    \ program which compiler is not aware of</strong>, since it can't see it; but\
    \ it's how you've designed it. In that case, compiler's optimization would <strong>not</strong>\
    \ produce the desired result!</p>\n<p>So, to ensure the desired result, you need\
    \ to somehow stop the compiler from optimizing the <code>while</code> loop. That\
    \ is where the <code>volatile</code> keyword plays its role. All you need to do\
    \ is this,</p>\n<pre><code>volatile int some_int = 100; //note the 'volatile'\
    \ qualifier now!\n</code></pre>\n<hr/>\n<p>In others words I would explain this\
    \ as follows:</p>\n<p><code>volatile</code> tells the compiler that, </p>\n<blockquote>\n\
    <p>\"Hey compiler, I'm volatile and, you\n  know, I can be changed by some XYZ\n\
    \  that you're not even aware of. That\n  XYZ could be anything. Maybe some\n\
    \  alien outside this planet called\n  program. Maybe some lighting, some\n  form\
    \ of interrupt, volcanoes, etc can\n  mutate me. Maybe. You never know who\n \
    \ is going to change me! So O you\n  ignorant, stop playing an all-knowing\n \
    \ god, and don't dare touch the code\n  where I'm present. Okay?\"</p>\n</blockquote>\n\
    <p>Well, that is how <code>volatile</code> prevents compiler from optimizing code.\
    \ Now search the web to see some sample examples.</p>\n<hr/>\n<p>Quoting from\
    \ the C++ Standard ($7.1.5.1/8)</p>\n<blockquote>\n<p>[..] volatile is a hint\
    \ to the\n  implementation to <strong>avoid aggressive\n  optimization involving\
    \ the object</strong>\n  because the value of the object might\n  be changed by\
    \ means undetectable by an\n  implementation.[...]</p>\n</blockquote>\n<p>Related\
    \ topic:</p>\n<p><a href=\"https://stackoverflow.com/questions/4479597/does-making-a-struct-volatile-make-all-its-members-volatile/4479652\"\
    >Does making a struct volatile make all its members volatile?</a></p>\n</div>"
- - Why do we use volatile keyword in C++? [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In computer programming, particularly\
    \ in the C, C++, and C# programming languages, a variable or object declared with\
    \ the <code>volatile</code> keyword usually has special properties related to\
    \ optimization and/or threading. Generally speaking, the <code>volatile</code>\
    \ keyword is intended to prevent the (pseudo)compiler from applying any optimizations\
    \ on the code that assume values of variables cannot change \"on their own.\"\
    \   (c) Wikipedia</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Volatile_variable\"\
    \ rel=\"noreferrer\">http://en.wikipedia.org/wiki/Volatile_variable</a> </p>\n\
    </div>"
