categories:
- StackOverflow
- C++
conversations:
- - How to detect unsigned integer multiply overflow?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I see you're using unsigned integers.\
    \ By definition, <strong>in C</strong> (don't know about C++), unsigned arithmetic\
    \ does not overflow ... so, at least for C, your point is moot :)</p>\n<p>With\
    \ signed integers, once there has been overflow, <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\"\
    \ rel=\"noreferrer\">Undefined Behaviour</a> has occurred and your program can\
    \ do anything (for example: render tests inconclusive).Â </p>\n<pre><code>#include\
    \ &lt;limits.h&gt;\nint a = &lt;something&gt;;\nint x = &lt;something&gt;;\na\
    \ += x;              /* UB */\nif (a &lt; 0) {         /* unreliable test */\n\
    \  /* ... */\n}\n</code></pre>\n<p>To create a conforming program you need to\
    \ test for overflow <strong>before</strong> generating said overflow. The method\
    \ can be used with unsigned integers too</p>\n<pre><code>// for addition\n#include\
    \ &lt;limits.h&gt;\nint a = &lt;something&gt;;\nint x = &lt;something&gt;;\nif\
    \ ((x &gt; 0) &amp;&amp; (a &gt; INT_MAX - x)) /* `a + x` would overflow */;\n\
    if ((x &lt; 0) &amp;&amp; (a &lt; INT_MIN - x)) /* `a + x` would underflow */;\n\
    </code></pre>\n<hr/>\n<pre><code>// for subtraction\n#include &lt;limits.h&gt;\n\
    int a = &lt;something&gt;;\nint x = &lt;something&gt;;\nif ((x &lt; 0) &amp;&amp;\
    \ (a &gt; INT_MAX + x)) /* `a - x` would overflow */;\nif ((x &gt; 0) &amp;&amp;\
    \ (a &lt; INT_MIN + x)) /* `a - x` would underflow */;\n</code></pre>\n<hr/>\n\
    <pre><code>// for multiplication\n#include &lt;limits.h&gt;\nint a = &lt;something&gt;;\n\
    int x = &lt;something&gt;;\nif (a &gt; INT_MAX / x) /* `a * x` would overflow\
    \ */;\nif ((a &lt; INT_MIN / x)) /* `a * x` would underflow */;\n// there may\
    \ be need to check for -1 for two's complement machines\nif ((a == -1) &amp;&amp;\
    \ (x == INT_MIN)) /* `a * x` can overflow */\nif ((x == -1) &amp;&amp; (a == INT_MIN))\
    \ /* `a * x` (or `a / x`) can overflow */\n</code></pre>\n<hr/>\n<p>for division\
    \ (except for the <code>INT_MIN</code> and <code>-1</code> special case) there\
    \ is no possibility of going over <code>INT_MIN</code> or <code>INT_MAX</code>.</p>\n\
    </div>"
- - How to detect unsigned integer multiply overflow?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There <em>is</em> a way to determine\
    \ whether an operation is likely to overflow, using the positions of the most-significant\
    \ one-bits in the operands and a little basic binary-math knowledge.</p>\n<p>For\
    \ addition, any two operands will result in (at most) one bit more than the largest\
    \ operand's highest one-bit. For example:</p>\n<pre><code>bool addition_is_safe(uint32_t\
    \ a, uint32_t b) {\n    size_t a_bits=highestOneBitPosition(a), b_bits=highestOneBitPosition(b);\n\
    \    return (a_bits&lt;32 &amp;&amp; b_bits&lt;32);\n}\n</code></pre>\n<p>For\
    \ multiplication, any two operands will result in (at most) the sum of the bits\
    \ of the operands. For example:</p>\n<pre><code>bool multiplication_is_safe(uint32_t\
    \ a, uint32_t b) {\n    size_t a_bits=highestOneBitPosition(a), b_bits=highestOneBitPosition(b);\n\
    \    return (a_bits+b_bits&lt;=32);\n}\n</code></pre>\n<p>Similarly, you can estimate\
    \ the maximum size of the result of <code>a</code> to the power of <code>b</code>\
    \ like this:</p>\n<pre><code>bool exponentiation_is_safe(uint32_t a, uint32_t\
    \ b) {\n    size_t a_bits=highestOneBitPosition(a);\n    return (a_bits*b&lt;=32);\n\
    }\n</code></pre>\n<p>(Substitute the number of bits for your target integer, of\
    \ course.)</p>\n<p>I'm not sure of the fastest way to determine the position of\
    \ the highest one-bit in a number, here's a brute-force method:</p>\n<pre><code>size_t\
    \ highestOneBitPosition(uint32_t a) {\n    size_t bits=0;\n    while (a!=0) {\n\
    \        ++bits;\n        a&gt;&gt;=1;\n    };\n    return bits;\n}\n</code></pre>\n\
    <p>It's not perfect, but that'll give you a good idea whether any two numbers\
    \ could overflow before you do the operation. I don't know whether it would be\
    \ faster than simply checking the result the way you suggested, because of the\
    \ loop in the <code>highestOneBitPosition</code> function, but it might (especially\
    \ if you knew how many bits were in the operands beforehand).</p>\n</div>"
- - How to detect unsigned integer multiply overflow?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"http://clang.llvm.org/docs/LanguageExtensions.html#checked-arithmetic-builtins\"\
    \ rel=\"noreferrer\">Clang 3.4+</a> and <a href=\"https://gcc.gnu.org/gcc-5/changes.html#c-family\"\
    \ rel=\"noreferrer\">GCC 5+</a> offer checked arithmetic builtins. They offer\
    \ a very fast solution to this problem, especially when compared to bit-testing\
    \ safety checks.</p>\n<p>For the example in OP's question, it would work like\
    \ that:</p>\n<pre><code>unsigned long b, c, c_test;\nif (__builtin_umull_overflow(b,\
    \ c, &amp;c_test))\n{\n    // returned non-zero: there has been an overflow\n\
    }\nelse\n{\n    // return zero: there hasn't been an overflow\n}\n</code></pre>\n\
    <p>The Clang documentation doesn't specify whether <code>c_test</code> contains\
    \ the overflowed result if an overflow occurred, but the GCC documentation says\
    \ that it does. Given that these two like to be <code>__builtin</code>-compatible,\
    \ it's probably safe to assume that this is how Clang works too.</p>\n<p>There\
    \ is a <code>__builtin</code> for each arithmetic operation that can overflow\
    \ (addition, subtraction, multiplication), with signed and unsigned variants,\
    \ for int sizes, long sizes, and long long sizes. The syntax for the name is <code>__builtin_[us](operation)(l?l?)_overflow</code>:</p>\n\
    <ul>\n<li><code>u</code> for <em>unsigned</em> or <code>s</code> for <em>signed</em>;</li>\n\
    <li>operation is one of <code>add</code>, <code>sub</code> or <code>mul</code>;</li>\n\
    <li>no <code>l</code> suffix means that the operands are <code>int</code>s; one\
    \ <code>l</code> means <code>long</code>; two <code>l</code>s mean <code>long\
    \ long</code>.</li>\n</ul>\n<p>So for a checked signed long integer addition,\
    \ it would be <code>__builtin_saddl_overflow</code>. The full list can be found\
    \ on the <a href=\"http://clang.llvm.org/docs/LanguageExtensions.html#checked-arithmetic-builtins\"\
    \ rel=\"noreferrer\">Clang documentation page</a>.</p>\n<p>GCC 5+ and Clang 3.8+\
    \ additionally offer generic builtins that work without specifying the type of\
    \ the values: <code>__builtin_add_overflow</code>, <code>__builtin_sub_overflow</code>\
    \ and <code>__builtin_mul_overflow</code>. These also work on types smaller than\
    \ <code>int</code>. </p>\n<p>The builtins lower to what's best for the platform.\
    \ On x86, they check the carry, overflow and sign flags.</p>\n<p>Visual Studio's\
    \ cl.exe doesn't have direct equivalents. For unsigned additions and subtractions,\
    \ including <code>&lt;intrin.h&gt;</code> will allow you to use <code>addcarry_uNN</code>\
    \ and <code>subborrow_uNN</code> (where NN is the number of bits, like <code>addcarry_u8</code>\
    \ or <code>subborrow_u64</code>). Their signature is a bit obtuse:</p>\n<pre><code>unsigned\
    \ char _addcarry_u32(unsigned char c_in, unsigned int src1, unsigned int src2,\
    \ unsigned int *sum);\nunsigned char _subborrow_u32(unsigned char b_in, unsigned\
    \ int src1, unsigned int src2, unsigned int *diff);\n</code></pre>\n<p><code>c_in</code>/<code>b_in</code>\
    \ is the carry/borrow flag on input, the return value is the carry/borrow on output.\
    \ It does not appear to have equivalents for signed operations or multiplications.</p>\n\
    <p>Otherwise, Clang for Windows is now production-ready (good enough for Chrome),\
    \ so that could be an option, too.</p>\n</div>"
- - Use 'class' or 'typename' for template parameters? [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Stan Lippman talked about this\
    \ <a href=\"https://web.archive.org/web/20060619131004/http://blogs.msdn.com/slippman/archive/2004/08/11/212768.aspx\"\
    \ rel=\"noreferrer\">here</a>.  I thought it was interesting.</p>\n<p><em>Summary</em>:\
    \ Stroustrup originally used <code>class</code> to specify types in templates\
    \ to avoid introducing a new keyword. Some in the committee worried that this\
    \ overloading of the keyword led to confusion. Later, the committee introduced\
    \ a new keyword <code>typename</code> to resolve syntactic ambiguity, and decided\
    \ to let it also be used to specify template types to reduce confusion, but for\
    \ backward compatibility, <code>class</code> kept its overloaded meaning.</p>\n\
    </div>"
- - Use 'class' or 'typename' for template parameters? [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>According to Scott Myers, Effective\
    \ C++ (3rd ed.) item 42 (which must, of course, be the ultimate answer)  - the\
    \ difference is \"nothing\".   </p>\n<p>Advice is to use \"class\" if it is expected\
    \ T will always be a class, with \"typename\"  if other types (int, char* whatever)\
    \ may be expected.  Consider it a usage hint.</p>\n</div>"
- - Use 'class' or 'typename' for template parameters? [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>As an addition to all above posts,\
    \ the use of the <code>class</code> keyword <i>is</i> forced (up to and including\
    \ C++14) when dealing with <i>template template</i> parameters, e.g.:</p>\n<pre><code>template\
    \ &lt;template &lt;typename, typename&gt; class Container, typename Type&gt;\n\
    class MyContainer: public Container&lt;Type, std::allocator&lt;Type&gt;&gt;\n\
    { /*...*/ };\n</code></pre>\n<p>In this example, <code>typename Container</code>\
    \ would have generated a compiler error, something like this:</p>\n<pre><code>error:\
    \ expected 'class' before 'Container'\n</code></pre>\n</div>"
- - When can I use a forward declaration?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Put yourself in the compiler's\
    \ position: when you forward declare a type, all the compiler knows is that this\
    \ type exists; it knows nothing about its size, members, or methods. This is why\
    \ it's called an <em>incomplete type</em>. Therefore, you cannot use the type\
    \ to declare a member, or a base class, since the compiler would need to know\
    \ the layout of the type.</p>\n<p>Assuming the following forward declaration.</p>\n\
    <pre><code>class X;\n</code></pre>\n<p>Here's what you can and cannot do.</p>\n\
    <p><strong>What you can do with an incomplete type:</strong></p>\n<ul>\n<li><p>Declare\
    \ a member to be a pointer or a reference to the incomplete type:</p>\n<pre><code>class\
    \ Foo {\n    X *pt;\n    X &amp;pt;\n};\n</code></pre></li>\n<li><p><em>Declare</em>\
    \ functions or methods which accept/return incomplete types:</p>\n<pre><code>void\
    \ f1(X);\nX    f2();\n</code></pre></li>\n<li><p><em>Define</em> functions or\
    \ methods which accept/return pointers/references to the incomplete type (but\
    \ without using its members):</p>\n<pre><code>void f3(X*, X&amp;) {}\nX&amp; \
    \  f4()       {}\nX*   f5()       {}\n</code></pre></li>\n</ul>\n<p><strong>What\
    \ you cannot do with an incomplete type:</strong></p>\n<ul>\n<li><p>Use it as\
    \ a base class</p>\n<pre><code>class Foo : X {} // compiler error!\n</code></pre></li>\n\
    <li><p>Use it to declare a member:</p>\n<pre><code>class Foo {\n    X m; // compiler\
    \ error!\n};\n</code></pre></li>\n<li><p><em>Define</em> functions or methods\
    \ using this type</p>\n<pre><code>void f1(X x) {} // compiler error!\nX    f2()\
    \    {} // compiler error!\n</code></pre></li>\n<li><p>Use its methods or fields,\
    \ in fact trying to dereference a variable with incomplete type</p>\n<pre><code>class\
    \ Foo {\n    X *m;            \n    void method()            \n    {\n       \
    \ m-&gt;someMethod();      // compiler error!\n        int i = m-&gt;someField;\
    \ // compiler error!\n    }\n};\n</code></pre></li>\n</ul>\n<hr/>\n<p>When it\
    \ comes to templates, there is no absolute rule: whether you can use an incomplete\
    \ type as a template parameter is dependent on the way the type is used in the\
    \ template.</p>\n<p>For instance, <code>std::vector&lt;T&gt;</code> requires its\
    \ parameter to be a complete type, while <code>boost::container::vector&lt;T&gt;</code>\
    \ does not. Sometimes, a complete type is required only if you use certain member\
    \ functions; <a href=\"https://stackoverflow.com/questions/6012157/is-stdunique-ptrt-required-to-know-the-full-definition-of-t\"\
    >this is the case for <code>std::unique_ptr&lt;T&gt;</code></a>, for example.</p>\n\
    <p>A well-documented template should indicate in its documentation all the requirements\
    \ of its parameters, including whether they need to be complete types or not.</p>\n\
    </div>"
- - When can I use a forward declaration?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The main rule is that you can\
    \ only forward-declare classes whose memory layout (and thus member functions\
    \ and data members) do not need to be known in the file you forward-declare it.</p>\n\
    <p>This would rule out base classes and anything but classes used via references\
    \ and pointers.</p>\n</div>"
- - When can I use a forward declaration?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"https://rads.stackoverflow.com/amzn/click/com/0201633620\"\
    \ rel=\"noreferrer\">Lakos</a> distinguishes between class usage</p>\n<ol>\n<li><em>in-name-only</em>\
    \ (for which a forward declaration is sufficient) and</li>\n<li><em>in-size</em>\
    \ (for which the class definition is needed).</li>\n</ol>\n<p>I've never seen\
    \ it pronounced more succinctly :)</p>\n</div>"
- - What is the easiest way to initialize a std::vector with hardcoded elements?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>One method would be to use the\
    \ array to initialize the vector</p>\n<pre><code>static const int arr[] = {16,2,77,29};\n\
    vector&lt;int&gt; vec (arr, arr + sizeof(arr) / sizeof(arr[0]) );\n</code></pre>\n\
    </div>"
- - What is the easiest way to initialize a std::vector with hardcoded elements?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>If your compiler supports C++11,\
    \ you can simply do:</p>\n<pre><code>std::vector&lt;int&gt; v = {1, 2, 3, 4};\n\
    </code></pre>\n<p>This is available in GCC <a href=\"http://gcc.gnu.org/projects/cxx0x.html\"\
    \ rel=\"noreferrer\">as of version 4.4</a>. Unfortunately, VC++ 2010 seems to\
    \ be lagging behind in this respect.</p>\n<p>Alternatively, the <a href=\"http://www.boost.org/doc/libs/1_42_0/libs/assign/doc/index.html\"\
    \ rel=\"noreferrer\">Boost.Assign</a> library uses non-macro magic to allow the\
    \ following:</p>\n<pre><code>#include &lt;boost/assign/list_of.hpp&gt;\n...\n\
    std::vector&lt;int&gt; v = boost::assign::list_of(1)(2)(3)(4);\n</code></pre>\n\
    <p>Or:</p>\n<pre><code>#include &lt;boost/assign/std/vector.hpp&gt;\nusing namespace\
    \ boost::assign;\n...\nstd::vector&lt;int&gt; v;\nv += 1, 2, 3, 4;\n</code></pre>\n\
    <p>But keep in mind that this has some overhead (basically, <code>list_of</code>\
    \ constructs a <code>std::deque</code> under the hood) so for performance-critical\
    \ code you'd be better off doing as Yacoby says.</p>\n</div>"
- - What is the easiest way to initialize a std::vector with hardcoded elements?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In C++0x you will be able to\
    \ do it in the same way that you did with an array, but not in the current standard.</p>\n\
    <p>With only language support you can use:</p>\n<pre><code>int tmp[] = { 10, 20,\
    \ 30 };\nstd::vector&lt;int&gt;Â v(Â tmp,Â tmp+3Â );Â //Â useÂ someÂ utilityÂ toÂ avoid\
    \ hardcoding the size here\n</code></pre>\n<p>If you can add other libraries you\
    \ could try boost::assignment:</p>\n<pre><code>vector&lt;int&gt; v = list_of(10)(20)(30);\n\
    </code></pre>\n<p>To avoid hardcoding the size of an array:</p>\n<pre><code>//\
    \ option 1, typesafe, not a compile time constant\ntemplate &lt;typename T, std::size_t\
    \ N&gt;\ninline std::size_t size_of_array( T (&amp;)[N] ) {\n   return N;\n}\n\
    // option 2, not typesafe, compile time constant\n#define ARRAY_SIZE(x) (sizeof(x)\
    \ / sizeof(x[0]))\n\n// option 3, typesafe, compile time constant\ntemplate &lt;typename\
    \ T, std::size_t N&gt;\nchar (&amp;sizeof_array( T(&amp;)[N] ))[N];    // declared,\
    \ undefined\n#define ARRAY_SIZE(x) sizeof(sizeof_array(x))\n</code></pre>\n</div>"
- - How to find out if an item is present in a std::vector?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can use <a href=\"http://en.cppreference.com/w/cpp/algorithm/find\"\
    \ rel=\"noreferrer\"><code>std::find</code></a> from <code>&lt;algorithm&gt;</code>:</p>\n\
    <pre><code>std::find(vector.begin(), vector.end(), item) != vector.end()\n</code></pre>\n\
    <p>This returns a bool (<code>true</code> if present, <code>false</code> otherwise).\
    \  With your example:</p>\n<pre><code>#include &lt;algorithm&gt;\n\nif ( std::find(vector.begin(),\
    \ vector.end(), item) != vector.end() )\n   do_this();\nelse\n   do_that();\n\
    </code></pre>\n</div>"
- - How to find out if an item is present in a std::vector?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>As others have said, use the\
    \ STL <a href=\"http://en.cppreference.com/w/cpp/algorithm/find\" rel=\"noreferrer\"\
    ><code>find</code></a> or <a href=\"http://en.cppreference.com/w/cpp/algorithm/find\"\
    \ rel=\"noreferrer\"><code>find_if</code></a> functions. But if you are searching\
    \ in very large vectors and this impacts performance, you may want to sort your\
    \ vector and then use the <a href=\"http://en.cppreference.com/w/cpp/algorithm/binary_search\"\
    \ rel=\"noreferrer\"><code>binary_search</code></a>, <a href=\"http://en.cppreference.com/w/cpp/algorithm/lower_bound\"\
    \ rel=\"noreferrer\"><code>lower_bound</code></a>, or <a href=\"http://en.cppreference.com/w/cpp/algorithm/upper_bound\"\
    \ rel=\"noreferrer\"><code>upper_bound</code></a> algorithms.</p>\n</div>"
- - How to find out if an item is present in a std::vector?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Use find from the algorithm header\
    \ of stl.I've illustrated its use with int type. You can use any type you like\
    \ as long as you can compare for equality (overload == if you need to for your\
    \ custom class).</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\
    \nusing namespace std;\nint main()\n{   \n    typedef vector&lt;int&gt; IntContainer;\n\
    \    typedef IntContainer::iterator IntIterator;\n\n    IntContainer vw;\n\n \
    \   //...\n\n    // find 5\n    IntIterator i = find(vw.begin(), vw.end(), 5);\n\
    \n    if (i != vw.end()) {\n        // found it\n    } else {\n        // doesn't\
    \ exist\n    }\n\n    return 0;\n}\n</code></pre>\n</div>"
- - Concatenating two std::vectors
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>vector1.insert( vector1.end(),\
    \ vector2.begin(), vector2.end() );\n</code></pre>\n</div>"
- - Concatenating two std::vectors
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>If you are using C++11,  and\
    \ wish to move the elements rather than merely copying them, you can use <a href=\"\
    http://en.cppreference.com/w/cpp/iterator/move_iterator\" rel=\"nofollow noreferrer\"\
    ><code>std::move_iterator</code></a> along with insert (or copy):</p>\n<pre><code>#include\
    \ &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n\nint\
    \ main(int argc, char** argv) {\n  std::vector&lt;int&gt; dest{1,2,3,4,5};\n \
    \ std::vector&lt;int&gt; src{6,7,8,9,10};\n\n  // Move elements from src to dest.\n\
    \  // src is left in undefined but safe-to-destruct state.\n  dest.insert(\n \
    \     dest.end(),\n      std::make_move_iterator(src.begin()),\n      std::make_move_iterator(src.end())\n\
    \    );\n\n  // Print out concatenated vector.\n  std::copy(\n      dest.begin(),\n\
    \      dest.end(),\n      std::ostream_iterator&lt;int&gt;(std::cout, \"\\n\"\
    )\n    );\n\n  return 0;\n}\n</code></pre>\n<p>This will not be more efficient\
    \ for the example with ints, since moving them is no more efficient than copying\
    \ them, but for a data structure with optimized moves, it can avoid copying unnecessary\
    \ state:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\
    #include &lt;iterator&gt;\n\nint main(int argc, char** argv) {\n  std::vector&lt;std::vector&lt;int&gt;&gt;\
    \ dest{{1,2,3,4,5}, {3,4}};\n  std::vector&lt;std::vector&lt;int&gt;&gt; src{{6,7,8,9,10}};\n\
    \n  // Move elements from src to dest.\n  // src is left in undefined but safe-to-destruct\
    \ state.\n  dest.insert(\n      dest.end(),\n      std::make_move_iterator(src.begin()),\n\
    \      std::make_move_iterator(src.end())\n    );\n\n  return 0;\n}\n</code></pre>\n\
    <p>After the move, src's element is left in an undefined but safe-to-destruct\
    \ state, and its former elements were transfered directly to dest's new element\
    \ at the end.</p>\n</div>"
- - Concatenating two std::vectors
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I would use the <a href=\"http://cppreference.com/wiki/stl/vector/insert\"\
    \ rel=\"noreferrer\">insert function</a>, something like:</p>\n<pre><code>vector&lt;int&gt;\
    \ a, b;\n//fill with data\nb.insert(b.end(), a.begin(), a.end());\n</code></pre>\n\
    </div>"
- - Are the days of passing const std::string & as a parameter over?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The reason Herb said what he\
    \ said is because of cases like this.</p>\n<p>Let's say I have function <code>A</code>\
    \ which calls function <code>B</code>, which calls function <code>C</code>. And\
    \ <code>A</code> passes a string through <code>B</code> and into <code>C</code>.\
    \ <code>A</code> does not know or care about <code>C</code>; all <code>A</code>\
    \ knows about is <code>B</code>. That is, <code>C</code> is an implementation\
    \ detail of <code>B</code>.</p>\n<p>Let's say that A is defined as follows:</p>\n\
    <pre><code>void A()\n{\n  B(\"value\");\n}\n</code></pre>\n<p>If B and C take\
    \ the string by <code>const&amp;</code>, then it looks something like this:</p>\n\
    <pre><code>void B(const std::string &amp;str)\n{\n  C(str);\n}\n\nvoid C(const\
    \ std::string &amp;str)\n{\n  //Do something with `str`. Does not store it.\n\
    }\n</code></pre>\n<p>All well and good. You're just passing pointers around, no\
    \ copying, no moving, everyone's happy. <code>C</code> takes a <code>const&amp;</code>\
    \ because it doesn't store the string. It simply uses it.</p>\n<p>Now, I want\
    \ to make one simple change: <code>C</code> needs to store the string somewhere.</p>\n\
    <pre><code>void C(const std::string &amp;str)\n{\n  //Do something with `str`.\n\
    \  m_str = str;\n}\n</code></pre>\n<p>Hello, copy constructor and potential memory\
    \ allocation (ignore the <a href=\"https://stackoverflow.com/questions/10315041/meaning-of-acronym-sso-in-the-context-of-stdstring\"\
    >Short String Optimization (SSO)</a>). C++11's move semantics are supposed to\
    \ make it possible to remove needless copy-constructing, right? And <code>A</code>\
    \ passes a temporary; there's no reason why <code>C</code> should have to <em>copy</em>\
    \ the data. It should just abscond with what was given to it.</p>\n<p>Except it\
    \ can't. Because it takes a <code>const&amp;</code>.</p>\n<p>If I change <code>C</code>\
    \ to take its parameter by value, that just causes <code>B</code> to do the copy\
    \ into that parameter; I gain nothing.</p>\n<p>So if I had just passed <code>str</code>\
    \ by value through all of the functions, relying on <code>std::move</code> to\
    \ shuffle the data around, we wouldn't have this problem. If someone wants to\
    \ hold on to it, they can. If they don't, oh well.</p>\n<p>Is it more expensive?\
    \ Yes; moving into a value is more expensive than using references. Is it less\
    \ expensive than the copy? Not for small strings with SSO. Is it worth doing?</p>\n\
    <p>It depends on your use case. How much do you hate memory allocations?</p>\n\
    </div>"
- - Are the days of passing const std::string & as a parameter over?
  - "<div class=\"post-text\" itemprop=\"text\">\n<blockquote>\n<p>Are the days of\
    \ passing const std::string &amp; as a parameter over?</p>\n</blockquote>\n<p><strong>No</strong>.\
    \ Many people take this advice (including Dave Abrahams) beyond the domain it\
    \ applies to, and simplify it to apply to <em>all</em> <code>std::string</code>\
    \ parameters -- <em>Always</em> passing <code>std::string</code> by value is not\
    \ a \"best practice\" for any and all arbitrary parameters and applications because\
    \ the optimizations these talks/articles focus on apply <em>only to a restricted\
    \ set of cases</em>.</p>\n<p>If you're returning a value, mutating the parameter,\
    \ or taking the value, then passing by value could save expensive copying and\
    \ offer syntactical convenience.</p>\n<p>As ever, passing by const reference saves\
    \ much copying <em>when you don't need a copy</em>.</p>\n<p>Now to the specific\
    \ example:</p>\n<blockquote>\n<p>However inval is still quite a lot larger than\
    \ the size of a reference (which is usually implemented as a pointer). This is\
    \ because a std::string has various components including a pointer into the heap\
    \ and a member char[] for short string optimization. So it seems to me that passing\
    \ by reference is still a good idea. Can anyone explain why Herb might have said\
    \ this?</p>\n</blockquote>\n<p>If stack size is a concern (and assuming this is\
    \ not inlined/optimized), <code>return_val</code> + <code>inval</code> &gt; <code>return_val</code>\
    \ -- IOW, peak stack usage can be <em>reduced</em> by passing by value here (note:\
    \ oversimplification of ABIs). Meanwhile, passing by const reference can disable\
    \ the optimizations. The primary reason here is not to avoid stack growth, but\
    \ to ensure the optimization can be performed <em>where it is applicable</em>.</p>\n\
    <p>The days of passing by const reference aren't over -- the rules just more complicated\
    \ than they once were. If performance is important, you'll be wise to consider\
    \ how you pass these types, based on the details you use in your implementations.</p>\n\
    </div>"
- - Are the days of passing const std::string & as a parameter over?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This highly depends on the compiler's\
    \ implementation.</p>\n<p>However, it also depends on what you use.</p>\n<p>Lets\
    \ consider next functions : </p>\n<pre><code>bool foo1( const std::string v )\n\
    {\n  return v.empty();\n}\nbool foo2( const std::string &amp; v )\n{\n  return\
    \ v.empty();\n}\n</code></pre>\n<p>These functions are implemented in a separate\
    \ compilation unit in order to avoid inlining. Then :<br/>\n1. If you pass a literal\
    \ to these two functions, you will not see much difference in performances. In\
    \ both cases, a string object has to be created<br/>\n2. If you pass another std::string\
    \ object, <code>foo2</code> will outperform <code>foo1</code>, because <code>foo1</code>\
    \ will do a deep copy.</p>\n<p>On my PC, using g++ 4.6.1, I got these results\
    \ :</p>\n<ul>\n<li>variable by reference: 1000000000 iterations -&gt; time elapsed:\
    \ 2.25912 sec</li>\n<li>variable by value: 1000000000 iterations -&gt; time elapsed:\
    \ 27.2259 sec</li>\n<li>literal by reference: 100000000 iterations -&gt; time\
    \ elapsed: 9.10319 sec</li>\n<li>literal by value: 100000000 iterations -&gt;\
    \ time elapsed: 8.62659 sec</li>\n</ul>\n</div>"
- - Read whole ASCII file into C++ std::string [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><strong>Update:</strong> Turns\
    \ out that this method, while following STL idioms well, is actually surprisingly\
    \ inefficient! Don't do this with large files. (See: <a href=\"http://insanecoding.blogspot.com/2011/11/how-to-read-in-file-in-c.html\"\
    \ rel=\"noreferrer\">http://insanecoding.blogspot.com/2011/11/how-to-read-in-file-in-c.html</a>)</p>\n\
    <p>You can make a streambuf iterator out of the file and initialize the string\
    \ with it:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;fstream&gt;\n\
    #include &lt;streambuf&gt;\n\nstd::ifstream t(\"file.txt\");\nstd::string str((std::istreambuf_iterator&lt;char&gt;(t)),\n\
    \                 std::istreambuf_iterator&lt;char&gt;());\n</code></pre>\n<p>Not\
    \ sure where you're getting the <code>t.open(\"file.txt\", \"r\")</code> syntax\
    \ from. As far as I know that's not a method that <code>std::ifstream</code> has.\
    \ It looks like you've confused it with C's <code>fopen</code>.</p>\n<p><strong>Edit:</strong>\
    \ Also note the extra parentheses around the first argument to the string constructor.\
    \ <em>These are essential</em>. They prevent the problem known as the \"<a href=\"\
    http://web.archive.org/web/20110426155617/http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=439\"\
    \ rel=\"noreferrer\">most vexing parse</a>\", which in this case won't actually\
    \ give you a compile error like it usually does, but will give you interesting\
    \ (read: wrong) results.</p>\n<p>Following KeithB's point in the comments, here's\
    \ a way to do it that allocates all the memory up front (rather than relying on\
    \ the string class's automatic reallocation):</p>\n<pre><code>#include &lt;string&gt;\n\
    #include &lt;fstream&gt;\n#include &lt;streambuf&gt;\n\nstd::ifstream t(\"file.txt\"\
    );\nstd::string str;\n\nt.seekg(0, std::ios::end);   \nstr.reserve(t.tellg());\n\
    t.seekg(0, std::ios::beg);\n\nstr.assign((std::istreambuf_iterator&lt;char&gt;(t)),\n\
    \            std::istreambuf_iterator&lt;char&gt;());\n</code></pre>\n</div>"
- - Read whole ASCII file into C++ std::string [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There are a couple of possibilities.\
    \ One I like to use a stringstream as a go-between:</p>\n<pre><code>std::ifstream\
    \ t(\"file.txt\");\nstd::stringstream buffer;\nbuffer &lt;&lt; t.rdbuf();\n</code></pre>\n\
    <p>Now the contents of \"file.txt\" are available in a string as <code>buffer.str()</code>.</p>\n\
    <p>Another possibility (though I certainly don't like it as well) is much more\
    \ like your original:</p>\n<pre><code>std::ifstream t(\"file.txt\");\nt.seekg(0,\
    \ std::ios::end);\nsize_t size = t.tellg();\nstd::string buffer(size, ' ');\n\
    t.seekg(0);\nt.read(&amp;buffer[0], size); \n</code></pre>\n<p>Officially, this\
    \ isn't required to work under the C++98 or 03 standard (string isn't required\
    \ to store data contiguously) but in fact it works with all known implementations,\
    \ and C++11 and later do require contiguous storage, so it's guaranteed to work\
    \ with them.</p>\n<p>As to why I don't like the latter as well: first, because\
    \ it's longer and harder to read. Second, because it requires that you initialize\
    \ the contents of the string with data you don't care about, then immediately\
    \ write over that data (yes, the time to initialize is usually trivial compared\
    \ to the reading, so it probably doesn't matter, but to me it still feels kind\
    \ of wrong). Third, in a text file, position X in the file doesn't necessarily\
    \ mean you'll have read X characters to reach that point -- it's not required\
    \ to take into account things like line-end translations. On real systems that\
    \ do such translations (e.g., Windows) the translated form is shorter than what's\
    \ in the file (i.e., \"\\r\\n\" in the file becomes \"\\n\" in the translated\
    \ string) so all you've done is reserved a little extra space you never use. Again,\
    \ doesn't really cause a major problem but feels a little wrong anyway.</p>\n\
    </div>"
- - Read whole ASCII file into C++ std::string [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I think best way is to use string\
    \ stream. simple and quick !!!</p>\n<pre><code>ifstream inFile;\ninFile.open(inFileName);//open\
    \ the input file\n\nstringstream strStream;\nstrStream &lt;&lt; inFile.rdbuf();//read\
    \ the file\nstring str = strStream.str();//str holds the content of the file\n\
    \ncout &lt;&lt; str &lt;&lt; endl;//you can do anything with the string!!!\n</code></pre>\n\
    </div>"
- - Why is iostream::eof inside a loop condition considered wrong?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Because <code>iostream::eof</code>\
    \ will only return <code>true</code> <em>after</em> reading the end of the stream.\
    \ It does <em>not</em> indicate, that the next read will be the end of the stream.</p>\n\
    <p>Consider this (and assume then next read will be at the end of the stream):</p>\n\
    <pre><code>while(!inStream.eof()){\n  int data;\n  // yay, not end of stream yet,\
    \ now read ...\n  inStream &gt;&gt; data;\n  // oh crap, now we read the end and\
    \ *only* now the eof bit will be set (as well as the fail bit)\n  // do stuff\
    \ with (now uninitialized) data\n}\n</code></pre>\n<p>Against this:</p>\n<pre><code>int\
    \ data;\nwhile(inStream &gt;&gt; data){\n  // when we land here, we can be sure\
    \ that the read was successful.\n  // if it wasn't, the returned stream from operator&gt;&gt;\
    \ would be converted to false\n  // and the loop wouldn't even be entered\n  //\
    \ do stuff with correctly initialized data (hopefully)\n}\n</code></pre>\n<p>And\
    \ on your second question: Because</p>\n<pre><code>if(scanf(\"...\",...)!=EOF)\n\
    </code></pre>\n<p>is the same as</p>\n<pre><code>if(!(inStream &gt;&gt; data).eof())\n\
    </code></pre>\n<p>and <strong>not</strong> the same as</p>\n<pre><code>if(!inStream.eof())\n\
    \    inFile &gt;&gt; data\n</code></pre>\n</div>"
- - Why is iostream::eof inside a loop condition considered wrong?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><strong>Bottom-line top:</strong>\
    \  With proper handling of white-space, the following is how <code>eof</code>\
    \ can be used (and even, be more reliable than <code>fail()</code> for error checking):</p>\n\
    <pre><code>while( !(in&gt;&gt;std::ws).eof() ) {  \n   int data;\n   in &gt;&gt;\
    \ data;\n   if ( in.fail() ) /* handle with break or throw */; \n   // now use\
    \ data\n}    \n</code></pre>\n<p>(<em>Thanks Tony D for the suggestion to highlight\
    \ the answer. See his comment below for an example to why this is more robust.</em>)</p>\n\
    <hr/>\n<p>The main argument against using <code>eof()</code> seems to be missing\
    \ an important subtlety about the role of white space. My proposition is that,\
    \ checking <code>eof()</code> explicitly is not only not \"<em>always wrong</em>\"\
    \ -- which seems to be an overriding opinion in this and similar SO threads --,\
    \ but with proper handling of white-space, it provides for a cleaner and more\
    \ reliable error handling, and is the <em>always correct</em> solution (although,\
    \ not necessarily the tersest).</p>\n<p>To summarize what is being suggested as\
    \ the \"proper\" termination and read order is the following:</p>\n<pre><code>int\
    \ data;\nwhile(in &gt;&gt; data) {  /* ... */ }\n\n// which is equivalent to \n\
    while( !(in &gt;&gt; data).fail() )  {  /* ... */ }\n</code></pre>\n<p>The failure\
    \ due to read attempt beyond eof is taken as the termination condition.  This\
    \ means is that there is no easy way to distinguish between a successful stream\
    \ and one that really fails for reasons other than eof. Take the following streams:\
    \ </p>\n<ul>\n<li><code>1 2 3 4 5&lt;eof&gt;</code></li>\n<li><code>1 2 a 3 4\
    \ 5&lt;eof&gt;</code> </li>\n<li><code>a&lt;eof&gt;</code></li>\n</ul>\n<p><code>while(in&gt;&gt;data)</code>\
    \ terminates with a set <code>failbit</code> for <em>all</em> three input. In\
    \ the first and third, <code>eofbit</code> is also set. So past the loop one needs\
    \ very ugly extra logic to distinguish a proper input (1st) from improper ones\
    \ (2nd and 3rd).</p>\n<p>Whereas, take the following: </p>\n<pre><code>while(\
    \ !in.eof() ) \n{  \n   int data;\n   in &gt;&gt; data;\n   if ( in.fail() ) /*\
    \ handle with break or throw */; \n   // now use data\n}    \n</code></pre>\n\
    <p>Here, <code>in.fail()</code> verifies that as long as there is something to\
    \ read, it is the correct one. It's purpose is not a mere while-loop terminator.\
    \ </p>\n<p>So far so good, but what happens if there is trailing space in the\
    \ stream -- what sounds like the major concern against <code>eof()</code> as terminator?</p>\n\
    <p>We don't need to surrender our error handling; just eat up the white-space:</p>\n\
    <pre><code>while( !in.eof() ) \n{  \n   int data;\n   in &gt;&gt; data &gt;&gt;\
    \ ws; // eat whitespace with std::ws\n   if ( in.fail() ) /* handle with break\
    \ or throw */; \n   // now use data\n}\n</code></pre>\n<p><code>std::ws</code>\
    \ skips any potential (zero or more) trailing space in the stream while setting\
    \ the <code>eofbit</code>, and <strong>not the <code>failbit</code></strong>.\
    \  So, <code>in.fail()</code> works as expected, as long as there is at least\
    \ one data to read. If all-blank streams are also acceptable, then the correct\
    \ form is:</p>\n<pre><code>while( !(in&gt;&gt;ws).eof() ) \n{  \n   int data;\n\
    \   in &gt;&gt; data; \n   if ( in.fail() ) /* handle with break or throw */;\
    \ \n   /* this will never fire if the eof is reached cleanly */\n   // now use\
    \ data\n}\n</code></pre>\n<p><strong>Summary:</strong> A properly constructed\
    \ <code>while(!eof)</code> is not only possible and not wrong, but allows data\
    \ to be localized within scope, and provides a cleaner separation of error checking\
    \ from business as usual.  That being said, <code>while(!fail)</code> is inarguably\
    \ a more common and terse idiom, and may be preferred in simple (single data per\
    \ read type of) scenarios. </p>\n</div>"
- - Why is iostream::eof inside a loop condition considered wrong?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Because if programmers don't\
    \ write <code>while(stream &gt;&gt; n)</code>, they possibly write this:</p>\n\
    <pre><code>while(!stream.eof())\n{\n    stream &gt;&gt; n;\n    //some work on\
    \ n;\n}\n</code></pre>\n<p>Here the problem is, you cannot do <code>some work\
    \ on n</code> without first checking if the stream read was successful, because\
    \ if it was unsuccessful, your <code>some work on n</code> would produce undesired\
    \ result.</p>\n<p>The whole point is that, <code>eofbit</code>, <code>badbit</code>,\
    \ or <code>failbit</code> are set <strong>after an attempt is made to read from\
    \ the stream.</strong> So if <code>stream &gt;&gt; n</code> fails, then <code>eofbit</code>,\
    \ <code>badbit</code>, or <code>failbit</code> is set immediately, so its more\
    \ idiomatic if you write <code>while (stream &gt;&gt; n)</code>, because the returned\
    \ object <code>stream</code> converts to <code>false</code> if there was some\
    \ failure in reading from the stream and consequently the loop stops. And it converts\
    \ to <code>true</code> if the read was successful and the loop continues.</p>\n\
    </div>"
- - Read file line by line using ifstream in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>First, make an <code>ifstream</code>:</p>\n\
    <pre><code>#include &lt;fstream&gt;\nstd::ifstream infile(\"thefile.txt\");\n\
    </code></pre>\n<p>The two standard methods are:</p>\n<ol>\n<li><p>Assume that\
    \ every line consists of two numbers and read token by token:</p>\n<pre><code>int\
    \ a, b;\nwhile (infile &gt;&gt; a &gt;&gt; b)\n{\n    // process pair (a,b)\n\
    }\n</code></pre></li>\n<li><p>Line-based parsing, using string streams:</p>\n\
    <pre><code>#include &lt;sstream&gt;\n#include &lt;string&gt;\n\nstd::string line;\n\
    while (std::getline(infile, line))\n{\n    std::istringstream iss(line);\n   \
    \ int a, b;\n    if (!(iss &gt;&gt; a &gt;&gt; b)) { break; } // error\n\n   \
    \ // process pair (a,b)\n}\n</code></pre></li>\n</ol>\n<p>You shouldn't mix (1)\
    \ and (2), since the token-based parsing doesn't gobble up newlines, so you may\
    \ end up with spurious empty lines if you use <code>getline()</code> after token-based\
    \ extraction got you to the end of a line already.</p>\n</div>"
- - Read file line by line using ifstream in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Use <code>ifstream</code> to\
    \ read data from a file:</p>\n<pre><code>std::ifstream input( \"filename.ext\"\
    \ );\n</code></pre>\n<p>If you really need to read line by line, then do this:</p>\n\
    <pre><code>for( std::string line; getline( input, line ); )\n{\n    ...for each\
    \ line in input...\n}\n</code></pre>\n<p>But you probably just need to extract\
    \ coordinate pairs:</p>\n<pre><code>int x, y;\ninput &gt;&gt; x &gt;&gt; y;\n\
    </code></pre>\n<p><strong>Update:</strong></p>\n<p>In your code you use <code>ofstream\
    \ myfile;</code>, however the <code>o</code> in <code>ofstream</code> stands for\
    \ <code>output</code>. If you want to read from the file (input) use <code>ifstream</code>.\
    \ If you want to both read and write use <code>fstream</code>.</p>\n</div>"
- - Read file line by line using ifstream in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Reading a file line by line in\
    \ C++ can be done in some different ways.</p>\n<h2>[Fast] Loop with std::getline()</h2>\n\
    <p>The simplest approach is to open an std::ifstream and loop using std::getline()\
    \ calls. The code is clean and easy to understand.</p>\n<pre><code>#include &lt;fstream&gt;\n\
    \nstd::ifstream file(FILENAME);\nif (file.is_open()) {\n    std::string line;\n\
    \    while (getline(file, line)) {\n        // using printf() in all tests for\
    \ consistency\n        printf(\"%s\", line.c_str());\n    }\n    file.close();\n\
    }\n</code></pre>\n<h2>[Fast] Use Boost's file_description_source</h2>\n<p>Another\
    \ possibility is to use the Boost library, but the code gets a bit more verbose.\
    \ The performance is quite similar to the code above (Loop with std::getline()).</p>\n\
    <pre><code>#include &lt;boost/iostreams/device/file_descriptor.hpp&gt;\n#include\
    \ &lt;boost/iostreams/stream.hpp&gt;\n#include &lt;fcntl.h&gt;\n\nnamespace io\
    \ = boost::iostreams;\n\nvoid readLineByLineBoost() {\n    int fdr = open(FILENAME,\
    \ O_RDONLY);\n    if (fdr &gt;= 0) {\n        io::file_descriptor_source fdDevice(fdr,\
    \ io::file_descriptor_flags::close_handle);\n        io::stream &lt;io::file_descriptor_source&gt;\
    \ in(fdDevice);\n        if (fdDevice.is_open()) {\n            std::string line;\n\
    \            while (std::getline(in, line)) {\n                // using printf()\
    \ in all tests for consistency\n                printf(\"%s\", line.c_str());\n\
    \            }\n            fdDevice.close();\n        }\n    }\n}\n</code></pre>\n\
    <h2>[Fastest] Use C code</h2>\n<p>If performance is critical for your software,\
    \ you may consider using the C language. This code can be 4-5 times faster than\
    \ the C++ versions above, see benchmark below</p>\n<pre><code>FILE* fp = fopen(FILENAME,\
    \ \"r\");\nif (fp == NULL)\n    exit(EXIT_FAILURE);\n\nchar* line = NULL;\nsize_t\
    \ len = 0;\nwhile ((getline(&amp;line, &amp;len, fp)) != -1) {\n    // using printf()\
    \ in all tests for consistency\n    printf(\"%s\", line);\n}\nfclose(fp);\nif\
    \ (line)\n    free(line);\n</code></pre>\n<h2>Benchmark -- Which one is faster?</h2>\n\
    <p>I have done some performance benchmarks with the code above and the results\
    \ are interesting. I have tested the code with ASCII files that contain 100,000\
    \ lines, 1,000,000 lines and 10,000,000 lines of text. Each line of text contains\
    \ 10 words in average. The program is compiled with <code>-O3</code> optimization\
    \ and its output is forwarded to <code>/dev/null</code> in order to remove the\
    \ logging time variable from the measurement. Last, but not least, each piece\
    \ of code logs each line with the <code>printf()</code> function for consistency.</p>\n\
    <p>The results show the time (in ms) that each piece of code took to read the\
    \ files.</p>\n<p>The performance difference between the two C++ approaches is\
    \ minimal and shouldn't make any difference in practice. The performance of the\
    \ C code is what makes the benchmark impressive and can be a game changer in terms\
    \ of speed.</p>\n<pre><code>                             10K lines     100K lines\
    \     1000K lines\nLoop with std::getline()         105ms          894ms     \
    \     9773ms\nBoost code                       106ms          968ms          9561ms\n\
    C code                            23ms          243ms          2397ms\n</code></pre>\n\
    <p><a href=\"https://i.stack.imgur.com/fKKqc.png\" rel=\"noreferrer\"><img alt=\"\
    enter image description here\" src=\"https://i.stack.imgur.com/fKKqc.png\"/></a></p>\n\
    </div>"
- - Difference between static and shared libraries?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Shared libraries are .so (or\
    \ in Windows .dll, or in OS X .dylib) files. All the code relating to the library\
    \ is in this file, and it is referenced by programs using it at run-time. A program\
    \ using a shared library only makes reference to the code that it uses in the\
    \ shared library.</p>\n<p>Static libraries are .a (or in Windows .lib) files.\
    \ All the code relating to the library is in this file, and it is directly linked\
    \ into the program at compile time. A program using a static library takes copies\
    \ of the code that it uses from the static library and makes it part of the program.\
    \ [Windows also has .lib files which are used to reference .dll files, but they\
    \ act the same way as the first one].</p>\n<p>There are advantages and disadvantages\
    \ in each method.</p>\n<p>Shared libraries reduce the amount of code that is duplicated\
    \ in each program that makes use of the library, keeping the binaries small. It\
    \ also allows you to replace the shared object with one that is functionally equivalent,\
    \ but may have added performance benefits without needing to recompile the program\
    \ that makes use of it. Shared libraries will, however have a small additional\
    \ cost for the execution of the functions as well as a run-time loading cost as\
    \ all the symbols in the library need to be connected to the things they use.\
    \ Additionally, shared libraries can be loaded into an application at run-time,\
    \ which is the general mechanism for implementing binary plug-in systems.</p>\n\
    <p>Static libraries increase the overall size of the binary, but it means that\
    \ you don't need to carry along a copy of the library that is being used. As the\
    \ code is connected at compile time there are not any additional run-time loading\
    \ costs. The code is simply there.</p>\n<p>Personally, I prefer shared libraries,\
    \ but use static libraries when needing to ensure that the binary does not have\
    \ many external dependencies that may be difficult to meet, such as specific versions\
    \ of the C++ standard library or specific versions of the Boost C++ library.</p>\n\
    </div>"
- - Difference between static and shared libraries?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>A static library is like a bookstore,\
    \ and a shared library is like... a library. With the former, you get your own\
    \ copy of the book/function to take home; with the latter you and everyone else\
    \ go to the library to use the same book/function. So anyone who wants to use\
    \ the (shared) library needs to know where it is, because you have to \"go get\"\
    \ the book/function. With a static library, the book/function is yours to own,\
    \ and you keep it within your home/program, and once you have it you don't care\
    \ where or when you got it.</p>\n</div>"
- - Difference between static and shared libraries?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Simplified:</p>\n<ul>\n<li>Static\
    \ linking: one large executable</li>\n<li>Dynamic linking: a small executable\
    \ plus one or more library files (.dll files on Windows, .so on Linux, or .dylib\
    \ on macOS)</li>\n</ul>\n</div>"
- - What are Aggregates and PODs and how/why are they special?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h1>How to read:</h1>\n<p>This article\
    \ is rather long. If you want to know about both aggregates and PODs (Plain Old\
    \ Data) take time and read it. If you are interested just in aggregates, read\
    \ only the first part. If you are interested only in PODs then you must first\
    \ read the definition, implications, and examples of aggregates and then you <em>may</em>\
    \ jump to PODs but I would still recommend reading the first part in its entirety.\
    \ The notion of aggregates is essential for defining PODs. If you find any errors\
    \ (even minor, including grammar, stylistics, formatting, syntax, etc.) please\
    \ leave a comment, I'll edit.</p>\n<h1>What are aggregates and why they are special\
    \ </h1>\n<p><strong>Formal definition from the C++ standard (<em>C++03 8.5.1 Â§1</em>)</strong>:</p>\n\
    <blockquote>\n<p>An aggregate is an array or a class (clause 9) with no user-declared\
    \ \n  constructors (12.1), no private or protected non-static data members (clause\
    \ 11),\n  no base classes (clause 10), and no virtual functions (10.3).</p>\n\
    </blockquote>\n<p>So, OK, let's parse this definition. First of all, any array\
    \ is an aggregate. A class can also be an aggregate ifâ¦ wait! nothing is said\
    \ about structs or unions, can't they be aggregates? Yes, they can. In C++, the\
    \ term <code>class</code> refers to all classes, structs, and unions. So, a class\
    \ (or struct, or union) is an aggregate if and only if it satisfies the criteria\
    \ from the above definitions. What do these criteria imply?</p>\n<ul>\n<li><p>This\
    \ does not mean an aggregate class cannot have constructors, in fact it can have\
    \ a default constructor and/or a copy constructor as long as they are implicitly\
    \ declared by the compiler, and not explicitly by the user</p></li>\n<li><p>No\
    \ private or protected <strong><em>non-static data members</em></strong>. You\
    \ can have as many private and protected member functions (but not constructors)\
    \ as well as as many private or protected <strong><em>static</em></strong> data\
    \ members and member functions as you like and not violate the rules for aggregate\
    \ classes</p></li>\n<li><p>An aggregate class can have a user-declared/user-defined\
    \ copy-assignment operator and/or destructor</p></li>\n<li><p>An array is an aggregate\
    \ even if it is an array of non-aggregate class type. </p></li>\n</ul>\n<p>Now\
    \ let's look at some examples:</p>\n<pre><code>class NotAggregate1\n{\n  virtual\
    \ void f() {} //remember? no virtual functions\n};\n\nclass NotAggregate2\n{\n\
    \  int x; //x is private by default and non-static \n};\n\nclass NotAggregate3\n\
    {\npublic:\n  NotAggregate3(int) {} //oops, user-defined constructor\n};\n\nclass\
    \ Aggregate1\n{\npublic:\n  NotAggregate1 member1;   //ok, public member\n  Aggregate1&amp;\
    \ operator=(Aggregate1 const &amp; rhs) {/* */} //ok, copy-assignment  \nprivate:\n\
    \  void f() {} // ok, just a private function\n};\n</code></pre>\n<p>You get the\
    \ idea. Now let's see how aggregates are special. They, unlike non-aggregate classes,\
    \ can be initialized with curly braces <code>{}</code>. This initialization syntax\
    \ is commonly known for arrays, and we just learnt that these are aggregates.\
    \ So, let's start with them.</p>\n<p><code>Type array_name[n] = {a<sub>1</sub>,\
    \ a<sub>2</sub>, â¦, a<sub>m</sub>};</code></p>\n<p><strong><em>if(m == n)</em></strong><br/>\n\
    \   the i<sup>th</sup> element of the array is initialized with a<sub>i</sub><br/>\n\
    <strong><em>else if(m &lt; n)</em></strong><br/>\n  the first m elements of the\
    \ array are initialized with a<sub>1</sub>, a<sub>2</sub>, â¦, a<sub>m</sub> and\
    \ the other <code>n - m</code> elements are, if possible, <em>value-initialized</em>\
    \ (see below for the explanation of the term)<br/>\n<strong><em>else if(m &gt;\
    \ n)</em></strong><br/>\n   the compiler will issue an error<br/>\n<strong><em>else</em></strong>\
    \ <em>(this is the case when n isn't specified at all like <code>int a[] = {1,\
    \ 2, 3};</code>)</em><br/>\n the size of the array (n) is assumed to be equal\
    \ to m, so <code>int a[] = {1, 2, 3};</code> is equivalent to <code>int a[3] =\
    \ {1, 2, 3};</code></p>\n<p>When an object of scalar type (<code>bool</code>,\
    \ <code>int</code>, <code>char</code>, <code>double</code>, pointers, etc.) is\
    \ <em>value-initialized</em> it means it is initialized with <code>0</code> for\
    \ that type (<code>false</code> for <code>bool</code>, <code>0.0</code> for <code>double</code>,\
    \ etc.). When an object of class type with a user-declared default constructor\
    \ is value-initialized its default constructor is called. If the default constructor\
    \ is implicitly defined then all nonstatic members are recursively value-initialized.\
    \ This definition is imprecise and a bit incorrect but it should give you the\
    \ basic idea. A reference cannot be value-initialized. Value-initialization for\
    \ a non-aggregate class can fail if, for example, the class has no appropriate\
    \ default constructor.</p>\n<p>Examples of array initialization:</p>\n<pre><code>class\
    \ A\n{\npublic:\n  A(int) {} //no default constructor\n};\nclass B\n{\npublic:\n\
    \  B() {} //default constructor available\n};\nint main()\n{\n  A a1[3] = {A(2),\
    \ A(1), A(14)}; //OK n == m\n  A a2[3] = {A(2)}; //ERROR A has no default constructor.\
    \ Unable to value-initialize a2[1] and a2[2]\n  B b1[3] = {B()}; //OK b1[1] and\
    \ b1[2] are value initialized, in this case with the default-ctor\n  int Array1[1000]\
    \ = {0}; //All elements are initialized with 0;\n  int Array2[1000] = {1}; //Attention:\
    \ only the first element is 1, the rest are 0;\n  bool Array3[1000] = {}; //the\
    \ braces can be empty too. All elements initialized with false\n  int Array4[1000];\
    \ //no initializer. This is different from an empty {} initializer in that\n \
    \ //the elements in this case are not value-initialized, but have indeterminate\
    \ values \n  //(unless, of course, Array4 is a global array)\n  int array[2] =\
    \ {1, 2, 3, 4}; //ERROR, too many initializers\n}\n</code></pre>\n<p>Now let's\
    \ see how aggregate classes can be initialized with braces. Pretty much the same\
    \ way. Instead of the array elements we will initialize the non-static data members\
    \ in the order of their appearance in the class definition (they are all public\
    \ by definition). If there are fewer initializers than members, the rest are value-initialized.\
    \ If it is impossible to value-initialize one of the members which were not explicitly\
    \ initialized, we get a compile-time error. If there are more initializers than\
    \ necessary, we get a compile-time error as well.</p>\n<pre><code>struct X\n{\n\
    \  int i1;\n  int i2;\n};\nstruct Y\n{\n  char c;\n  X x;\n  int i[2];\n  float\
    \ f; \nprotected:\n  static double d;\nprivate:\n  void g(){}      \n}; \n\nY\
    \ y = {'a', {10, 20}, {20, 30}};\n</code></pre>\n<p>In the above example <code>y.c</code>\
    \ is initialized with <code>'a'</code>, <code>y.x.i1</code> with <code>10</code>,\
    \ <code>y.x.i2</code> with <code>20</code>, <code>y.i[0]</code> with <code>20</code>,\
    \ <code>y.i[1]</code> with <code>30</code> and <code>y.f</code> is value-initialized,\
    \ that is, initialized with <code>0.0</code>. The protected static member <code>d</code>\
    \ is not initialized at all, because it is <code>static</code>.</p>\n<p>Aggregate\
    \ unions are different in that you may initialize only their first member with\
    \ braces. I think that if you are advanced enough in C++ to even consider using\
    \ unions (their use may be very dangerous and must be thought of carefully), you\
    \ could look up the rules for unions in the standard yourself :). </p>\n<p>Now\
    \ that we know what's special about aggregates, let's try to understand the restrictions\
    \ on classes; that is, why they are there. We should understand that memberwise\
    \ initialization with braces implies that the class is nothing more than the sum\
    \ of its members. If a user-defined constructor is present, it means that the\
    \ user needs to do some extra work to initialize the members therefore brace initialization\
    \ would be incorrect. If virtual functions are present, it means that the objects\
    \ of this class have (on most implementations) a pointer to the so-called vtable\
    \ of the class, which is set in the constructor, so brace-initialization would\
    \ be insufficient. You could figure out the rest of the restrictions in a similar\
    \ manner as an exercise :).</p>\n<p>So enough about the aggregates. Now we can\
    \ define a stricter set of types, to wit, PODs</p>\n<h1>What are PODs and why\
    \ they are special</h1>\n<p><strong>Formal definition from the C++ standard (<em>C++03\
    \ 9 Â§4</em>)</strong>:</p>\n<blockquote>\n<p>A POD-struct is an aggregate class\n\
    \  that has no non-static data members of\n  type non-POD-struct, non-POD-union\
    \ (or\n  array of such types) or reference, and\n  has no user-defined copy assignment\n\
    \  operator and no user-defined\n  destructor. Similarly, a POD-union is\n  an\
    \ aggregate union that has no\n  non-static data members of type\n  non-POD-struct,\
    \ non-POD-union (or\n  array of such types) or reference, and\n  has no user-defined\
    \ copy assignment\n  operator and no user-defined\n  destructor. A POD class is\
    \ a class\n  that is either a POD-struct or a\n  POD-union.</p>\n</blockquote>\n\
    <p>Wow, this one's tougher to parse, isn't it? :) Let's leave unions out (on the\
    \ same grounds as above) and rephrase in a bit clearer way:</p>\n<blockquote>\n\
    <p>An aggregate class is called a POD if\n  it has no user-defined copy-assignment\n\
    \  operator and destructor and none of\n  its nonstatic members is a non-POD\n\
    \  class, array of non-POD, or a\n  reference.</p>\n</blockquote>\n<p>What does\
    \ this definition imply? (Did I mention <strong>POD</strong> stands for <strong><em>Plain\
    \ Old Data</em></strong>?)</p>\n<ul>\n<li>All POD classes are aggregates, or,\
    \ to put it the other way around, if a class is not an aggregate then it is sure\
    \ not a POD</li>\n<li>Classes, just like structs, can be PODs even though the\
    \ standard term is POD-struct for both cases</li>\n<li>Just like in the case of\
    \ aggregates, it doesn't matter what static members the class has</li>\n</ul>\n\
    <p>Examples:</p>\n<pre><code>struct POD\n{\n  int x;\n  char y;\n  void f() {}\
    \ //no harm if there's a function\n  static std::vector&lt;char&gt; v; //static\
    \ members do not matter\n};\n\nstruct AggregateButNotPOD1\n{\n  int x;\n  ~AggregateButNotPOD1()\
    \ {} //user-defined destructor\n};\n\nstruct AggregateButNotPOD2\n{\n  AggregateButNotPOD1\
    \ arrOfNonPod[3]; //array of non-POD class\n};\n</code></pre>\n<p>POD-classes,\
    \ POD-unions, scalar types, and arrays of such types are collectively called <strong><em>POD-types.</em></strong><br/>\n\
    PODs are special in many ways. I'll provide just some examples.</p>\n<ul>\n<li><p>POD-classes\
    \ are the closest to C structs. Unlike them, PODs can have member functions and\
    \ arbitrary static members, but neither of these two change the memory layout\
    \ of the object. So if you want to write a more or less portable dynamic library\
    \ that can be used from C and even .NET, you should try to make all your exported\
    \ functions take and return only parameters of POD-types.</p></li>\n<li><p>The\
    \ lifetime of objects of non-POD class type begins when the constructor has finished\
    \ and ends when the destructor has finished. For POD classes, the lifetime begins\
    \ when storage for the object is occupied and finishes when that storage is released\
    \ or reused.  </p></li>\n<li><p>For objects of POD types it is guaranteed by the\
    \ standard that when you <code>memcpy</code> the contents of your object into\
    \ an array of char or unsigned char, and then <code>memcpy</code> the contents\
    \ back into your object, the object will hold its original value. Do note that\
    \ there is no such guarantee for objects of non-POD types. Also, you can safely\
    \ copy POD objects with <code>memcpy</code>. The following example assumes T is\
    \ a POD-type:</p>\n<pre><code>#define N sizeof(T)\nchar buf[N];\nT obj; // obj\
    \ initialized to its original value\nmemcpy(buf, &amp;obj, N); // between these\
    \ two calls to memcpy,\n// obj might be modified\nmemcpy(&amp;obj, buf, N); //\
    \ at this point, each subobject of obj of scalar type\n// holds its original value\n\
    </code></pre></li>\n<li><p>goto statement. As you may know, it is illegal (the\
    \ compiler should issue an error) to make a jump via goto from a point where some\
    \ variable was not yet in scope to a point where it is already in scope. This\
    \ restriction applies only if the variable is of non-POD type. In the following\
    \ example <code>f()</code> is ill-formed whereas <code>g()</code> is well-formed.\
    \ Note that Microsoft's compiler is too liberal with this ruleâit just issues\
    \ a warning in both cases.</p>\n<pre><code>int f()\n{\n  struct NonPOD {NonPOD()\
    \ {}};\n  goto label;\n  NonPOD x;\nlabel:\n  return 0;\n}\n\nint g()\n{\n  struct\
    \ POD {int i; char c;};\n  goto label;\n  POD x;\nlabel:\n  return 0;\n}\n</code></pre></li>\n\
    <li><p>It is guaranteed that there will be no padding in the beginning of a POD\
    \ object. In other words, if a POD-class A's first member is of type T, you can\
    \ safely <code>reinterpret_cast</code> from <code>A*</code> to <code>T*</code>\
    \ and get the pointer to the first member and vice versa.</p></li>\n</ul>\n<p>The\
    \ list goes on and onâ¦</p>\n<h1>Conclusion</h1>\n<p>It is important to understand\
    \ what exactly a POD is because many language features, as you see, behave differently\
    \ for them.</p>\n</div>"
- - What are Aggregates and PODs and how/why are they special?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h1>What changes for C++11?</h1>\n\
    <h2>Aggregates</h2>\n<p>The standard definition of an aggregate has changed slightly,\
    \ but it's still pretty much the same:</p>\n<blockquote>\n<p>An aggregate is an\
    \ array or a class (Clause 9) with no user-provided constructors (12.1),\n  no\
    \ <em>brace-or-equal-initializers</em> for non-static data members (9.2), no private\
    \ or protected\n  non-static data members (Clause 11), no base classes (Clause\
    \ 10), and no virtual functions (10.3).</p>\n</blockquote>\n<p>Ok, what changed?</p>\n\
    <ol>\n<li><p>Previously, an aggregate could have no <em>user-declared</em> constructors,\
    \ but now it can't have <em>user-provided</em> constructors. Is there a difference?\
    \ Yes, there is, because now you can declare constructors and <em>default</em>\
    \ them:</p>\n<pre><code>struct Aggregate {\n    Aggregate() = default; // asks\
    \ the compiler to generate the default implementation\n};\n</code></pre>\n<p>This\
    \ is still an aggregate because a constructor (or any special member function)\
    \ <em>that is defaulted on the first declaration</em> is not user-provided.</p></li>\n\
    <li><p>Now an aggregate cannot have any <em>brace-or-equal-initializers</em> for\
    \ non-static data members. What does this mean? Well, this is just because with\
    \ this new standard, we can initialize members directly in the class like this:</p>\n\
    <pre><code>struct NotAggregate {\n    int x = 5; // valid in C++11\n    std::vector&lt;int&gt;\
    \ s{1,2,3}; // also valid\n};\n</code></pre>\n<p>Using this feature makes the\
    \ class no longer an aggregate because it's basically equivalent to providing\
    \ your own default constructor.</p></li>\n</ol>\n<p>So, what is an aggregate didn't\
    \ change much at all. It's still the same basic idea, adapted to the new features.</p>\n\
    <h2>What about PODs?</h2>\n<p>PODs went through a lot of changes. Lots of previous\
    \ rules about PODs were relaxed in this new standard, and the way the definition\
    \ is provided in the standard was radically changed.</p>\n<p>The idea of a POD\
    \ is to capture basically two distinct properties:</p>\n<ol>\n<li>It supports\
    \ static initialization, and</li>\n<li>Compiling a POD in C++ gives you the same\
    \ memory layout as a struct compiled in C.</li>\n</ol>\n<p>Because of this, the\
    \ definition has been split into two distinct concepts: <em>trivial</em> classes\
    \ and <em>standard-layout</em> classes, because these are more useful than POD.\
    \ The standard now rarely uses the term POD, preferring the more specific <em>trivial</em>\
    \ and <em>standard-layout</em> concepts.</p>\n<p>The new definition basically\
    \ says that a POD is a class that is both trivial and has standard-layout, and\
    \ this property must hold recursively for all non-static data members:</p>\n<blockquote>\n\
    <p>A POD struct is a non-union class that is both a trivial class and a standard-layout\
    \ class,\n  and has no non-static data members of type non-POD struct, non-POD\
    \ union (or array of such types).\n  Similarly, a POD union is a union that is\
    \ both a trivial class and a standard layout class, and has\n  no non-static data\
    \ members of type non-POD struct, non-POD union (or array of such types).\n  A\
    \ POD class is a class that is either a POD struct or a POD union.</p>\n</blockquote>\n\
    <p>Let's go over each of these two properties in detail separately.</p>\n<h2>Trivial\
    \ classes</h2>\n<p><em>Trivial</em> is the first property mentioned above: trivial\
    \ classes support static initialization. \nIf a class is trivially copyable (a\
    \ superset of trivial classes), it is ok to copy its representation over the place\
    \ with things like <code>memcpy</code> and expect the result to be the same.</p>\n\
    <p>The standard defines a trivial class as follows:</p>\n<blockquote>\n<p>A trivially\
    \ copyable class is a class that:</p>\n<p>â has no non-trivial copy constructors\
    \ (12.8),</p>\n<p>â has no non-trivial move constructors (12.8),</p>\n<p>â has\
    \ no non-trivial copy assignment operators (13.5.3, 12.8),</p>\n<p>â has no non-trivial\
    \ move assignment operators (13.5.3, 12.8), and</p>\n<p>â has a trivial destructor\
    \ (12.4).</p>\n<p>A trivial class is a class that has a trivial default constructor\
    \ (12.1) and is trivially copyable.</p>\n<p>[ <em>Note:</em> In particular, a\
    \ trivially copyable or trivial class does not have virtual functions\n  or virtual\
    \ base classes.<em>âend note</em> ]</p>\n</blockquote>\n<p>So, what are all those\
    \ trivial and non-trivial things?</p>\n<blockquote>\n<p>A copy/move constructor\
    \ for class X is trivial if it is not user-provided and if</p>\n<p>â class X has\
    \ no virtual functions (10.3) and no virtual base classes (10.1), and</p>\n<p>â\
    \ the constructor selected to copy/move each direct base class subobject is trivial,\
    \ and</p>\n<p>â for each non-static data member of X that is of class type (or\
    \ array thereof), the constructor\n  selected to copy/move that member is trivial;</p>\n\
    <p>otherwise the copy/move constructor is non-trivial.</p>\n</blockquote>\n<p>Basically\
    \ this means that a copy or move constructor is trivial if it is not user-provided,\
    \ the class has nothing virtual in it, and this property holds recursively for\
    \ all the members of the class and for the base class.</p>\n<p>The definition\
    \ of a trivial copy/move assignment operator is very similar, simply replacing\
    \ the word \"constructor\" with \"assignment operator\".</p>\n<p>A trivial destructor\
    \ also has a similar definition, with the added constraint that it can't be virtual.</p>\n\
    <p>And yet another similar rule exists for trivial default constructors, with\
    \ the addition that a default constructor is not-trivial if the class has non-static\
    \ data members with <em>brace-or-equal-initializers</em>, which we've seen above.</p>\n\
    <p>Here are some examples to clear everything up:</p>\n<pre><code>// empty classes\
    \ are trivial\nstruct Trivial1 {};\n\n// all special members are implicit\nstruct\
    \ Trivial2 {\n    int x;\n};\n\nstruct Trivial3 : Trivial2 { // base class is\
    \ trivial\n    Trivial3() = default; // not a user-provided ctor\n    int y;\n\
    };\n\nstruct Trivial4 {\npublic:\n    int a;\nprivate: // no restrictions on access\
    \ modifiers\n    int b;\n};\n\nstruct Trivial5 {\n    Trivial1 a;\n    Trivial2\
    \ b;\n    Trivial3 c;\n    Trivial4 d;\n};\n\nstruct Trivial6 {\n    Trivial2\
    \ a[23];\n};\n\nstruct Trivial7 {\n    Trivial6 c;\n    void f(); // it's okay\
    \ to have non-virtual functions\n};\n\nstruct Trivial8 {\n     int x;\n     static\
    \ NonTrivial1 y; // no restrictions on static members\n};\n\nstruct Trivial9 {\n\
    \     Trivial9() = default; // not user-provided\n      // a regular constructor\
    \ is okay because we still have default ctor\n     Trivial9(int x) : x(x) {};\n\
    \     int x;\n};\n\nstruct NonTrivial1 : Trivial3 {\n    virtual void f(); //\
    \ virtual members make non-trivial ctors\n};\n\nstruct NonTrivial2 {\n    NonTrivial2()\
    \ : z(42) {} // user-provided ctor\n    int z;\n};\n\nstruct NonTrivial3 {\n \
    \   NonTrivial3(); // user-provided ctor\n    int w;\n};\nNonTrivial3::NonTrivial3()\
    \ = default; // defaulted but not on first declaration\n                     \
    \                 // still counts as user-provided\nstruct NonTrivial5 {\n   \
    \ virtual ~NonTrivial5(); // virtual destructors are not trivial\n};\n</code></pre>\n\
    <h2>Standard-layout</h2>\n<p><em>Standard-layout</em> is the second property.\
    \ The standard mentions that these are useful for communicating with other languages,\
    \ and that's because a standard-layout class has the same memory layout of the\
    \ equivalent C struct or union.</p>\n<p>This is another property that must hold\
    \ recursively for members and all base classes. And as usual, no virtual functions\
    \ or virtual base classes are allowed. That would make the layout incompatible\
    \ with C.</p>\n<p>A relaxed rule here is that standard-layout classes must have\
    \ all non-static data members with the same access control. Previously these had\
    \ to be all <em>public</em>, but now you can make them private or protected, as\
    \ long as they are <em>all</em> private or <em>all</em> protected.</p>\n<p>When\
    \ using inheritance, <em>only one</em> class in the whole inheritance tree can\
    \ have non-static data members, and the first non-static data member cannot be\
    \ of a base class type (this could break aliasing rules), otherwise, it's not\
    \ a standard-layout class.</p>\n<p>This is how the definition goes in the standard\
    \ text:</p>\n<blockquote>\n<p>A standard-layout class is a class that:</p>\n<p>â\
    \ has no non-static data members of type non-standard-layout class (or array of\
    \ such types)\n  or reference,</p>\n<p>â has no virtual functions (10.3) and no\
    \ virtual base classes (10.1),</p>\n<p>â has the same access control (Clause 11)\
    \ for all non-static data members,</p>\n<p>â has no non-standard-layout base classes,</p>\n\
    <p>â either has no non-static data members in the most derived class and at most\
    \ one base class with\n  non-static data members, or has no base classes with\
    \ non-static data members, and</p>\n<p>â has no base classes of the same type\
    \ as the first non-static data member.</p>\n<p>A standard-layout struct is a standard-layout\
    \ class defined with the class-key struct or\n  the class-key class.</p>\n<p>A\
    \ standard-layout union is a standard-layout class defined with the class-key\
    \ union.</p>\n<p>[ <em>Note:</em> Standard-layout classes are useful for communicating\
    \ with code written in other programming languages. Their layout is specified\
    \ in 9.2.<em>âend note</em> ]</p>\n</blockquote>\n<p>And let's see a few examples.</p>\n\
    <pre><code>// empty classes have standard-layout\nstruct StandardLayout1 {};\n\
    \nstruct StandardLayout2 {\n    int x;\n};\n\nstruct StandardLayout3 {\nprivate:\
    \ // both are private, so it's ok\n    int x;\n    int y;\n};\n\nstruct StandardLayout4\
    \ : StandardLayout1 {\n    int x;\n    int y;\n\n    void f(); // perfectly fine\
    \ to have non-virtual functions\n};\n\nstruct StandardLayout5 : StandardLayout1\
    \ {\n    int x;\n    StandardLayout1 y; // can have members of base type if they're\
    \ not the first\n};\n\nstruct StandardLayout6 : StandardLayout1, StandardLayout5\
    \ {\n    // can use multiple inheritance as long only\n    // one class in the\
    \ hierarchy has non-static data members\n};\n\nstruct StandardLayout7 {\n    int\
    \ x;\n    int y;\n    StandardLayout7(int x, int y) : x(x), y(y) {} // user-provided\
    \ ctors are ok\n};\n\nstruct StandardLayout8 {\npublic:\n    StandardLayout8(int\
    \ x) : x(x) {} // user-provided ctors are ok\n// ok to have non-static data members\
    \ and other members with different access\nprivate:\n    int x;\n};\n\nstruct\
    \ StandardLayout9 {\n    int x;\n    static NonStandardLayout1 y; // no restrictions\
    \ on static members\n};\n\nstruct NonStandardLayout1 {\n    virtual f(); // cannot\
    \ have virtual functions\n};\n\nstruct NonStandardLayout2 {\n    NonStandardLayout1\
    \ X; // has non-standard-layout member\n};\n\nstruct NonStandardLayout3 : StandardLayout1\
    \ {\n    StandardLayout1 x; // first member cannot be of the same type as base\n\
    };\n\nstruct NonStandardLayout4 : StandardLayout3 {\n    int z; // more than one\
    \ class has non-static data members\n};\n\nstruct NonStandardLayout5 : NonStandardLayout3\
    \ {}; // has a non-standard-layout base class\n</code></pre>\n<h2>Conclusion</h2>\n\
    <p>With these new rules a lot more types can be PODs now. And even if a type is\
    \ not POD, we can take advantage of some of the POD properties separately (if\
    \ it is only one of trivial or standard-layout).</p>\n<p>The standard library\
    \ has traits to test these properties in the header <code>&lt;type_traits&gt;</code>:</p>\n\
    <pre><code>template &lt;typename T&gt;\nstruct std::is_pod;\ntemplate &lt;typename\
    \ T&gt;\nstruct std::is_trivial;\ntemplate &lt;typename T&gt;\nstruct std::is_trivially_copyable;\n\
    template &lt;typename T&gt;\nstruct std::is_standard_layout;\n</code></pre>\n\
    </div>"
- - What are Aggregates and PODs and how/why are they special?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h1>What has changed for C++14</h1>\n\
    <p>We can refer to the <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf\"\
    \ rel=\"noreferrer\">Draft C++14 standard</a> for reference. </p>\n<h2>Aggregates</h2>\n\
    <p>This is covered in section <code>8.5.1</code> <em>Aggregates</em> which gives\
    \ us the following definition:</p>\n<blockquote>\n<p>An aggregate is an array\
    \ or a class (Clause 9) with no user-provided\n  constructors (12.1), no private\
    \ or protected non-static data members\n  (Clause 11), no base classes (Clause\
    \ 10), and no virtual functions\n  (10.3).</p>\n</blockquote>\n<p>The only change\
    \ is now adding <em>in-class member initializers</em> does not make a class a\
    \ non-aggregate. So the following example from <a href=\"https://stackoverflow.com/q/27118535/1708801\"\
    >C++11 aggregate initialization for classes with member in-pace initializers</a>:</p>\n\
    <pre><code>struct A\n{\n  int a = 3;\n  int b = 3;\n};\n</code></pre>\n<p>was\
    \ not an aggregate in C++11 but it is in C++14. This change is covered in <a href=\"\
    http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3605.html\" rel=\"noreferrer\"\
    >N3605: Member initializers and aggregates</a>, which has the following abstract:</p>\n\
    <blockquote>\n<p>Bjarne Stroustrup and Richard Smith raised an issue about aggregate\n\
    \  initialization and member-initializers not working together. This\n  paper\
    \ proposes to fix the issue by adopting Smith's proposed wording\n  that removes\
    \ a restriction that aggregates can't have\n  member-initializers.</p>\n</blockquote>\n\
    <h1>POD stays the same</h1>\n<p>The definition for POD(<em>plain old data</em>)\
    \ struct is covered in section <code>9</code> <em>Classes</em> which says:</p>\n\
    <blockquote>\n<p>A POD struct<sup>110</sup> is a non-union class that is both\
    \ a trivial class and\n  a standard-layout class, and has no non-static data members\
    \ of type\n  non-POD struct, non-POD union (or array of such types). Similarly,\
    \ a\n  POD union is a union that is both a trivial class and a\n  standard-layout\
    \ class, and has no non-static data members of type\n  non-POD struct, non-POD\
    \ union (or array of such types). A POD class is\n  a class that is either a POD\
    \ struct or a POD union.</p>\n</blockquote>\n<p>which is the same wording as C++11.</p>\n\
    <h1>Standard-Layout Changes for C++14</h1>\n<p>As noted in the comments <em>pod</em>\
    \ relies on the definition of <em>standard-layout</em> and that did change for\
    \ C++14 but this was via defect reports that were applied to C++14 after the fact.</p>\n\
    <p>There were three DRs:</p>\n<ul>\n<li><a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1672\"\
    \ rel=\"noreferrer\">DR 1672</a></li>\n<li><a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1813\"\
    \ rel=\"noreferrer\">DR 1813</a></li>\n<li><a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#2120\"\
    \ rel=\"noreferrer\">DR 2120</a></li>\n</ul>\n<p>So <a href=\"https://timsong-cpp.github.io/cppwp/n3337/class#7\"\
    \ rel=\"noreferrer\">standard-layout</a> went from this Pre C++14:</p>\n<blockquote>\n\
    <p>A standard-layout class is a class that:</p>\n<ul>\n<li>(7.1) has no non-static\
    \ data members of type non-standard-layout class (or array of such types) or reference,\
    \  </li>\n<li>(7.2) has no virtual functions ([class.virtual]) and no virtual\
    \ base classes ([class.mi]),  </li>\n<li>(7.3) has the same access control (Clause\
    \ [class.access]) for all non-static data members,  </li>\n<li>(7.4) has no non-standard-layout\
    \ base classes,  </li>\n<li>(7.5) either has no non-static data members in the\
    \ most derived class and at most one base class with non-static data members,\
    \ or has\n  no base classes with non-static data members, and  </li>\n<li>(7.6)\
    \ has no base classes of the same type as the first non-static data member.109</li>\n\
    </ul>\n</blockquote>\n<p>To <a href=\"http://eel.is/c++draft/class.prop\" rel=\"\
    noreferrer\">this in C++14</a>:</p>\n<blockquote>\n<p>A class S is a standard-layout\
    \ class if it:</p>\n<ul>\n<li>(3.1) has no non-static data members of type non-standard-layout\
    \ class (or array of such types) or reference,  </li>\n<li>(3.2) has no virtual\
    \ functions and no virtual base classes,  </li>\n<li>(3.3) has the same access\
    \ control for all non-static data members,  </li>\n<li>(3.4) has no non-standard-layout\
    \ base classes,  </li>\n<li>(3.5) has at most one base class subobject of any\
    \ given type,  </li>\n<li>(3.6) has all non-static data members and bit-fields\
    \ in the class and its base classes first declared in the same class, and  </li>\n\
    <li>(3.7) has no element of the set M(S) of types as a base class, where for any\
    \ type X, M(X) is defined as follows.104\n  [âNote: M(X) is the set of the types\
    \ of all non-base-class subobjects that may be at a zero offset in X.\n  ââend\
    \ note\n  â]  \n  \n  <ul>\n<li>(3.7.1) If X is a non-union class type with no\
    \ (possibly inherited) non-static data members, the set M(X) is empty.  </li>\n\
    <li>(3.7.2) If X is a non-union class type with a non-static data member of type\
    \ X0 that is either of zero size or is the first\n  non-static data member of\
    \ X (where said member may be an anonymous\n  union), the set M(X) consists of\
    \ X0 and the elements of M(X0).  </li>\n<li>(3.7.3) If X is a union type, the\
    \ set M(X) is the union of all M(Ui) and the set containing all Ui, where each\
    \ Ui is the type of the\n  ith non-static data member of X.  </li>\n<li>(3.7.4)\
    \ If X is an array type with element type Xe, the set M(X) consists of Xe and\
    \ the elements of M(Xe).  </li>\n<li>(3.7.5) If X is a non-class, non-array type,\
    \ the set M(X) is empty.</li>\n</ul></li>\n</ul>\n</blockquote>\n</div>"
- - Why does C++ compilation take so long?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Several reasons</p>\n<h1>Header\
    \ files</h1>\n<p>Every single compilation unit requires hundreds or even thousands\
    \ of headers to be (1) loaded and (2) compiled.\nEvery one of them typically has\
    \ to be recompiled for every compilation unit,\nbecause the preprocessor ensures\
    \ that the result of compiling a header <em>might</em> vary between every compilation\
    \ unit.\n(A macro may be defined in one compilation unit which changes the content\
    \ of the header).</p>\n<p>This is probably <em>the</em> main reason, as it requires\
    \ huge amounts of code to be compiled for every compilation unit,\nand additionally,\
    \ every header has to be compiled multiple times\n(once for every compilation\
    \ unit that includes it).</p>\n<h1>Linking</h1>\n<p>Once compiled, all the object\
    \ files have to be linked together.\n  This is basically a monolithic process\
    \ that can't very well be parallelized, and has to process your entire project.</p>\n\
    <h1>Parsing</h1>\n<p>The syntax is extremely complicated to parse, depends heavily\
    \ on context, and is very hard to disambiguate.\nThis takes a lot of time.</p>\n\
    <h1>Templates</h1>\n<p>In C#, <code>List&lt;T&gt;</code> is the only type that\
    \ is compiled, no matter how many instantiations of List you have in your program.\n\
    In C++, <code>vector&lt;int&gt;</code> is a completely separate type from <code>vector&lt;float&gt;</code>,\
    \ and each one will have to be compiled separately.</p>\n<p>Add to this that templates\
    \ make up a full Turing-complete \"sub-language\" that the compiler has to interpret,\n\
    and this can become ridiculously complicated.\nEven relatively simple template\
    \ metaprogramming code can define recursive templates that create dozens and dozens\
    \ of template instantiations.\nTemplates may also result in extremely complex\
    \ types, with ridiculously long names, adding a lot of extra work to the linker.\n\
    (It has to compare a lot of symbol names, and if these names can grow into many\
    \ thousand characters, that can become fairly expensive).</p>\n<p>And of course,\
    \ they exacerbate the problems with header files, because templates generally\
    \ have to be defined in headers,\nwhich means far more code has to be parsed and\
    \ compiled for every compilation unit.\nIn plain C code, a header typically only\
    \ contains forward declarations, but very little actual code.\nIn C++, it is not\
    \ uncommon for almost all the code to reside in header files.</p>\n<h1>Optimization</h1>\n\
    <p>C++ allows for some very dramatic optimizations.\nC# or Java don't allow classes\
    \ to be completely eliminated (they have to be there for reflection purposes),\n\
    but even a simple C++ template metaprogram can easily generate dozens or hundreds\
    \ of classes,\nall of which are inlined and eliminated again in the optimization\
    \ phase.</p>\n<p>Moreover, a C++ program must be fully optimized by the compiler.\n\
    A C# program can rely on the JIT compiler to perform additional optimizations\
    \ at load-time,\nC++ doesn't get any such \"second chances\". What the compiler\
    \ generates is as optimized as it's going to get.</p>\n<h1>Machine</h1>\n<p>C++\
    \ is compiled to machine code which may be somewhat more complicated than the\
    \ bytecode Java or .NET use (especially in the case of x86).\n(This is mentioned\
    \ out of completeness only because it was mentioned in comments and such.\nIn\
    \ practice, this step is unlikely to take more than a tiny fraction of the total\
    \ compilation time).</p>\n<h1>Conclusion</h1>\n<p>Most of these factors are shared\
    \ by C code, which actually compiles fairly efficiently.\nThe parsing step is\
    \ a lot more complicated in C++, and can take up significantly more time, but\
    \ the main offender is probably templates.\nThey're useful, and make C++ a far\
    \ more powerful language, but they also take their toll in terms of compilation\
    \ speed.</p>\n</div>"
- - Why does C++ compilation take so long?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The slowdown is not necessarily\
    \ the same with any compiler.</p>\n<p>I haven't used Delphi or Kylix but back\
    \ in the MS-DOS days, a Turbo Pascal program would compile almost instantaneously,\
    \ while the equivalent Turbo C++ program would just crawl. </p>\n<p>The two main\
    \ differences were a very strong module system and a syntax that allowed single-pass\
    \ compilation.</p>\n<p>It's certainly possible that compilation speed just hasn't\
    \ been a priority for C++ compiler developers, but there are also some inherent\
    \ complications in the C/C++ syntax that make it more difficult to process. (I'm\
    \ not an expert on C, but Walter Bright is, and after building various commercial\
    \ C/C++ compilers, he created the D language. <a href=\"http://www.digitalmars.com/d/2.0/overview.html\"\
    \ rel=\"noreferrer\">One of his changes</a> was to enforce a context-free grammar\
    \ to make the language easier to parse.)</p>\n<p>Also, you'll notice that generally\
    \ Makefiles are set up so that every file is compiled separately in C, so if 10\
    \ source files all use the same include file, that include file is processed 10\
    \ times.</p>\n</div>"
- - Why does C++ compilation take so long?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Parsing and code generation are\
    \ actually rather fast.  The real problem is opening and closing files.  Remember,\
    \ even with include guards, the compiler still have open the .H file, and read\
    \ each line (and then ignore it).</p>\n<p>A friend once (while bored at work),\
    \ took his company's application and put everything -- all source and header files--\
    \  into one big file.   Compile time dropped from 3 hours to 7 minutes.</p>\n\
    </div>"
- - How can I get the list of files in a directory using C or C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In small and simple tasks I do\
    \ not use boost, I use <strong>dirent.h</strong> which is also available for windows:</p>\n\
    <pre><code>DIR *dir;\nstruct dirent *ent;\nif ((dir = opendir (\"c:\\\\src\\\\\
    \")) != NULL) {\n  /* print all the files and directories within directory */\n\
    \  while ((ent = readdir (dir)) != NULL) {\n    printf (\"%s\\n\", ent-&gt;d_name);\n\
    \  }\n  closedir (dir);\n} else {\n  /* could not open directory */\n  perror\
    \ (\"\");\n  return EXIT_FAILURE;\n}\n</code></pre>\n<p>It is just a small header\
    \ file and does most of the simple stuff you need without using a big template-based\
    \ approach like boost(no offence, I like boost!).</p>\n<p>The author of the windows\
    \ compatibility layer is Toni Ronkko. In Unix, it is a standard header.</p>\n\
    <p><strong>UPDATE 2017</strong>:</p>\n<p>In C++17 there is now an official way\
    \ to list files of your file system: <code>std::filesystem</code>. There is an\
    \ excellent answer from <a href=\"https://stackoverflow.com/a/37494654/23264\"\
    ><strong>Shreevardhan</strong></a> below with this source code:</p>\n<pre><code>#include\
    \ &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;filesystem&gt;\nnamespace\
    \ fs = std::filesystem;\n\nint main()\n{\n    std::string path = \"/path/to/directory\"\
    ;\n    for (const auto &amp; entry : fs::directory_iterator(path))\n        std::cout\
    \ &lt;&lt; entry.path() &lt;&lt; std::endl;\n}\n</code></pre>\n</div>"
- - How can I get the list of files in a directory using C or C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>C++17 now has a <a href=\"http://en.cppreference.com/w/cpp/filesystem/directory_iterator\"\
    \ rel=\"noreferrer\"><code>std::filesystem::directory_iterator</code></a>, which\
    \ can be used as</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\
    #include &lt;filesystem&gt;\nnamespace fs = std::filesystem;\n\nint main()\n{\n\
    \    std::string path = \"/path/to/directory\";\n    for (const auto &amp; entry\
    \ : fs::directory_iterator(path))\n        std::cout &lt;&lt; entry.path() &lt;&lt;\
    \ std::endl;\n}\n</code></pre>\n<p>Also, <a href=\"http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator\"\
    \ rel=\"noreferrer\"><code>std::filesystem::recursive_directory_iterator</code></a>\
    \ can iterate the subdirectories as well.</p>\n</div>"
- - How can I get the list of files in a directory using C or C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Unfortunately the C++ standard\
    \ does not define a standard way of working with files and folders in this way.\
    \ </p>\n<p>Since there is no cross platform way, the best cross platform way is\
    \ to use a library such as the <a href=\"http://www.boost.org/doc/libs/1_38_0/libs/filesystem/doc/index.htm\"\
    \ rel=\"noreferrer\">boost filesystem module</a>.</p>\n<p><strong>Cross platform\
    \ boost method:</strong></p>\n<blockquote>\n<p>The following function, given a\
    \ directory path and a file name, recursively searches the directory and its sub-directories\
    \ for the file name, returning a bool, and if successful, the path to the file\
    \ that was found. </p>\n</blockquote>\n<pre><code>bool find_file(const path &amp;\
    \ dir_path,         // in this directory,\n               const std::string &amp;\
    \ file_name, // search for this name,\n               path &amp; path_found) \
    \            // placing path here if found\n{\n    if (!exists(dir_path)) \n \
    \       return false;\n\n    directory_iterator end_itr; // default construction\
    \ yields past-the-end\n\n    for (directory_iterator itr(dir_path); itr != end_itr;\
    \ ++itr)\n    {\n        if (is_directory(itr-&gt;status()))\n        {\n    \
    \        if (find_file(itr-&gt;path(), file_name, path_found)) \n            \
    \    return true;\n        }\n        else if (itr-&gt;leaf() == file_name) //\
    \ see below\n        {\n            path_found = itr-&gt;path();\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n<p>Source\
    \ from the boost page mentioned above.</p>\n<hr/>\n<p><strong>For Unix/Linux based\
    \ systems:</strong> </p>\n<p>You can use <a href=\"http://www.manpagez.com/man/3/opendir/\"\
    \ rel=\"noreferrer\">opendir</a> / <a href=\"http://www.manpagez.com/man/3/readdir/\"\
    \ rel=\"noreferrer\">readdir</a> / <a href=\"http://www.manpagez.com/man/3/closedir/\"\
    \ rel=\"noreferrer\">closedir</a>. </p>\n<blockquote>\n<p>Sample code which searches\
    \ a directory for entry ``name'' is:</p>\n</blockquote>\n<pre><code>   len = strlen(name);\n\
    \   dirp = opendir(\".\");\n   while ((dp = readdir(dirp)) != NULL)\n        \
    \   if (dp-&gt;d_namlen == len &amp;&amp; !strcmp(dp-&gt;d_name, name)) {\n  \
    \                 (void)closedir(dirp);\n                   return FOUND;\n  \
    \         }\n   (void)closedir(dirp);\n   return NOT_FOUND;\n</code></pre>\n<p>Source\
    \ code from the above man pages.</p>\n<hr/>\n<p><strong>For a windows based systems:</strong>\
    \ </p>\n<p>you can use the Win32 API <a href=\"http://msdn.microsoft.com/en-us/library/aa364418(VS.85).aspx\"\
    \ rel=\"noreferrer\">FindFirstFile</a> / <a href=\"http://msdn.microsoft.com/en-us/library/aa364428(VS.85).aspx\"\
    \ rel=\"noreferrer\">FindNextFile</a> / <a href=\"http://msdn.microsoft.com/en-us/library/aa364413(VS.85).aspx\"\
    \ rel=\"noreferrer\">FindClose</a> functions.</p>\n<blockquote>\n<p>The following\
    \ C++ example shows you a minimal use of FindFirstFile.</p>\n</blockquote>\n<pre><code>#include\
    \ &lt;windows.h&gt;\n#include &lt;tchar.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid\
    \ _tmain(int argc, TCHAR *argv[])\n{\n   WIN32_FIND_DATA FindFileData;\n   HANDLE\
    \ hFind;\n\n   if( argc != 2 )\n   {\n      _tprintf(TEXT(\"Usage: %s [target_file]\\\
    n\"), argv[0]);\n      return;\n   }\n\n   _tprintf (TEXT(\"Target file is %s\\\
    n\"), argv[1]);\n   hFind = FindFirstFile(argv[1], &amp;FindFileData);\n   if\
    \ (hFind == INVALID_HANDLE_VALUE) \n   {\n      printf (\"FindFirstFile failed\
    \ (%d)\\n\", GetLastError());\n      return;\n   } \n   else \n   {\n      _tprintf\
    \ (TEXT(\"The first file found is %s\\n\"), \n                FindFileData.cFileName);\n\
    \      FindClose(hFind);\n   }\n}\n</code></pre>\n<p>Source code from the above\
    \ msdn pages.</p>\n</div>"
- - What is std::move(), and when should it be used?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"https://en.wikipedia.org/wiki/C%2B%2B11#Rvalue_references_and_move_constructors\"\
    \ rel=\"noreferrer\">Wikipedia Page on C++11 R-value references and move constructors</a></p>\n\
    <ol>\n<li>In C++11, in addition to copy constructors, objects can have move constructors.<br/>\n\
    (And in addition to copy assignment operators, they have move assignment operators.)</li>\n\
    <li>The move constructor is used instead of the copy constructor, if the object\
    \ has type \"rvalue-reference\" (<code>Type &amp;&amp;</code>).</li>\n<li><code>std::move()</code>\
    \ is a cast that produces an rvalue-reference to an object, to enable moving from\
    \ it.</li>\n</ol>\n<p>It's a new C++ way to avoid copies. For example, using a\
    \ move constructor, a <code>std::vector</code> could just copy its internal pointer\
    \ to data to the new object, leaving the moved object in an incorrect state, avoiding\
    \ to copy all data. This would be C++-valid.</p>\n<p>Try googling for move semantics,\
    \ rvalue, perfect forwarding.</p>\n</div>"
- - What is std::move(), and when should it be used?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can use move when you need\
    \ to \"transfer\" the content of an object somewhere else, without doing a copy\
    \ (e.g the content is not duplicated, that's why it could be use on some non-copyable\
    \ objects, like an unique_ptr). It's also possible for an object to take the content\
    \ of a temporary object without doing a copy (and save a lot of time), with std::move.</p>\n\
    <p>This link really helped me out : </p>\n<p><a href=\"http://thbecker.net/articles/rvalue_references/section_01.html\"\
    \ rel=\"noreferrer\">http://thbecker.net/articles/rvalue_references/section_01.html</a></p>\n\
    <p>I'm sorry if my answer is coming too late, but I was also looking for a good\
    \ link for the std::move, and I found the links above a little bit \"austere\"\
    . </p>\n<p>This put the emphasis on r-value reference, in which context you should\
    \ use them, and I think it's more detailed, that's why I wanted to share this\
    \ link here.</p>\n</div>"
- - What is std::move(), and when should it be used?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h3>1. \"What is it?\"</h3>\n<p>While\
    \ <code>std::move()</code>  is technically a function - I would say <strong>it\
    \ isn't <em>really</em> a function</strong>. It's sort of a <em>converter</em>\
    \ between ways the compiler considers an expression's value.</p>\n<h3>2. \"What\
    \ does it do?\"</h3>\n<p>The first thing to note is that <code>std::move()</code>\
    \ <strong>doesn't actually move anything</strong>.</p>\n<p><sub>If you've ever\
    \ watched the animation series <a href=\"https://en.wikipedia.org/wiki/Bleach_%28anime%29\"\
    \ rel=\"noreferrer\">Bleach</a> - it does the equivalent of Quincy <a href=\"\
    http://bleach.wikia.com/wiki/Seele_Schneider\" rel=\"noreferrer\">Seele Schneider</a>'s\
    \  <a href=\"https://www.youtube.com/watch?v=3K2-THjgoQg\" rel=\"noreferrer\"\
    >Reishi softening</a>.</sub></p>\n<p>Seriously, though, it converts an expression\
    \ from being an <a href=\"http://en.cppreference.com/w/cpp/language/value_category\"\
    \ rel=\"noreferrer\">lvalue or pure rvalue</a> (such as a variable you might be\
    \ using for a long time yet, or a temporary you're passing around for a while,\
    \ respectively) to being an <a href=\"http://en.cppreference.com/w/cpp/language/value_category\"\
    \ rel=\"noreferrer\">xvalue</a>. An xvalue tells the compiler:</p>\n<blockquote>\n\
    <p>You can plunder me, <strong>move</strong> anything I'm holding and use it elsewhere\
    \ (since I'm going to be destroyed soon anyway)\".</p>\n</blockquote>\n<p>in other\
    \ words, when you use <code>std::move(x)</code>, you're allowing the compiler\
    \ to cannibalize <code>x</code>. Thus if <code>x</code> has, say, its own buffer\
    \ in memory - after <code>std::move()</code>ing the compiler can have another\
    \ object own it instead.</p>\n<h3>3. \"When should it be used?\"</h3>\n<p>Another\
    \ way to ask this question is \"What would I cannibalize an existing object's\
    \ resources for?\" well, if you're writing application code, you would probably\
    \ not be messing around a lot with temporary objects created by the compiler.\
    \ So mainly you would do this in places like constructors, operator methods, STL-algorithm-like\
    \ functions etc. where objects get created and destroyed automagically alot. Of\
    \ course, that's just a rule of thumb.</p>\n<p>A typical use is 'moving' resources\
    \ from one object to another instead of copying.  @Guillaume links to <a href=\"\
    http://thbecker.net/articles/rvalue_references/section_01.html\" rel=\"noreferrer\"\
    >this page</a> which has a straightforward short example: swapping two objects\
    \ with less copying.</p>\n<pre><code>template &lt;class T&gt;\nswap(T&amp; a,\
    \ T&amp; b) {\n    T tmp(a);   // we now have two copies of a\n    a = b;    \
    \  // we now have two copies of b (+ discarded a copy of a)\n    b = tmp;    //\
    \ we now have two copies of tmp (+ discarded a copy of b)\n}\n</code></pre>\n\
    <p>using move allows you to swap the resources instead of copying them around:</p>\n\
    <pre><code>template &lt;class T&gt;\nswap(T&amp; a, T&amp; b) {\n    T tmp(std::move(a));\n\
    \    a = std::move(b);   \n    b = std::move(tmp);\n}\n</code></pre>\n<p>Think\
    \ of what happens when T is, say, <code>vector&lt;int&gt;</code> of size n. In\
    \ the first version you read and write 3*n elements, in the second version you\
    \ basically read and write just the 3 pointers to the vectors' buffers. Of course,\
    \ class T needs to know how to do the moving; you should have a move-assignment\
    \ operator and a move-constructor for class T for this to work.</p>\n</div>"
- - Does the 'mutable' keyword have any purpose other than allowing the variable to
    be modified by a const function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>It allows the differentiation\
    \ of bitwise const and logical const.  Logical const is when an object doesn't\
    \ change in a way that is visible through the public interface, like your locking\
    \ example.  Another example would be a class that computes a value the first time\
    \ it is requested, and caches the result. </p>\n<p>Since c++11 <code>mutable</code>\
    \ can be used on a lambda to denote that things captured by value are modifiable\
    \ (they aren't by default):</p>\n<pre><code>int x = 0;\nauto f1 = [=]() mutable\
    \ {x = 42;};  // OK\nauto f2 = [=]()         {x = 42;};  // Error: a by-value\
    \ capture cannot be modified in a non-mutable lambda\n</code></pre>\n</div>"
- - Does the 'mutable' keyword have any purpose other than allowing the variable to
    be modified by a const function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The <code>mutable</code> keyword\
    \ is a way to pierce the <code>const</code> veil you drape over your objects.\
    \ If you have a const reference or pointer to an object, you cannot modify that\
    \ object in any way <strong>except</strong> when and how it is marked <code>mutable</code>.</p>\n\
    <p>With your <code>const</code> reference or pointer you are constrained to:</p>\n\
    <ul>\n<li>only read access for any visible data members</li>\n<li>permission to\
    \ call only methods that are marked as <code>const</code>. </li>\n</ul>\n<p>The\
    \ <code>mutable</code> exception makes it so you can now write or set data members\
    \ that are marked <code>mutable</code>. That's the only externally visible difference.</p>\n\
    <p>Internally those <code>const</code> methods that are visible to you can also\
    \ write to data members that are marked <code>mutable</code>.  Essentially the\
    \ const veil is pierced comprehensively.  It is completely up to the API designer\
    \ to ensure that <code>mutable</code> doesn't destroy the <code>const</code> concept\
    \ and is only used in useful special cases. The <code>mutable</code> keyword helps\
    \ because it clearly marks data members that are subject to these special cases.</p>\n\
    <p>In practice you can use <code>const</code> obsessively throughout your codebase\
    \ (you essentially want to \"infect\" your codebase with the <code>const</code>\
    \ \"disease\").  In this world pointers and references are <code>const</code>\
    \ with very few exceptions, yielding code that is easier to reason about and understand.\
    \  For a interesting digression look up \"referential transparency\". </p>\n<p>Without\
    \ the <code>mutable</code> keyword you will eventually be forced to use <code>const_cast</code>\
    \ to handle the various useful special cases it allows (caching, ref counting,\
    \ debug data, etc.). Unfortunately <code>const_cast</code> is significantly more\
    \ destructive than <code>mutable</code> because it forces the API <strong>client</strong>\
    \ to destroy the <code>const</code> protection of the objects (s)he is using.\
    \ Additionally it causes widespread <code>const</code> destruction: <code>const_cast</code>ing\
    \ a const pointer or reference allows unfettered write and method calling access\
    \ to visible members.  In contrast <code>mutable</code> requires the API designer\
    \ to exercise fine grained control over the <code>const</code> exceptions, and\
    \ usually these exceptions are hidden in <code>const</code> methods operating\
    \ on private data.</p>\n<p>(N.B. I refer to to data and method <em>visibility</em>\
    \ a few times. I'm talking about members marked as public vs. private or protected\
    \ which is a totally different type of object protection discussed <a href=\"\
    https://stackoverflow.com/questions/224966/private-and-protected-members-c\">here</a>.)</p>\n\
    </div>"
- - Does the 'mutable' keyword have any purpose other than allowing the variable to
    be modified by a const function?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Your use with boost::mutex is\
    \ exactly what this keyword is intended for. Another use is for internal result\
    \ caching to speed access.</p>\n<p>Basically, 'mutable' applies to any class attribute\
    \ that does not affect the externally visible state of the object.</p>\n<p>In\
    \ the sample code in your question, mutable might be inappropriate if the value\
    \ of done_ affects external state, it depends on what is in the ...; part.</p>\n\
    </div>"
- - What is a segmentation fault?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Segmentation fault is a specific\
    \ kind of error caused by accessing memory that âdoes not belong to you.â Itâs\
    \ a helper mechanism that keeps you from corrupting the memory and introducing\
    \ hard-to-debug memory bugs. Whenever you get a segfault you know you are doing\
    \ something wrong with memory â accessing variable that has already been freed,\
    \ writing to a read-only portion of the memory, etc. Segmentation fault is essentially\
    \ the same in most languages that let you mess with the memory management, there\
    \ is no principial difference between segfaults in C and C++.</p>\n<p>There are\
    \ many ways to get a segfault, at least in the lower-level languages such as C(++).\
    \ AÂ common way to get a segfault is to dereference a null pointer:</p>\n<pre><code>int\
    \ *p = NULL;\n*p = 1;\n</code></pre>\n<p>Another segfault happens when you try\
    \ to write to a portion of memory that was marked as read-only:</p>\n<pre><code>char\
    \ *str = \"Foo\"; // Compiler marks the constant string as read-only\n*str = 'b';\
    \ // Which means this is illegal and results in a segfault\n</code></pre>\n<p>Dangling\
    \ pointer points to a thing that does not exist any more, like here:</p>\n<pre><code>char\
    \ *p = NULL;\n{\n    char c;\n    p = &amp;c;\n}\n// Now p is dangling\n</code></pre>\n\
    <p>The pointer <code>p</code> dangles because it points to character variable\
    \ <code>c</code> that ceased to exist after the block ended. And when you try\
    \ to dereference dangling pointer (like <code>*p='A'</code>), you would probably\
    \ get a segfault.</p>\n</div>"
- - What is a segmentation fault?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>It would be worth noting that\
    \ segmentation fault isn't caused by directly accessing another process memory\
    \ (this is what I'm hearing sometimes), as it is simply not possible. With virtual\
    \ memory every process has its own virtual address space and there is no way to\
    \ access another one using any value of pointer. Exception to this can be shared\
    \ libraries which are same physical address space mapped to (possibly) different\
    \ virtual addresses and kernel memory which is even mapped in the same way in\
    \ every process (to avoid TLB flushing on syscall, I think). And things like shmat\
    \ ;) - these are what I count as 'indirect' access. One can, however, check that\
    \ they are usually located long way from process code and we are usually able\
    \ to access them (this is why they are there, nevertheless accessing them in a\
    \ improper way will produce segmentation fault).</p>\n<p>Still, segmentation fault\
    \ can occur in case of accessing our own (process) memory in improper way (for\
    \ instance trying to write to non-writable space). But the most common reason\
    \ for it is the access to the part of the virtual address space that is <em>not\
    \ mapped</em> to physical one at all.</p>\n<p>And all of this with respect to\
    \ virtual memory systems.</p>\n</div>"
- - What is a segmentation fault?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>A segmentation fault is caused\
    \ by a request for a page that the process does not have listed in its descriptor\
    \ table, or an invalid request for a page that it does have listed (e.g. a write\
    \ request on a read-only page).</p>\n<p>A dangling pointer is a pointer that may\
    \ or may not point to a valid page, but does point to an \"unexpected\" segment\
    \ of memory.</p>\n</div>"
- - 'C++: âstd::endlâ vs â\nâ'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The varying line-ending characters\
    \ don't matter, assuming the file is open in text mode, which is what you get\
    \ unless you ask for binary.  The compiled program will write out the correct\
    \ thing for the system compiled for.</p>\n<p>The only difference is that <a href=\"\
    http://en.cppreference.com/w/cpp/io/manip/endl\" rel=\"noreferrer\"><code>std::endl</code></a>\
    \ flushes the output buffer, and <code>'\\n'</code> doesn't.  If you don't want\
    \ the buffer flushed frequently, use <code>'\\n'</code>.  If you do (for example,\
    \ if you want to get all the output, and the program is unstable), use <code>std::endl</code>.</p>\n\
    </div>"
- - 'C++: âstd::endlâ vs â\nâ'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The difference can be illustrated\
    \ by the following:</p>\n<pre><code>std::cout &lt;&lt; std::endl;\n</code></pre>\n\
    <p>is equivalent to</p>\n<pre><code>std::cout &lt;&lt; '\\n' &lt;&lt; std::flush;\n\
    </code></pre>\n<p>So,</p>\n<ul>\n<li>Use <code>std::endl</code> If you want to\
    \ force an immediate flush to the output.</li>\n<li>Use <code>\\n</code> if you\
    \ are worried about performance (which is probably not the case if you are using\
    \ the <code>&lt;&lt;</code> operator).</li>\n</ul>\n<p>I use <code>\\n</code>\
    \ on most lines.<br/>\nThen use <code>std::endl</code> at the end of a paragraph\
    \ (but that is just a habit and not usually necessary).</p>\n<p>Contrary to other\
    \ claims, the <code>\\n</code> character is mapped to the correct platform end\
    \ of line sequence only if the stream is going to a file (<code>std::cin</code>\
    \ and <code>std::cout</code> being special but still files (or file-like)).</p>\n\
    </div>"
- - 'C++: âstd::endlâ vs â\nâ'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There might be performance issues,\
    \ <code>std::endl</code> forces a flush of the output stream.</p>\n</div>"
- - C++ code file extension? .cc vs .cpp
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>At the end of the day it doesn't\
    \ matter because C++ compilers can deal with the files in either format.  If it's\
    \ a real issue within your team, flip a coin and move on to the actual work. \
    \ </p>\n</div>"
- - C++ code file extension? .cc vs .cpp
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>GNU GCC recognises all of the\
    \ following as C++ files, and will use C++ compilation regardless of whether you\
    \ invoke it through gcc or g++: <code>.C</code>, <code>.cc</code>, <code>.cpp</code>,\
    \ <code>.CPP</code>, <code>.c++</code>, <code>.cp</code>, or <code>.cxx</code>.</p>\n\
    <p>Note the <code>.C</code> - case matters in GCC, <code>.c</code> is a C file\
    \ whereas <code>.C</code> is a C++ file (if you let the compiler decide what it\
    \ is compiling that is).</p>\n<p>GCC also supports other suffixes to indicate\
    \ special handling, for example a <code>.ii</code> file will be compiled as C++,\
    \ but not pre-processed (intended for separately pre-processed code). All the\
    \ recognised suffixes are detailed at <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.4.1/gcc/Overall-Options.html#index-file-name-suffix-71\"\
    \ rel=\"noreferrer\">gcc.gnu.org</a></p>\n</div>"
- - C++ code file extension? .cc vs .cpp
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Great advice on which to use\
    \ for the makefile and other tools, considering non-compiler tools while deciding\
    \ on which extension to use is a great approach to help find an answer that works\
    \ for you.</p>\n<p>I just wanted to add the following to help with some <code>.cc</code>\
    \ vs <code>.cpp</code> info that I found. The following are extensions broken\
    \ down by different environments (from the \"C++ Primer Plus\" book):</p>\n<p>Unix\
    \ uses: <code>.C</code>, <code>.cc</code>, <code>.cxx</code>, <code>.c</code></p>\n\
    <p>GNU C++ uses:  <code>.C</code>, <code>.cc</code>, <code>.cxx</code>, <code>.cpp</code>,\
    \ <code>.c++</code></p>\n<p>Digital Mars uses:  <code>.cpp</code>, <code>.cxx</code></p>\n\
    <p>Borland C++ uses: <code>.cpp</code></p>\n<p>Watcom uses:  <code>.cpp</code></p>\n\
    <p>Microsoft Visual C++ uses:  <code>.cpp</code>, <code>.cxx</code>, <code>.cc</code></p>\n\
    <p>Metrowerks CodeWarrior uses:  <code>.cpp</code>, <code>.cp</code>, <code>.cc</code>,\
    \ <code>.cxx</code>, <code>.c++</code></p>\n<p>The different environments support\
    \ different extensions.  I too was looking to answer this question and found this\
    \ post. Based on this post I think I might go with <code>.hpp</code> and <code>.cpp</code>\
    \ for ease of cross-platform/cross-tool recognition.  </p>\n</div>"
- - Why is this program erroneously rejected by three C++ compilers?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In the standard, Â§2.1/1 specifies:</p>\n\
    <blockquote>\n<p>Physical source file characters are mapped, in an implementation-defined\
    \ manner, to the basic source character set (introducing new-line characters for\
    \ end-of-line indicators) if necessary.</p>\n</blockquote>\n<p>Your compiler doesn't\
    \ support that format (aka cannot map it to the <em>basic source character set</em>),\
    \ so it cannot move into further processing stages, hence the error. It is entirely\
    \ possible that your compiler support a mapping from image to basic source character\
    \ set, but is not required to. </p>\n<p>Since this mapping is implementation-defined,\
    \ you'll need to look at your implementations documentation to see the file formats\
    \ it supports. Typically, every major compiler vendor supports (canonically defined)\
    \ text files: any file produced by a text editor, typically a series of characters.\
    \ </p>\n<hr/>\n<p>Note that the C++ standard is based off the C standard (Â§1.1/2),\
    \ and the C(99) standard says, in Â§1.2:</p>\n<blockquote>\n<p>This International\
    \ Standard does not specify<br/>\n  â the mechanism by which C programs are transformed\
    \ for use by a data-processing\n  system;<br/>\n  â the mechanism by which C programs\
    \ are invoked for use by a data-processing\n  system;<br/>\n  â the mechanism\
    \ by which input data are transformed for use by a C program;</p>\n</blockquote>\n\
    <p>So, again, the treatment of source files is something you need to find in your\
    \ compilers documentation.</p>\n</div>"
- - Why is this program erroneously rejected by three C++ compilers?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><img alt=\"\" src=\"https://i.imgur.com/QlGpd.gif\"\
    /></p>\n<p>Originally from <a href=\"http://www.reddit.com/user/Overv\" rel=\"\
    noreferrer\">Overv</a> @ <a href=\"http://www.reddit.com/r/programming/comments/ggh3d/coding_in_ms_paint/\"\
    \ rel=\"noreferrer\">reddit</a>.</p>\n</div>"
- - Why is this program erroneously rejected by three C++ compilers?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Try this way:</p>\n<p><img alt=\"\
    enter image description here\" src=\"https://i.stack.imgur.com/OjB9Z.png\"/></p>\n\
    </div>"
- - unsigned int vs. size_t
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The <code>size_t</code> type\
    \ is the unsigned integer type that is the result of the <code>sizeof</code> operator\
    \ (and the <code>offsetof</code> operator), so it is guaranteed to be big enough\
    \ to contain the size of the biggest object your system can handle (e.g., a static\
    \ array of 8Gb).</p>\n<p>The <code>size_t</code> type may be bigger than, equal\
    \ to, or smaller than an <code>unsigned int</code>, and your compiler might make\
    \ assumptions about it for optimization.</p>\n<p>You may find more precise information\
    \ in the C99 standard, section 7.17, a draft of which is available on the Internet\
    \ in <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"\
    noreferrer\">pdf</a> format, or in the C11 standard, section 7.19, also available\
    \ as a <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"\
    noreferrer\">pdf draft</a>.</p>\n</div>"
- - unsigned int vs. size_t
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Classic C (the early dialect\
    \ of C described by Brian Kernighan and Dennis Ritchie in The C Programming Language,\
    \ Prentice-Hall, 1978) didn't provide <code>size_t</code>. The C standards committee\
    \ introduced <code>size_t</code> to eliminate a portability problem</p>\n<p><a\
    \ href=\"http://www.embedded.com/electronics-blogs/programming-pointers/4026076/Why-size-t-matters\"\
    \ rel=\"nofollow noreferrer\">Explained in detail at embedded.com (with a very\
    \ good example)</a></p>\n</div>"
- - unsigned int vs. size_t
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In short, <code>size_t</code>\
    \ is never negative, and it maximizes performance because it's typedef'd to be\
    \ the unsigned integer type that's big enough -- but not too big -- to represent\
    \ the size of the largest possible object on the target platform.</p>\n<p>Sizes\
    \ should never be negative, and indeed <code>size_t</code> is an unsigned type.\
    \ Also, because <code>size_t</code> is unsigned, you can store numbers that are\
    \ roughly twice as big as in the corresponding signed type, because we can use\
    \ the sign bit to represent magnitude, like all the other bits in the unsigned\
    \ integer. When we gain one more bit, we are multiplying the range of numbers\
    \ we can represents by a factor of about two. </p>\n<p>So, you ask, why not just\
    \ use an <code>unsigned int</code>? It may not be able to hold big enough numbers.\
    \ In an implementation where <code>unsigned int</code> is 32 bits, the biggest\
    \ number it can represent is <code>4294967295</code>. Some processors, such as\
    \ the IP16L32, can copy objects larger than <code>4294967295</code> bytes.</p>\n\
    <p>So, you ask, why not use an <code>unsigned long int</code>? It exacts a performance\
    \ toll on some platforms. Standard C requires that a <code>long</code> occupy\
    \ at least 32 bits. An IP16L32 platform implements each 32-bit long as a pair\
    \ of 16-bit words. Almost all 32-bit operators on these platforms require two\
    \ instructions, if not more, because they work with the 32 bits in two 16-bit\
    \ chunks. For example, moving a 32-bit long usually requires two machine instructions\
    \ -- one to move each 16-bit chunk.</p>\n<p>Using <code>size_t</code> avoids this\
    \ performance toll. According to <a href=\"http://www.embedded.com/electronics-blogs/programming-pointers/4026076/Why-size-t-matters\"\
    \ rel=\"noreferrer\">this fantastic article</a>, \"Type <code>size_t</code> is\
    \ a typedef that's an alias for some unsigned integer type, typically <code>unsigned\
    \ int</code> or <code>unsigned long</code>, but possibly even <code>unsigned long\
    \ long</code>. Each Standard C implementation is supposed to choose the unsigned\
    \ integer that's big enough--but no bigger than needed--to represent the size\
    \ of the largest possible object on the target platform.\"</p>\n</div>"
- - Does the C++ standard allow for an uninitialized bool to crash a program?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h3>Yes, ISO C++ allows (but doesn't\
    \ require) implementations to make this choice.</h3>\n<p>But also note that ISO\
    \ C++ allows a compiler to emit code that crashes on purpose (e.g. with an illegal\
    \ instruction) if the program encounters UB, e.g. as a way to help you find errors.\
    \  (Or because it's a DeathStation 9000.  Being strictly conforming is not sufficient\
    \ for a C++ implementation to be useful for any real purpose).  <strong>So ISO\
    \ C++ would allow a compiler to make asm that crashed (for totally different reasons)\
    \ even on similar code that read an uninitialized <code>uint32_t</code>.</strong>\
    \  Even though that's required to be a fixed-layout type with no trap representations.</p>\n\
    <p>It's an interesting question about how real implementations work, but remember\
    \ that even if the answer was different, your code would still be unsafe because\
    \ modern C++ is not a portable version of assembly language.</p>\n<hr/>\n<p><strong>You're\
    \ compiling for the <a href=\"https://stackoverflow.com/questions/18133812/where-is-the-x86-64-system-v-abi-documented\"\
    >x86-64 System V ABI</a>, which specifies that a <code>bool</code> as a function\
    \ arg in a register is represented by the bit-patterns <code>false=0</code> and\
    \ <code>true=1</code></strong> in the low 8 bits of the register<sup>1</sup>.\
    \  In memory, <code>bool</code> is a 1-byte type that again must have an integer\
    \ value of 0 or 1.</p>\n<p>(An ABI is a set of implementation choices that compilers\
    \ for the same platform agree on so they can make code that calls each other's\
    \ functions, including type sizes, struct layout rules, and calling conventions.)</p>\n\
    <p><strong>ISO C++ doesn't specify it, but this ABI decision is widespread because\
    \ it makes bool-&gt;int conversion cheap (just zero-extension)</strong>.  I'm\
    \ not aware of any ABIs that don't let the compiler assume 0 or 1 for <code>bool</code>,\
    \ for any architecture (not just x86).  It allows optimizations like <code>!mybool</code>\
    \ with <code>xor eax,1</code> to flip the low bit: <a href=\"https://stackoverflow.com/questions/49056128/any-possible-code-that-can-flip-a-bit-integer-bool-between-0-and-1-in-single-cpu\"\
    >Any possible code that can flip a bit/integer/bool between 0 and 1 in single\
    \ CPU instruction</a>.  Or compiling <code>a&amp;&amp;b</code> to a bitwise AND\
    \ for <code>bool</code> types.  Some compilers do actually take advantage <a href=\"\
    https://stackoverflow.com/questions/47243955/boolean-values-as-8-bit-in-compilers-are-operations-on-them-inefficient/47245003#47245003\"\
    >Boolean values as 8 bit in compilers. Are operations on them inefficient?</a>.</p>\n\
    <p><strong>In general, the as-if rule allows allows the compiler to take advantage\
    \ of things that are true <em>on the target platform being compiled for</em></strong>,\
    \ because the end result will be executable code that implements the same externally-visible\
    \ behaviour as the C++ source.  (With all the restrictions that Undefined Behaviour\
    \ places on what is actually \"externally visible\": not with a debugger, but\
    \ from another thread in a well-formed / legal C++ program.)</p>\n<p><strong>The\
    \ compiler is definitely allowed to take full advantage of an ABI guarantee in\
    \ its code-gen, and make code like you found which optimizes <code>strlen(whichString)</code>\
    \ to<br/>\n<code>5U - boolValue</code>.</strong>  (BTW, this optimization is kind\
    \ of clever, but maybe shortsighted vs. branching and inlining <code>memcpy</code>as\
    \ stores of immediate data<sup>2</sup>.)</p>\n<p>Or the compiler could have created\
    \ a table of pointers and indexed it with the integer value of the <code>bool</code>,\
    \ again assuming it was a 0 or 1.  (<a href=\"https://stackoverflow.com/questions/54120862/can-an-uninitialized-bool-crash-a-program/54120993#54120993\"\
    >This possibility is what @Barmar's answer suggested</a>.)</p>\n<hr/>\n<p>Your\
    \ <code>__attribute((noinline))</code> constructor with optimization enabled led\
    \ to clang just loading a byte from the stack to use as <code>uninitializedBool</code>.\
    \  It made space for the object in <code>main</code> with <code>push rax</code>\
    \ (which is smaller and for various reason about as efficient as <code>sub rsp,\
    \ 8</code>), so whatever garbage was in AL on entry to <code>main</code> is the\
    \ value it used for <code>uninitializedBool</code>.  This is why you actually\
    \ got values that weren't just <code>0</code>.</p>\n<p><code>5U - random garbage</code>\
    \ can easily wrap to a large unsigned value, leading memcpy to go into unmapped\
    \ memory.  The destination is in static storage, not the stack, so you're not\
    \ overwriting a return address or something.</p>\n<hr/>\n<p><strong>Other implementations\
    \ could make different choices, e.g. <code>false=0</code> and <code>true=any non-zero\
    \ value</code>.  Then clang probably wouldn't make code that crashes for <em>this</em>\
    \ specific instance of UB. (But it would still be allowed to if it wanted to.)</strong>\
    \  I don't know of any implementations that choose anything other what x86-64\
    \ does for <code>bool</code>, but the C++ standard allows many things that nobody\
    \ does or even would want to do on hardware that's anything like current CPUs.</p>\n\
    <p><strong>ISO C++ leaves it unspecified what you'll find when you examine or\
    \ modify the object representation of a <code>bool</code></strong>.  (e.g. by\
    \ <code>memcpy</code>ing the <code>bool</code> into <code>unsigned char</code>,\
    \ which you're allowed to do because <code>char*</code> can alias anything.  And\
    \ <code>unsigned char</code> is guaranteed to have no padding bits, so the C++\
    \ standard does formally let you hexdump object representations without any UB.\
    \  Pointer-casting to copy the object representation is different from assigning\
    \ <code>char foo = my_bool</code>, of course, so booleanization to 0 or 1 wouldn't\
    \ happen and you'd get the raw object representation.)</p>\n<p><strong>You've\
    \ <em>partially</em> \"hidden\" the UB on this execution path from the compiler\
    \ with <code>noinline</code></strong>.  Even if it doesn't inline, though, interprocedural\
    \ optimizations could still make a version of the function that depends on the\
    \ definition of another function.  (First, clang is making an executable, not\
    \ a Unix shared library where symbol-interposition can happen.  Second, the definition\
    \ in inside the <code>class{}</code> definition so all translation units must\
    \ have the same definition.  Like with the <code>inline</code> keyword.)</p>\n\
    <p><strong>So a compiler could emit just a <code>ret</code> or <code>ud2</code>\
    \ (illegal instruction) as the definition for <code>main</code>, because the path\
    \ of execution starting at the top of <code>main</code> unavoidably encounters\
    \ Undefined Behaviour.</strong> (Which the compiler can see at compile time if\
    \ it decided to follow the path through the non-inline constructor.)</p>\n<p>Any\
    \ program that encounters UB is totally undefined for its entire existence.  But\
    \ UB inside a function or <code>if()</code> branch that never actually runs doesn't\
    \ corrupt the rest of the program.  In practice that means that compilers can\
    \ decide to emit an illegal instruction, or a <code>ret</code>, or not emit anything\
    \ and fall into the next block / function, for the whole basic block that can\
    \ be proven at compile time to contain or lead to UB.</p>\n<p><strong>GCC and\
    \ Clang in practice <em>do</em> actually sometimes emit <code>ud2</code> on UB,\
    \ instead of even trying to generate code for paths of execution that make no\
    \ sense.</strong>  Or for cases like falling off the end of a non-<code>void</code>\
    \ function, gcc will sometimes omit a <code>ret</code> instruction.  If you were\
    \ thinking that \"my function will just return with whatever garbage is in RAX\"\
    , you are sorely mistaken.  <strong>Modern C++ compilers don't treat the language\
    \ like a portable assembly language any more.  Your program really has to be valid\
    \ C++, without making assumptions about how a stand-alone non inlined version\
    \ of your function might look in asm.</strong></p>\n<p>Another fun example is\
    \ <a href=\"https://stackoverflow.com/questions/47510783/why-does-unaligned-access-to-mmaped-memory-sometimes-segfault-on-amd64/47512025#47512025\"\
    >Why does unaligned access to mmap'ed memory sometimes segfault on AMD64?</a>.\
    \  x86 doesn't fault on unaligned integers, right?  So why would a misaligned\
    \ <code>uint16_t*</code> be a problem?  Because <code>alignof(uint16_t) == 2</code>,\
    \ and violating that assumption led to a segfault when auto-vectorizing with SSE2.</p>\n\
    <p><strong>See also</strong> <a href=\"http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html\"\
    \ rel=\"noreferrer\">What Every C Programmer Should Know About Undefined Behavior\
    \ #1/3</a>, an article by a clang developer.</p>\n<h2>Key point: if the compiler\
    \ noticed the UB at compile time, it <em>could</em> \"break\" (emit surprising\
    \ asm) the path through your code that causes UB even if targeting an ABI where\
    \ any bit-pattern is a valid object representation for <code>bool</code>.</h2>\n\
    <p>Expect total hostility toward many mistakes by the programmer, especially things\
    \ modern compilers warn about.  This is why you should use <code>-Wall</code>\
    \ and fix warnings.  C++ is not a user-friendly language, and something in C++\
    \ can be unsafe even if it would be safe in asm on the target you're compiling\
    \ for.  (e.g. signed overflow is UB in C++ and compilers will assume it doesn't\
    \ happen, even when compiling for 2's complement x86, unless you use <code>clang/gcc\
    \ -fwrapv</code>.)</p>\n<p>Compile-time-visible UB is always dangerous, and it's\
    \ really hard to be sure (with link-time optimization) that you've really hidden\
    \ UB from the compiler and can thus reason about what kind of asm it will generate.</p>\n\
    <p>Not to be over-dramatic; often compilers do let you get away with some things\
    \ and emit code like you're expecting even when something is UB.  But maybe it\
    \ will be a problem in the future if compiler devs implement some optimization\
    \ that gains more info about value-ranges (e.g. that a variable is non-negative,\
    \ maybe allowing it to optimize sign-extension to free zero-extension on x86-64).\
    \  For example, in current gcc and clang, doing <code>tmp = a+INT_MIN</code> doesn't\
    \ let them optimize <code>a&lt;0</code> as always-true, only that <code>tmp</code>\
    \ is always negative.  (So they don't backtrack from the inputs of a calculation\
    \ to derive range info, only on the results based on the assumption of no signed\
    \ overflow: <a href=\"https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(fontScale:1.2899450879999999,j:1,lang:c%2B%2B,source:'%23include+%3Climits.h%3E%0A%0Aint+range_check(int+a,+int+*sink1,+int+*sink2)+%7B%0A++++int+tmp+%3D+(a+%2B+INT_MIN)%3B++//+a+%3E%3D+1+to+avoid+UB%0A++++//+tmp+is+definitely+negative%0A++++//+a+is+definitely+positive%0A++++if+(tmp+%3E+0)+*sink1+%3D+0%3B++++++//+optimized+away%0A++++if+(a+%3C+0)+*sink2+%3D+0%3B++++++++//+not+optimized+away%0A++++return+tmp%3B%0A%7D%0A%0A%0A//+it+seems+that+gcc+and+clang+don!'t+derive+range+info+for+a%0A//+based+on+%60a-12345%60+not+overflowing,%0A//+but+they+do+derive+range+info+for+the+result.%0Aint+signed_overflow_rangecheck(int+a,+int+*sink)+%7B%0A++++int+tmp+%3D+(a+-+12345)%3B%0A++++//if+((unsigned)a+%3D%3D+0x80000000UL)+*sink%3D0%3B%0A++++if+(tmp+%3E+0x7ffffff0)+*sink+%3D+1%3B++//+optimized+out:+it+can!'t+have+wrapped+to+a+positive+this+close+to+INT_MAX%0A++++if+(a+%3C+(INT_MIN%2B12))+*sink+%3D+2%3B++//+not+optimized+out.++But+%60a%60+this+close+to+INT_MIN+would+mean+a-12345+wrapped.%0A++++return+tmp%3B%0A%7D%0A%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:37.77562439622385,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:clang700,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'1',trim:'1'),fontScale:1.2899450879999999,lang:c%2B%2B,libs:!(),options:'-xc+-Wall+-Wextra+-O3+-std%3Dgnu11+-march%3Dznver1',source:1),l:'5',n:'0',o:'x86-64+clang+7.0.0+(Editor+%231,+Compiler+%231)+C%2B%2B',t:'0')),k:30.92627232139171,l:'4',m:100,n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:g82,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'1',trim:'1'),fontScale:1.2899450879999999,lang:c%2B%2B,libs:!(),options:'-Wall+-Wextra+-O3+-std%3Dgnu%2B%2B11+-fverbose-asm',source:1),l:'5',n:'0',o:'x86-64+gcc+8.2+(Editor+%231,+Compiler+%232)+C%2B%2B',t:'0')),k:31.29810328238445,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',m:100,n:'0',o:'',t:'0')),version:4\"\
    \ rel=\"noreferrer\">example on Godbolt</a>.  I don't know if this is intentional\
    \ user-friendliness or simply a missed optimization.)</p>\n<p>Also note that <strong>implementations\
    \ (aka compilers) are allowed to define behaviour that ISO C++ leaves undefined</strong>.\
    \  For example, all compilers that support Intel's intrinsics (like <code>_mm_add_ps(__m128,\
    \ __m128)</code> for manual SIMD vectorization) must allow forming mis-aligned\
    \ pointers, which is UB in C++ even if you <em>don't</em> dereference them.  <code>__m128i\
    \ _mm_loadu_si128(const __m128i *)</code> does unaligned loads by taking a misaligned\
    \ <code>__m128i*</code> arg, not a <code>void*</code> or <code>char*</code>. \
    \ <a href=\"https://stackoverflow.com/questions/52112605/is-reinterpret-casting-between-hardware-vector-pointer-and-the-corresponding-t\"\
    >Is `reinterpret_cast`ing between hardware vector pointer and the corresponding\
    \ type an undefined behavior?</a></p>\n<p>GNU C/C++ also defines the behaviour\
    \ of left-shifting a negative signed number (even without <code>-fwrapv</code>),\
    \ separately from the normal signed-overflow UB rules.  (<a href=\"https://stackoverflow.com/questions/3784996/why-does-left-shift-operation-invoke-undefined-behaviour-when-the-left-side-oper\"\
    >This is UB in ISO C++</a>, while right shifts of signed numbers are implementation-defined\
    \ (logical vs. arithmetic); good quality implementations choose arithmetic on\
    \ HW that has arithmetic right shifts, but ISO C++ doesn't specify).  This is\
    \ documented in <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Integers-implementation.html\"\
    \ rel=\"noreferrer\">the GCC manual's Integer section</a>, along with defining\
    \ implementation-defined behaviour that C standards require implementations to\
    \ define one way or another.</p>\n<p>There are definitely quality-of-implementation\
    \ issues that compiler developers care about; they generally aren't <em>trying</em>\
    \ to make compilers that are intentionally hostile, but taking advantage of all\
    \ the UB potholes in C++ (except ones they choose to define) to optimize better\
    \ can be nearly indistinguishable at times.</p>\n<hr/>\n<p><strong>Footnote 1</strong>:\
    \ The upper 56 bits can be garbage which the callee must ignore, as usual for\
    \ types narrower than a register.</p>\n<p>(<strong>Other ABIs <em>do</em> make\
    \ different choices here</strong>.  Some do require narrow integer types to be\
    \ zero- or sign-extended to fill a register when passed to or returned from functions,\
    \ like MIPS64 and PowerPC64.  See the last section of <a href=\"https://stackoverflow.com/questions/51387571/movzx-missing-32-bit-register-to-64-bit-register\"\
    >this x86-64 answer which compares vs. those earlier ISAs</a>.)</p>\n<p>For example,\
    \ a caller might have calculated <code>a &amp; 0x01010101</code> in RDI and used\
    \ it for something else, before calling <code>bool_func(a&amp;1)</code>.  The\
    \ caller could optimize away the <code>&amp;1</code> because it already did that\
    \ to the low byte as part of <code>and edi, 0x01010101</code>, and it knows the\
    \ callee is required to ignore the high bytes.</p>\n<p>Or if a bool is passed\
    \ as the 3rd arg, maybe a caller optimizing for code-size loads it with <code>mov\
    \ dl, [mem]</code> instead of <code>movzx edx, [mem]</code>, saving 1 byte at\
    \ the cost of a false dependency on the old value of RDX (or other partial-register\
    \ effect, depending on CPU model).  Or for the first arg, <code>mov dil, byte\
    \ [r10]</code> instead of <code>movzx edi, byte [r10]</code>, because both require\
    \ a REX prefix anyway.</p>\n<p>This is why clang emits <code>movzx   eax, dil</code>\
    \ in <code>Serialize</code>, instead of <code>sub eax, edi</code>.  (For integer\
    \ args, clang violates this ABI rule, instead depending on the undocumented behaviour\
    \ of gcc and clang to zero- or sign-extend narrow integers to 32 bits.  <a href=\"\
    https://stackoverflow.com/questions/36706721/is-a-sign-or-zero-extension-required-when-adding-a-32bit-offset-to-a-pointer-for/36760539#36760539\"\
    >Is a sign or zero extension required when adding a 32bit offset to a pointer\
    \ for the x86-64 ABI?</a>\n So I was interested to see that it doesn't do the\
    \ same thing for <code>bool</code>.)</p>\n<hr/>\n<p><strong>Footnote 2:</strong>\
    \  After branching, you'd just have a 4-byte <code>mov</code>-immediate, or a\
    \ 4-byte + 1-byte store.  The length is implicit in the store widths + offsets.</p>\n\
    <p>OTOH, glibc memcpy will do two 4-byte loads/stores with an overlap that depends\
    \ on length, so this really does end up making the whole thing free of conditional\
    \ branches on the boolean.  See the <a href=\"https://code.woboq.org/userspace/glibc/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S.html#309\"\
    \ rel=\"noreferrer\"><code>L(between_4_7):</code> block </a> in glibc's memcpy/memmove.\
    \  Or at least, go the same way for either boolean in memcpy's branching to select\
    \ a chunk size.</p>\n<p>If inlining, you could use 2x <code>mov</code>-immediate\
    \ + <code>cmov</code> and a conditional offset, or you could leave the string\
    \ data in memory.</p>\n<p>Or if tuning for Intel Ice Lake (<a href=\"https://en.wikichip.org/wiki/intel/microarchitectures/ice_lake_(client)#New_instructions\"\
    \ rel=\"noreferrer\">with the Fast Short REP MOV feature</a>), an actual <code>rep\
    \ movsb</code> might be optimal.  glibc <code>memcpy</code> might start using\
    \ <code>rep movsb</code>  for small sizes on CPUs with that feature, saving a\
    \ lot of branching.</p>\n<hr/>\n<h1>Tools for detecting UB and usage of uninitialized\
    \ values</h1>\n<p>In gcc and clang, you can compile with <code>-fsanitize=undefined</code>\
    \ to add run-time instrumentation that will warn or error out on UB that happens\
    \ at runtime.  That won't catch unitialized variables, though.  (Because it doesn't\
    \ increase type sizes to make room for an \"uninitialized\" bit).</p>\n<p>See\
    \ <a href=\"https://developers.redhat.com/blog/2014/10/16/gcc-undefined-behavior-sanitizer-ubsan/\"\
    \ rel=\"noreferrer\">https://developers.redhat.com/blog/2014/10/16/gcc-undefined-behavior-sanitizer-ubsan/</a></p>\n\
    <p><strong>To find usage of uninitialized data, there's Address Sanitizer and\
    \ Memory Sanitizer in clang/LLVM.</strong> <a href=\"https://github.com/google/sanitizers/wiki/MemorySanitizer\"\
    \ rel=\"noreferrer\">https://github.com/google/sanitizers/wiki/MemorySanitizer</a>\
    \ shows examples of <code>clang -fsanitize=memory -fPIE -pie</code> detecting\
    \ uninitialized memory reads.  It might work best if you compile <em>without</em>\
    \ optimization, so all reads of variables end up actually loading from memory\
    \ in the asm.  They show it being used at <code>-O2</code> in a case where the\
    \ load wouldn't optimize away.  I haven't tried it myself.  (In some cases, e.g.\
    \ not initializing an accumulator before summing an array, clang -O3 will emit\
    \ code that sums into a vector register that it never initialized.  So with optimization,\
    \ you can have a case where there's no memory read associated with the UB.  But\
    \ <code>-fsanitize=memory</code> changes the generated asm, and might result in\
    \ a check for this.)</p>\n<blockquote>\n<p>It will tolerate copying of uninitialized\
    \ memory, and also simple logic and arithmetic operations with it. In general,\
    \ MemorySanitizer silently tracks the spread of uninitialized data in memory,\
    \ and reports a warning when a code branch is taken (or not taken) depending on\
    \ an uninitialized value.</p>\n<p>MemorySanitizer implements a subset of functionality\
    \ found in Valgrind (Memcheck tool).</p>\n</blockquote>\n<p>It should work for\
    \ this case because the call to glibc <code>memcpy</code> with a <code>length</code>\
    \ calculated from uninitialized memory will (inside the library) result in a branch\
    \ based on <code>length</code>.  If it had inlined a fully branchless version\
    \ that just used <code>cmov</code>, indexing, and two stores, it might not have\
    \ worked.</p>\n<p><a href=\"http://valgrind.org/docs/manual/mc-manual.html\" rel=\"\
    noreferrer\">Valgrind's <code>memcheck</code></a> will also look for this kind\
    \ of problem, again not complaining if the program simply copies around uninitialized\
    \ data.  But it says it will detect when a \"Conditional jump or move depends\
    \ on uninitialised value(s)\", to try to catch any externally-visible behaviour\
    \ that depends on uninitialized data.</p>\n<p>Perhaps the idea behind not flagging\
    \ just a load is that structs can have padding, and copying the whole struct (including\
    \ padding) with a wide vector load/store is not an error even if the individual\
    \ members were only written one at a time.  At the asm level, the information\
    \ about what was padding and what is actually part of the value has been lost.</p>\n\
    </div>"
- - Does the C++ standard allow for an uninitialized bool to crash a program?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The compiler is allowed to assume\
    \ that a boolean value passed as an argument is a valid boolean value (i.e. one\
    \ which has been initialised or converted to <code>true</code> or <code>false</code>).\
    \ The <code>true</code> value doesn't have to be the same as the integer 1 --\
    \ indeed, there can be various representations of <code>true</code> and <code>false</code>\
    \ -- but the parameter must be some valid representation of one of those two values,\
    \ where \"valid representation\" is implementation-defined.</p>\n<p>So if you\
    \ fail to initialise a <code>bool</code>, or if you succeed in overwriting it\
    \ through some pointer of a different type, then the compiler's assumptions will\
    \ be wrong and Undefined Behaviour will ensue. You had been warned:</p>\n<blockquote>\n\
    <p>50) Using a bool value in ways described by this International Standard as\
    \ âundefinedâ, such as by examining the value of an uninitialized automatic object,\
    \ might cause it to behave as if it is neither true nor false. <em>(Footnote to\
    \ para 6 of Â§6.9.1, Fundamental Types)</em></p>\n</blockquote>\n</div>"
- - Does the C++ standard allow for an uninitialized bool to crash a program?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The function itself is correct,\
    \ but in your test program, the statement that calls the function causes undefined\
    \ behaviour by using the value of an uninitialized variable.  </p>\n<p>The bug\
    \ is in the calling function, and it could be detected by code review or static\
    \ analysis of the calling function. Using your compiler explorer link, the gcc\
    \ 8.2 compiler does detect the bug. (Maybe you could file a bug report against\
    \ clang that it doesn't find the problem).</p>\n<p>Undefined behaviour means <em>anything</em>\
    \ can happen, which includes the program crashing a few lines after the event\
    \ that triggered the undefined behaviour.</p>\n<p>NB. The answer to \"Can undefined\
    \ behaviour cause _____ ?\" is always \"Yes\". That's literally the definition\
    \ of undefined behaviour.</p>\n</div>"
- - '*.h or *.hpp for your class definitions'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Here are a couple of reasons\
    \ for having different naming of C vs C++ headers:</p>\n<ul>\n<li>Automatic code\
    \ formatting, you might have different guidelines for formatting C and C++ code.\
    \ If the headers are separated by extension you can set your editor to apply the\
    \ appropriate formatting automatically</li>\n<li>Naming, I've been on projects\
    \ where there were libraries written in C and then wrappers had been implemented\
    \ in C++. Since the headers usually had similar names, i.e. Feature.h vs Feature.hpp,\
    \ they were easy to tell apart.</li>\n<li>Inclusion, maybe your project has more\
    \ appropriate versions available written in C++ but you are using the C version\
    \ (see above point). If headers are named after the language they are implemented\
    \ in you can easily spot all the C-headers and check for C++ versions.</li>\n\
    </ul>\n<p>Remember, C is <strong>not</strong> C++ and it can be very dangerous\
    \ to mix and match unless you know what you are doing. Naming your sources appropriately\
    \ helps you tell the languages apart.</p>\n</div>"
- - '*.h or *.hpp for your class definitions'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I use .hpp because I want the\
    \ user to differentiate what headers are C++ headers, and what headers are C headers.</p>\n\
    <p>This can be important when your project is using both C and C++ modules: Like\
    \ someone else explained before me, you should do it very carefully, and its starts\
    \ by the \"contract\" you offer through the extension</p>\n<h1>.hpp : C++ Headers</h1>\n\
    <p><i>(Or .hxx, or .hh, or whatever)</i></p>\n<p>This header is for C++ only.</p>\n\
    <p>If you're in a C module, don't even try to include it. You won't like it, because\
    \ no effort is done to make it C-friendly (too much would be lost, like function\
    \ overloading, namespaces, etc. etc.).</p>\n<h1>.h : C/C++ compatible or pure\
    \ C Headers</h1>\n<p>This header can be included by both a C source, and a C++\
    \ source, directly or indirectly.</p>\n<p>It can included directly, being protected\
    \ by the <code>__cplusplus</code> macro:</p>\n<ul>\n<li>Which mean that, from\
    \ a C++ viewpoint, the C-compatible code will be defined as <code>extern \"C\"\
    </code>.</li>\n<li>From a C viewpoint, all the C code will be plainly visible,\
    \ but the C++ code will be hidden (because it won't compile in a C compiler).</li>\n\
    </ul>\n<p>For example:</p>\n<pre><code>#ifndef MY_HEADER_H\n#define MY_HEADER_H\n\
    \n   #ifdef __cplusplus\n      extern \"C\"\n      {\n   #endif\n\n   void myCFunction()\
    \ ;\n\n   #ifdef __cplusplus\n      } // extern \"C\"\n   #endif\n\n#endif //\
    \ MY_HEADER_H\n</code></pre>\n<p>Or it could be included indirectly by the corresponding\
    \ .hpp header enclosing it with the <code>extern \"C\"</code> declaration.</p>\n\
    <p>For example:</p>\n<pre><code>#ifndef MY_HEADER_HPP\n#define MY_HEADER_HPP\n\
    \nextern \"C\"\n{\n#include \"my_header.h\"\n}\n\n#endif // MY_HEADER_HPP\n</code></pre>\n\
    <p>and:</p>\n<pre><code>#ifndef MY_HEADER_H\n#define MY_HEADER_H\n\nvoid myCFunction()\
    \ ;\n\n#endif // MY_HEADER_H\n</code></pre>\n</div>"
- - '*.h or *.hpp for your class definitions'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I always considered the <code>.hpp</code>\
    \ header to be a sort of portmanteau of <code>.h</code> and <code>.cpp</code>\
    \ files...a header which contains implementation details as well.  </p>\n<p>Typically\
    \ when I've seen (and use) <code>.hpp</code> as an extension, there is no corresponding\
    \ <code>.cpp</code> file.  As others have said, this isn't a hard and fast rule,\
    \ just how I tend to use <code>.hpp</code> files.</p>\n</div>"
- - Debugging with command-line parameters in Visual Studio
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Yes, it's on the Debugging section\
    \ of the properties page of the project.</p>\n<p>In VS since 2008: right-click\
    \ the <code>project</code>, choose <code>properties</code>, go to the <code>Debugging</code>\
    \ section -- there is a box for \"<code>Command Arguments</code>\". (Tip: not\
    \ <code>solution</code>, but <code>project</code>)</p>\n</div>"
- - Debugging with command-line parameters in Visual Studio
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The <a href=\"https://developer.mozilla.org/en/Debugging_Mozilla_on_Windows_FAQ\"\
    \ rel=\"noreferrer\">Mozilla.org FAQ on debugging Mozilla on Windows</a> is of\
    \ interest here.</p>\n<p>In short, the Visual Studio debugger can be invoked on\
    \ a program from the command line, allowing one to specify the command line arguments\
    \ when invoking a command line program, directly on the command line.</p>\n<p>This\
    \ looks like the following for Visual Studio 8 or 9</p>\n<pre>\n devenv /debugexe\
    \ 'program name' 'program arguments'\n</pre>\n<p>It is also possible to have an\
    \ <a href=\"http://www.olegsych.com/2007/08/debugexe-command-line-switch-in-visual-studio/\"\
    \ rel=\"noreferrer\">explorer action</a> to start a program in the Visual Studio\
    \ debugger.</p>\n</div>"
- - Debugging with command-line parameters in Visual Studio
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Even if you do start the executable\
    \ outside Visual Studio, you can still use the \"Attach\" command to connect Visual\
    \ Studio to your already-running executable. This can be useful e.g. when your\
    \ application is run as a plug-in within another application.</p>\n</div>"
- - Unnamed/anonymous namespaces vs. static functions
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><s>The C++ Standard reads in\
    \ section 7.3.1.1 Unnamed namespaces, paragraph 2:</s>\n<s></s></p>\n<blockquote>\n\
    <p>The use of the static keyword is\n  deprecated when declaring objects in a\n\
    \  namespace scope, the unnamed-namespace\n  provides a superior alternative.\n\
    \  </p>\n</blockquote>\n<p>Static only applies to names of objects, functions,\
    \ and anonymous unions, not to type declarations.</p>\n<p><strong>Edit:</strong></p>\n\
    <p>The decision to deprecate this use of the static keyword (affect visibility\
    \ of a variable declaration in a translation unit) has been reversed (<a href=\"\
    http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1012\" rel=\"noreferrer\"\
    >ref</a>).  In this case using a static or an unnamed namespace are back to being\
    \ essentially two ways of doing the exact same thing.  For more discussion please\
    \ see <a href=\"https://stackoverflow.com/questions/4726570/deprecation-of-the-static-keyword-no-more\"\
    >this</a> SO question.</p>\n<p>Unnamed namespaces still have the advantage of\
    \ allowing you to define translation-unit-local types.  Please see <a href=\"\
    https://stackoverflow.com/questions/4422507/superiority-of-unnamed-namespace-over-static\"\
    >this</a> SO question for more details.</p>\n<p>Credit goes to <a href=\"https://stackoverflow.com/users/1220179/mike-percy\"\
    >Mike Percy</a> for bringing this to my attention.</p>\n</div>"
- - Unnamed/anonymous namespaces vs. static functions
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Putting methods in an anonymous\
    \ namespace prevents you from accidentally violating the <a href=\"http://en.wikipedia.org/wiki/One_Definition_Rule\"\
    \ rel=\"noreferrer\">One Definition Rule</a>, allowing you to never worry about\
    \ naming your helper methods the same as some other method you may link in.</p>\n\
    <p>And, as pointed out by luke, anonymous namespaces are preferred by the standard\
    \ over static members.</p>\n</div>"
- - Unnamed/anonymous namespaces vs. static functions
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There is one edge case where\
    \ static has a surprising affect (at least it was to me).  The C++03 Standard\
    \ states in 14.6.4.2/1:</p>\n<blockquote>\n<p>For a function call that depends\
    \ on a template parameter, if the function name is an <em>unqualified-id</em>\
    \ but not a <em>template-id</em>, the candidate functions are found using the\
    \ usual lookup rules (3.4.1, 3.4.2) except that:</p>\n<ul>\n<li>For the part of\
    \ the lookup using unqualified name lookup (3.4.1), only function declarations\
    \ with external linkage from the template definition context are found.</li>\n\
    <li>For the part of the lookup using associated namespaces (3.4.2), only function\
    \ declarations with external linkage found in either the template definition context\
    \ or the template instantiation context are found.</li>\n</ul>\n<p>...</p>\n</blockquote>\n\
    <p>The below code will call <code>foo(void*)</code> and not <code>foo(S const\
    \ &amp;)</code> as you might expect.</p>\n<pre><code>template &lt;typename T&gt;\n\
    int b1 (T const &amp; t)\n{\n  foo(t);\n}\n\nnamespace NS\n{\n  namespace\n  {\n\
    \    struct S\n    {\n    public:\n      operator void * () const;\n    };\n\n\
    \    void foo (void*);\n    static void foo (S const &amp;);   // Not considered\
    \ 14.6.4.2(b1)\n  }\n\n}\n\nvoid b2()\n{\n  NS::S s;\n  b1 (s);\n}\n</code></pre>\n\
    <p>In itself this is probably not that big a deal, but it does highlight that\
    \ for a fully compliant C++ compiler (ie. one with support for <code>export</code>)\
    \ the <code>static</code> keyword will still have functionality that is not available\
    \ in any other way.</p>\n<pre><code>// bar.h\nexport template &lt;typename T&gt;\n\
    int b1 (T const &amp; t);\n\n// bar.cc\n#include \"bar.h\"\ntemplate &lt;typename\
    \ T&gt;\nint b1 (T const &amp; t)\n{\n  foo(t);\n}\n\n// foo.cc\n#include \"bar.h\"\
    \nnamespace NS\n{\n  namespace\n  {\n    struct S\n    {\n    };\n\n    void foo\
    \ (S const &amp; s);  // Will be found by different TU 'bar.cc'\n  }\n}\n\nvoid\
    \ b2()\n{\n  NS::S s;\n  b1 (s);\n}\n</code></pre>\n<p>The only way to ensure\
    \ that the function in our unnamed namespace will not be found in templates using\
    \ ADL is to make it <code>static</code>.</p>\n<p><strong>Update for Modern C++</strong></p>\n\
    <p>As of C++ '11, members of an unnamed namespace have internal linkage implicitly\
    \ (3.5/4):</p>\n<blockquote>\n<p>An unnamed namespace or a namespace declared\
    \ directly or indirectly within an unnamed namespace has internal linkage.</p>\n\
    </blockquote>\n<p>But at the same time, 14.6.4.2/1 was updated to remove mention\
    \ of linkage (this taken from C++ '14):</p>\n<blockquote>\n<p>For a function call\
    \ where the postfix-expression is a dependent name, the candidate functions are\
    \ found using\n  the usual lookup rules (3.4.1, 3.4.2) except that:</p>\n<ul>\n\
    <li><p>For the part of the lookup using unqualified name lookup (3.4.1), only\
    \ function declarations from the template definition context are found.</p></li>\n\
    <li><p>For the part of the lookup using associated namespaces (3.4.2), only function\
    \ declarations found in either the template definition context or the template\
    \ instantiation context are found.</p></li>\n</ul>\n</blockquote>\n<p>The result\
    \ is that this particular difference between static and unnamed namespace members\
    \ no longer exists.</p>\n</div>"
- - How do I declare a 2d array in C++ using new?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>A dynamic 2D array is basically\
    \ an array of <em>pointers to arrays</em>. You can initialize it using a loop,\
    \ like this:</p>\n<pre><code>int** a = new int*[rowCount];\nfor(int i = 0; i &lt;\
    \ rowCount; ++i)\n    a[i] = new int[colCount];\n</code></pre>\n<p>The above,\
    \ for <code>colCount= 5</code> and <code>rowCount = 4</code>, would produce the\
    \ following:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/M75kn.png\"\
    /></p>\n</div>"
- - How do I declare a 2d array in C++ using new?
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>int** ary = new int[sizeY][sizeX]\n\
    </code></pre>\n<p>should be:</p>\n<pre><code>int **ary = new int*[sizeY];\nfor(int\
    \ i = 0; i &lt; sizeY; ++i) {\n    ary[i] = new int[sizeX];\n}\n</code></pre>\n\
    <p>and then clean up would be:</p>\n<pre><code>for(int i = 0; i &lt; sizeY; ++i)\
    \ {\n    delete [] ary[i];\n}\ndelete [] ary;\n</code></pre>\n<p><strong>EDIT:</strong>\
    \ as Dietrich Epp pointed out in the comments this is not exactly a light weight\
    \ solution. An alternative approach would be to use one large block of memory:</p>\n\
    <pre><code>int *ary = new int[sizeX*sizeY];\n\n// ary[i][j] is then rewritten\
    \ as\nary[i*sizeY+j]\n</code></pre>\n</div>"
- - How do I declare a 2d array in C++ using new?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Although <a href=\"https://stackoverflow.com/a/936702/358475\"\
    >this popular answer</a> will give you your desired indexing syntax, it is doubly\
    \ inefficient: big and slow both in space and time. There's a better way.</p>\n\
    <p><strong>Why That Answer is Big and Slow</strong></p>\n<p>The proposed solution\
    \ is to create a dynamic array of pointers, then initializing each pointer to\
    \ its own, independent dynamic array. The <strong>advantage</strong> of this approach\
    \ is that it gives you the indexing syntax you're used to, so if you want to find\
    \ the value of the matrix at position x,y, you say:</p>\n<pre><code>int val =\
    \ matrix[ x ][ y ];\n</code></pre>\n<p>This works because matrix[x] returns a\
    \ pointer to an array, which is then indexed with [y]. Breaking it down:</p>\n\
    <pre><code>int* row = matrix[ x ];\nint  val = row[ y ];\n</code></pre>\n<p>Convenient,\
    \ yes? We like our [ x ][ y ] syntax. </p>\n<p>But the solution has a big <strong>disadvantage</strong>,\
    \ which is that it is both fat and slow. </p>\n<p>Why?</p>\n<p>The reason that\
    \ it's both fat and slow is actually the same. Each \"row\" in the matrix is a\
    \ separately allocated dynamic array. Making a heap allocation is expensive both\
    \ in time and space. The allocator takes time to make the allocation, sometimes\
    \ running O(n) algorithms to do it. And the allocator \"pads\" each of your row\
    \ arrays with extra bytes for bookkeeping and alignment. That extra space costs...well...extra\
    \ space. The deallocator will <em>also</em> take extra time when you go to deallocate\
    \ the matrix, painstakingly free-ing up each individual row allocation. Gets me\
    \ in a sweat just thinking about it.</p>\n<p>There's another reason it's slow.\
    \ These separate allocations tend to live in discontinuous parts of memory. One\
    \ row may be at address 1,000, another at address 100,000âyou get the idea. This\
    \ means that when you're traversing the matrix, you're leaping through memory\
    \ like a wild person. This tends to result in cache misses that vastly slow down\
    \ your processing time.</p>\n<p>So, if you absolute must have your cute [x][y]\
    \ indexing syntax, use that solution. If you want quickness and smallness (and\
    \ if you don't care about those, why are you working in C++?), you need a different\
    \ solution.</p>\n<p><strong>A Different Solution</strong></p>\n<p>The better solution\
    \ is to allocate your whole matrix as a single dynamic array, then use (slightly)\
    \ clever indexing math of your own to access cells. The indexing math is only\
    \ very slightly clever; nah, it's not clever at all: it's obvious.</p>\n<pre><code>class\
    \ Matrix\n{\n    ...\n    size_t index( int x, int y ) const { return x + m_width\
    \ * y; }\n};\n</code></pre>\n<p>Given this <code>index()</code> function (which\
    \ I'm imagining is a member of a class because it needs to know the <code>m_width</code>\
    \ of your matrix), you can access cells within your matrix array. The matrix array\
    \ is allocated like this:</p>\n<pre><code>array = new int[ width * height ];\n\
    </code></pre>\n<p>So the equivalent of this in the slow, fat solution:</p>\n<pre><code>array[\
    \ x ][ y ]\n</code></pre>\n<p>...is this in the quick, small solution:</p>\n<pre><code>array[\
    \ index( x, y )]\n</code></pre>\n<p>Sad, I know. But you'll get used to it. And\
    \ your CPU will thank you.</p>\n</div>"
- - What is meant with âconstâ at end of function declaration? [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>A \"const function\", denoted\
    \ with the keyword <code>const</code> after a function declaration, makes it a\
    \ compiler error for this class function to change a member variable of the class.\
    \  However, reading of a class variables is okay inside of the function, but writing\
    \ inside of this function will generate a compiler error.  </p>\n<p>Another way\
    \ of thinking about such \"const function\" is by viewing a class function as\
    \ a normal function taking an implicit <code>this</code> pointer. So a method\
    \ <code>int Foo::Bar(int random_arg)</code> (without the const at the end) results\
    \ in a function like <code>int Foo_Bar(Foo* this, int random_arg)</code>, and\
    \ a call such as <code>Foo f; f.Bar(4)</code> will internally correspond to something\
    \ like <code>Foo f; Foo_Bar(&amp;f, 4)</code>. Now adding the const at the end\
    \ (<code>int Foo::Bar(int random_arg) const</code>) can then be understood as\
    \ a declaration with a const this pointer: <code>int Foo_Bar(const Foo* this,\
    \ int random_arg)</code>. Since the type of <code>this</code> in such case is\
    \ const, no modifications of member variables are possible.</p>\n<p>It is possible\
    \ to loosen the \"const function\" restriction of not allowing the function to\
    \ write to any variable of a class. To allow some of the variables to be writable\
    \ even when the function is marked as a \"const function\", these class variables\
    \ are marked with the keyword <code>mutable</code>.  Thus, if a class variable\
    \ is marked as mutable, and a \"const function\" writes to this variable then\
    \ the code will compile cleanly and the variable is possible to change. (C++11)</p>\n\
    <p>As usual when dealing with the <code>const</code> keyword, changing the location\
    \ of the const key word in a C++ statement has entirely different meanings.  The\
    \ above usage of <code>const</code> only applies when adding <code>const</code>\
    \ to the end of the function declaration after the parenthesis. </p>\n<p><code>const</code>\
    \ is a highly overused qualifier in C++: the syntax and ordering is often not\
    \ straightforward in combination with pointers. Some readings about <code>const</code>\
    \ correctness and the <code>const</code> keyword:</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Const-correctness\"\
    \ rel=\"noreferrer\">Const correctness</a></p>\n<p><a href=\"http://duramecho.com/ComputerInformation/WhyHowCppConst.html\"\
    \ rel=\"noreferrer\">The C++ 'const' Declaration: Why &amp; How</a></p>\n</div>"
- - What is meant with âconstâ at end of function declaration? [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Consider two class-typed variables:</p>\n\
    <pre><code>class Boo { ... };\n\nBoo b0;       // mutable object\nconst Boo b1;\
    \ // non-mutable object\n</code></pre>\n<p>Now you are able to call <em>any</em>\
    \ member function of <code>Boo</code> on <code>b0</code>, but only <code>const</code>-qualified\
    \ member functions on <code>b1</code>.</p>\n</div>"
- - What is meant with âconstâ at end of function declaration? [duplicate]
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><code>Bar</code> is guaranteed\
    \ not to change the object it is being invoked on. See the <a href=\"http://www.parashift.com/c++-faq-lite/const-correctness.html\"\
    \ rel=\"noreferrer\">section about const correctness</a> in the C++ FAQ, for example.</p>\n\
    </div>"
- - How to initialize private static members in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The class declaration should\
    \ be in the header file (Or in the source file if not shared).<br/>\nFile: foo.h</p>\n\
    <pre><code>class foo\n{\n    private:\n        static int i;\n};\n</code></pre>\n\
    <p>But the initialization should be in source file.<br/>\nFile: foo.cpp</p>\n\
    <pre><code>int foo::i = 0;\n</code></pre>\n<p>If the initialization is in the\
    \ header file then each file that includes the header file will have a definition\
    \ of the static member. Thus during the link phase you will get linker errors\
    \ as the code to initialize the variable will be defined in multiple source files.</p>\n\
    <p><b>Note:</b> Matt Curtis: points out that C++ allows the simplification of\
    \ the above if the static member variable is of const int type (e.g. <code>int</code>,\
    \ <code>bool</code>, <code>char</code>). You can then declare and initialize the\
    \ member variable directly inside the class declaration in the header file:</p>\n\
    <pre><code>class foo\n{\n    private:\n        static int const i = 42;\n};\n\
    </code></pre>\n</div>"
- - How to initialize private static members in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>For a <strong>variable</strong>:</p>\n\
    <p>foo.h:</p>\n<pre><code>class foo\n{\nprivate:\n    static int i;\n};\n</code></pre>\n\
    <p>foo.cpp:</p>\n<pre><code>int foo::i = 0;\n</code></pre>\n<p>This is because\
    \ there can only be one instance of <code>foo::i</code> in your program. It's\
    \ sort of the equivalent of <code>extern int i</code> in a header file and <code>int\
    \ i</code> in a source file.</p>\n<p>For a <strong>constant</strong> you can put\
    \ the value straight in the class declaration:</p>\n<pre><code>class foo\n{\n\
    private:\n    static int i;\n    const static int a = 42;\n};\n</code></pre>\n\
    </div>"
- - How to initialize private static members in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>For future viewers of this question,\
    \ I want to point out that you should avoid what <a href=\"https://stackoverflow.com/a/8772501/5571184\"\
    >monkey0506 is suggesting</a>.</p>\n<p>Header files are for declarations.</p>\n\
    <p>Header files get compiled once for every <code>.cpp</code> file that directly\
    \ or indirectly <code>#includes</code> them, and code outside of any function\
    \ is run at program initialization, before <code>main()</code>.</p>\n<p>By putting:\
    \ <code>foo::i = VALUE;</code> into the header, <code>foo:i</code> will be assigned\
    \ the value <code>VALUE</code> (whatever that is) for every <code>.cpp</code>\
    \ file, and these assignments will happen in an indeterminate order (determined\
    \ by the linker) before <code>main()</code> is run.</p>\n<p>What if we <code>#define\
    \ VALUE</code> to be a different number in one of our <code>.cpp</code> files?\
    \ It will compile fine and we will have no way of knowing which one wins until\
    \ we run the program.</p>\n<p>Never put executed code into a header for the same\
    \ reason that you never <code>#include</code> a <code>.cpp</code> file.</p>\n\
    <p>include guards (which I agree you should always use) protect you from something\
    \ different: the same header being indirectly <code>#include</code>d multiple\
    \ times while compiling a single <code>.cpp</code> file</p>\n</div>"
- - Difference between `constexpr` and `const`
  - "<div class=\"post-text\" itemprop=\"text\">\n<h2>Basic meaning and syntax</h2>\n\
    <p>Both keywords can be used in the declaration of objects as well as functions.\
    \ The basic difference when applied to <em>objects</em> is this:</p>\n<ul>\n<li><p><code>const</code>\
    \ declares an object as <em>constant</em>. This implies a guarantee that, once\
    \ initialized, the value of that object won't change, and the compiler can make\
    \ use of this fact for optimizations. It also helps prevent the programmer from\
    \ writing code that modifies objects that were not meant to be modified after\
    \ initialization.</p></li>\n<li><p><code>constexpr</code> declares an object as\
    \ fit for use in what the Standard calls <em>constant expressions</em>. But note\
    \ that <code>constexpr</code> is not the only way to do this.</p></li>\n</ul>\n\
    <p>When applied to <em>functions</em> the basic difference is this:</p>\n<ul>\n\
    <li><p><code>const</code> can only be used for non-static member functions, not\
    \ functions in general. It gives a guarantee that the member function does not\
    \ modify any of the non-static data members.</p></li>\n<li><p><code>constexpr</code>\
    \ can be used with both member and non-member functions, as well as constructors.\
    \ It declares the function fit for use in <em>constant expressions</em>. The compiler\
    \ will only accept it if the function meets certain criteria (7.1.5/3,4), most\
    \ importantly <sup>(â )</sup>:</p>\n<ul>\n<li>The function body must be non-virtual\
    \ and extremely simple: Apart from typedefs and static asserts, only a single\
    \ <code>return</code> statement is allowed. In the case of a constructor, only\
    \ an initialization list, typedefs and static assert are allowed. (<code>= default</code>\
    \ and <code>= delete</code> are allowed, too, though.)</li>\n<li>As of C++14 the\
    \ rules are more relaxed, what is allowed since then inside a constexpr function:\
    \ <code>asm</code> declaration, a <code>goto</code> statement, a statement with\
    \ a label other than <code>case</code> and <code>default</code>, try-block, definition\
    \ of a variable of non-literal type, definition of a variable of static or thread\
    \ storage duration, definition of a variable for which no initialization is performed.</li>\n\
    <li>The arguments and the return type must be <em>literal types</em> (i.e., generally\
    \ speaking, very simple types, typically scalars or aggregates)</li>\n</ul></li>\n\
    </ul>\n<h2>Constant expressions</h2>\n<p>As said above, <code>constexpr</code>\
    \ declares both objects as well as functions as fit for use in constant expressions.\
    \ A constant expression is more than merely constant:</p>\n<ul>\n<li><p>It can\
    \ be used in places that require compile-time evaluation, for example, template\
    \ parameters and array-size specifiers:</p>\n<pre><code>template&lt;int N&gt;\n\
    class fixed_size_list\n{ /*...*/ };\n\nfixed_size_list&lt;X&gt; mylist;  // X\
    \ must be an integer constant expression\n\nint numbers[X];  // X must be an integer\
    \ constant expression\n</code></pre></li>\n<li><p>But note:</p>\n<ul>\n<li><p>Declaring\
    \ something as <code>constexpr</code> does not necessarily guarantee that it will\
    \ be evaluated at compile time. It <em>can be used</em> for such, but it can be\
    \ used in other places that are evaluated at run-time, as well.</p></li>\n<li><p>An\
    \ object <em>may</em> be fit for use in constant expressions <em>without</em>\
    \ being declared <code>constexpr</code>. Example:</p>\n<pre><code>int main()\n\
    {\n  const int N = 3;\n  int numbers[N] = {1, 2, 3};  // N is constant expression\n\
    }\n</code></pre></li>\n</ul>\n<p>This is possible because <code>N</code>, being\
    \ constant and initialized at declaration time with a literal, satisfies the criteria\
    \ for a constant expression, even if it isn't declared <code>constexpr</code>.</p></li>\n\
    </ul>\n<p><strong>So when do I actually have to use <code>constexpr</code>?</strong></p>\n\
    <ul>\n<li><p>An <strong>object</strong> like <code>N</code> above can be used\
    \ as constant expression <em>without</em> being declared <code>constexpr</code>.\
    \ This is true for all objects that are:</p>\n<ul>\n<li><code>const</code></li>\n\
    <li>of integral or enumeration type <em>and</em></li>\n<li>initialized at declaration\
    \ time with an expression that is itself a constant expression\n<br/><br/></li>\n\
    </ul>\n<p><sub>[This is due to Â§5.19/2: A constant expression must not include\
    \ a subexpressions that involves \"an lvalue-to-rvalue modification unless [â¦]\
    \ a glvalue of integral or enumeration type [â¦]\" Thanks to Richard Smith for\
    \ correcting my earlier claim that this was true for all literal types.]</sub></p></li>\n\
    <li><p>For a <strong>function</strong> to be fit for use in constant expressions,\
    \ it <strong>must</strong> be explicitly declared <code>constexpr</code>; it is\
    \ not sufficient for it merely to satisfy the criteria for constant-expression\
    \ functions. Example:</p>\n<pre><code>template&lt;int N&gt;\nclass list\n{ };\n\
    \nconstexpr int sqr1(int arg)\n{ return arg * arg; }\n\nint sqr2(int arg)\n{ return\
    \ arg * arg; }\n\nint main()\n{\n  const int X = 2;\n  list&lt;sqr1(X)&gt; mylist1;\
    \  // OK: sqr1 is constexpr\n  list&lt;sqr2(X)&gt; mylist2;  // wrong: sqr2 is\
    \ not constexpr\n}\n</code></pre></li>\n</ul>\n<p><strong>When can I / should\
    \ I use both, <code>const</code> and <code>constexpr</code> <em>together?</em></strong></p>\n\
    <p><strong>A. In object declarations.</strong> This is never necessary when both\
    \ keywords refer to the same object to be declared. <code>constexpr</code> implies\
    \ <code>const</code>.</p>\n<pre><code>constexpr const int N = 5;\n</code></pre>\n\
    <p>is the same as</p>\n<pre><code>constexpr int N = 5;\n</code></pre>\n<p>However,\
    \ note that there may be situations when the keywords each refer to different\
    \ parts of the declaration:</p>\n<pre><code>static constexpr int N = 3;\n\nint\
    \ main()\n{\n  constexpr const int *NP = &amp;N;\n}\n</code></pre>\n<p>Here, <code>NP</code>\
    \ is declared as an address constant-expression, i.e. an pointer that is itself\
    \ a constant expression. (This is possible when the address is generated by applying\
    \ the address operator to a static/global constant expression.) Here, both <code>constexpr</code>\
    \ and <code>const</code> are required: <code>constexpr</code> always refers to\
    \ the expression being declared (here <code>NP</code>), while <code>const</code>\
    \ refers to <code>int</code> (it declares a pointer-to-const). Removing the <code>const</code>\
    \ would render the expression illegal (because (a) a pointer to a non-const object\
    \ cannot be a constant expression, and (b) <code>&amp;N</code> is in-fact a pointer-to-constant).</p>\n\
    <p><strong>B. In member function declarations.</strong> In C++11, <code>constexpr</code>\
    \ implies <code>const</code>, while in C++14 and C++17 that is not the case. A\
    \ member function declared under C++11 as</p>\n<pre><code>constexpr void f();\n\
    </code></pre>\n<p>needs to be declared as</p>\n<pre><code>constexpr void f() const;\n\
    </code></pre>\n<p>under C++14 in order to still be usable as a <code>const</code>\
    \ function.</p>\n</div>"
- - Difference between `constexpr` and `const`
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><code>const</code> applies for\
    \ <strong>variables</strong>, and <strong>prevents them from being modified</strong>\
    \ in your code. </p>\n<p><code>constexpr</code> tells the compiler that this <strong>expression</strong>\
    \ results in a <strong>compile time constant value</strong>, so it can be used\
    \ in places like array lengths, assigning to <code>const</code> variables, etc.\
    \ The <a href=\"https://stackoverflow.com/questions/4748083/when-should-you-use-constexpr-capability-in-c11\"\
    >link</a> given by Oli has a lot of excellent examples. </p>\n<p>Basically they\
    \ are 2 different concepts altogether, and can (and should) be used together.</p>\n\
    </div>"
- - Difference between `constexpr` and `const`
  - "<div class=\"post-text\" itemprop=\"text\">\n<h2>Overview</h2>\n<ul>\n<li><p><code>const</code>\
    \ guarantees that a program <strong>does not change an objectâs value</strong>.\
    \ However, <code>const</code> does not guarantee which type of initialization\
    \ the object undergoes. </p>\n<p>Consider:</p>\n<pre><code>const int mx = numeric_limits&lt;int&gt;::max();\
    \  // OK: runtime initialization\n</code></pre>\n<p>The function <code>max()</code>\
    \ merely returns a literal value. However, because the initializer is a function\
    \ call, <code>mx</code> undergoes runtime initialization. Therefore, you cannot\
    \ use it as a <em>constant expression</em>:</p>\n<pre><code>int arr[mx];  // error:\
    \ âconstant expression requiredâ\n</code></pre></li>\n<li><p><code>constexpr</code>\
    \ is a new C++11 keyword that rids you of the need to create macros and hardcoded\
    \ literals. It also guarantees, under certain conditions, that objects undergo\
    \ <em>static initialization</em>. It controls the evaluation time of an expression.\
    \ By enforcing <strong>compile-time evaluation of its expression</strong>, <code>constexpr</code>\
    \ lets you define true <em>constant expressions</em> that are crucial for time-critical\
    \ applications, system programming, templates, and generally speaking, in any\
    \ code that relies on compile-time constants.</p></li>\n</ul>\n<h2>Constant-expression\
    \ functions</h2>\n<p>A <em>constant-expression function</em> is a function declared\
    \ <code>constexpr</code>. Its body must be non-virtual and consist of a single\
    \ return statement only, apart from typedefs and static asserts. Its arguments\
    \ and return value must have literal types. It can be used with non-constant-expression\
    \ arguments, but when that is done the result is not a constant expression.</p>\n\
    <p>A constant-expression function is meant to replace <em>macros</em> and <em>hardcoded\
    \ literals</em> without sacrificing performance or type safety.</p>\n<pre><code>constexpr\
    \ int max() { return INT_MAX; }           // OK\nconstexpr long long_max() { return\
    \ 2147483647; }  // OK\nconstexpr bool get_val()\n{\n    bool res = false;\n \
    \   return res;\n}  // error: body is not just a return statement\n\nconstexpr\
    \ int square(int x)\n{ return x * x; }  // OK: compile-time evaluation only if\
    \ x is a constant expression\nconst int res = square(5);  // OK: compile-time\
    \ evaluation of square(5)\nint y = getval();\nint n = square(y);          // OK:\
    \ runtime evaluation of square(y)\n</code></pre>\n<h2>Constant-expression objects</h2>\n\
    <p>A <em>constant-expression object</em> is an object declared <code>constexpr</code>.\
    \ It must be initialized with a constant expression or an rvalue constructed by\
    \ a constant-expression constructor with constant-expression arguments.</p>\n\
    <p>A constant-expression object behaves as if it was declared <code>const</code>,\
    \ except that it requires initialization before use and its initializer must be\
    \ a constant expression. Consequently, a constant-expression object can always\
    \ be used as part of another constant expression.</p>\n<pre><code>struct S\n{\n\
    \    constexpr int two();      // constant-expression function\nprivate:\n   \
    \ static constexpr int sz;  // constant-expression object\n};\nconstexpr int S::sz\
    \ = 256;\nenum DataPacket\n{\n    Small = S::two(),  // error: S::two() called\
    \ before it was defined\n    Big = 1024\n};\nconstexpr int S::two() { return sz*2;\
    \ }\nconstexpr S s;\nint arr[s.two()];  // OK: s.two() called after its definition\n\
    </code></pre>\n<h2>Constant-expression constructors</h2>\n<p>A <em>constant-expression\
    \ constructor</em> is a constructor declared <code>constexpr</code>. It can have\
    \ a member initialization list but its body must be empty, apart from typedefs\
    \ and static asserts. Its arguments must have literal types.</p>\n<p>A constant-expression\
    \ constructor allows the compiler to initialize the object at compile-time, provided\
    \ that the constructorâs arguments are all constant expressions.</p>\n<pre><code>struct\
    \ complex\n{\n    // constant-expression constructor\n    constexpr complex(double\
    \ r, double i) : re(r), im(i) { }  // OK: empty body\n    // constant-expression\
    \ functions\n    constexpr double real() { return re; }\n    constexpr double\
    \ imag() { return im; }\nprivate:\n    double re;\n    double im;\n};\nconstexpr\
    \ complex COMP(0.0, 1.0);         // creates a literal complex\ndouble x = 1.0;\n\
    constexpr complex cx1(x, 0);              // error: x is not a constant expression\n\
    const complex cx2(x, 1);                  // OK: runtime initialization\nconstexpr\
    \ double xx = COMP.real();        // OK: compile-time initialization\nconstexpr\
    \ double imaglval = COMP.imag();  // OK: compile-time initialization\ncomplex\
    \ cx3(2, 4.6);                      // OK: runtime initialization\n</code></pre>\n\
    <p>Tips from the book <em>Effective Modern C++</em> by Scott Meyers about <code>constexpr</code>:</p>\n\
    <ul>\n<li><code>constexpr</code> objects are const and are initialized with values\
    \ known during compilation;</li>\n<li><code>constexpr</code> functions produce\
    \ compile-time results when called with arguments whose values are known during\
    \ compilation;</li>\n<li><code>constexpr</code> objects and functions may be used\
    \ in a wider range of contexts than non-<code>constexpr</code> objects and functions;</li>\n\
    <li><code>constexpr</code> is part of an objectâs or functionâs interface.</li>\n\
    </ul>\n<p>Source:\n<a href=\"http://blog.smartbear.com/c-plus-plus/using-constexpr-to-improve-security-performance-and-encapsulation-in-c/\"\
    >Using constexpr to Improve Security, Performance and Encapsulation in C++</a>.</p>\n\
    </div>"
- - How do I use arrays in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h1>Arrays on the type level</h1>\n\
    <p>An array type is denoted as <code>T[n]</code> where <code>T</code> is the <em>element\
    \ type</em> and <code>n</code> is a positive <em>size</em>, the number of elements\
    \ in the array. The array type is a product type of the element type and the size.\
    \ If one or both of those ingredients differ, you get a distinct type:</p>\n<pre><code>#include\
    \ &lt;type_traits&gt;\n\nstatic_assert(!std::is_same&lt;int[8], float[8]&gt;::value,\
    \ \"distinct element type\");\nstatic_assert(!std::is_same&lt;int[8],   int[9]&gt;::value,\
    \ \"distinct size\");\n</code></pre>\n<p>Note that the size is part of the type,\
    \ that is, array types of different size are incompatible types that have absolutely\
    \ nothing to do with each other. <code>sizeof(T[n])</code> is equivalent to <code>n\
    \ * sizeof(T)</code>.</p>\n<h2>Array-to-pointer decay</h2>\n<p>The only \"connection\"\
    \ between <code>T[n]</code> and <code>T[m]</code> is that both types can implicitly\
    \ be <em>converted</em> to <code>T*</code>, and the result of this conversion\
    \ is a pointer to the first element of the array. That is, anywhere a <code>T*</code>\
    \ is required, you can provide a <code>T[n]</code>, and the compiler will silently\
    \ provide that pointer:</p>\n<pre><code>                  +---+---+---+---+---+---+---+---+\n\
    the_actual_array: |   |   |   |   |   |   |   |   |   int[8]\n               \
    \   +---+---+---+---+---+---+---+---+\n                    ^\n               \
    \     |\n                    |\n                    |\n                    | \
    \ pointer_to_the_first_element   int*\n</code></pre>\n<p>This conversion is known\
    \ as \"array-to-pointer decay\", and it is a major source of confusion. The size\
    \ of the array is lost in this process, since it is no longer part of the type\
    \ (<code>T*</code>). Pro: Forgetting the size of an array on the type level allows\
    \ a pointer to point to the first element of an array of <em>any</em> size. Con:\
    \ Given a pointer to the first (or any other) element of an array, there is no\
    \ way to detect how large that array is or where exactly the pointer points to\
    \ relative to the bounds of the array. <a href=\"https://stackoverflow.com/questions/4261074/\"\
    >Pointers are extremely stupid</a>.</p>\n<h2>Arrays are not pointers</h2>\n<p>The\
    \ compiler will silently generate a pointer to the first element of an array whenever\
    \ it is deemed useful, that is, whenever an operation would fail on an array but\
    \ succeed on a pointer. This conversion from array to pointer is trivial, since\
    \ the resulting pointer <em>value</em> is simply the address of the array. Note\
    \ that the pointer is <em>not</em> stored as part of the array itself (or anywhere\
    \ else in memory). <strong>An array is not a pointer.</strong></p>\n<pre><code>static_assert(!std::is_same&lt;int[8],\
    \ int*&gt;::value, \"an array is not a pointer\");\n</code></pre>\n<p>One important\
    \ context in which an array does <em>not</em> decay into a pointer to its first\
    \ element is when the <code>&amp;</code> operator is applied to it. In that case,\
    \ the <code>&amp;</code> operator yields a pointer to the <em>entire</em> array,\
    \ not just a pointer to its first element. Although in that case the <em>values</em>\
    \ (the addresses) are the same, a pointer to the first element of an array and\
    \ a pointer to the entire array are completely distinct types:</p>\n<pre><code>static_assert(!std::is_same&lt;int*,\
    \ int(*)[8]&gt;::value, \"distinct element type\");\n</code></pre>\n<p>The following\
    \ ASCII art explains this distinction:</p>\n<pre><code>      +-----------------------------------+\n\
    \      | +---+---+---+---+---+---+---+---+ |\n+---&gt; | |   |   |   |   |   |\
    \   |   |   | | int[8]\n|     | +---+---+---+---+---+---+---+---+ |\n|     +---^-------------------------------+\n\
    |         |\n|         |\n|         |\n|         |  pointer_to_the_first_element\
    \   int*\n|\n|  pointer_to_the_entire_array              int(*)[8]\n</code></pre>\n\
    <p>Note how the pointer to the first element only points to a single integer (depicted\
    \ as a small box), whereas the pointer to the entire array points to an array\
    \ of 8 integers (depicted as a large box).</p>\n<p>The same situation arises in\
    \ classes and is maybe more obvious. A pointer to an object and a pointer to its\
    \ first data member have the same <em>value</em> (the same address), yet they\
    \ are completely distinct types.</p>\n<p>If you are unfamiliar with the C declarator\
    \ syntax, the parenthesis in the type <code>int(*)[8]</code> are essential:</p>\n\
    <ul>\n<li><code>int(*)[8]</code> is a pointer to an array of 8 integers.</li>\n\
    <li><code>int*[8]</code> is an array of 8 pointers, each element of type <code>int*</code>.</li>\n\
    </ul>\n<h1>Accessing elements</h1>\n<p>C++ provides two syntactic variations to\
    \ access individual elements of an array.\nNeither of them is superior to the\
    \ other, and you should familiarize yourself with both.</p>\n<h2>Pointer arithmetic</h2>\n\
    <p>Given a pointer <code>p</code> to the first element of an array, the expression\
    \ <code>p+i</code> yields a pointer to the i-th element of the array. By dereferencing\
    \ that pointer afterwards, one can access individual elements:</p>\n<pre><code>std::cout\
    \ &lt;&lt; *(x+3) &lt;&lt; \", \" &lt;&lt; *(x+7) &lt;&lt; std::endl;\n</code></pre>\n\
    <p>If <code>x</code> denotes an <em>array</em>, then array-to-pointer decay will\
    \ kick in, because adding an array and an integer is meaningless (there is no\
    \ plus operation on arrays), but adding a pointer and an integer makes sense:</p>\n\
    <pre><code>   +---+---+---+---+---+---+---+---+\nx: |   |   |   |   |   |   |\
    \   |   |   int[8]\n   +---+---+---+---+---+---+---+---+\n     ^           ^ \
    \              ^\n     |           |               |\n     |           |     \
    \          |\n     |           |               |\nx+0  |      x+3  |         \
    \ x+7  |     int*\n</code></pre>\n<p>(Note that the implicitly generated pointer\
    \ has no name, so I wrote <code>x+0</code> in order to identify it.)</p>\n<p>If,\
    \ on the other hand, <code>x</code> denotes a <em>pointer</em> to the first (or\
    \ any other) element of an array, then array-to-pointer decay is not necessary,\
    \ because the pointer on which <code>i</code> is going to be added already exists:</p>\n\
    <pre><code>   +---+---+---+---+---+---+---+---+\n   |   |   |   |   |   |   |\
    \   |   |   int[8]\n   +---+---+---+---+---+---+---+---+\n     ^           ^ \
    \              ^\n     |           |               |\n     |           |     \
    \          |\n   +-|-+         |               |\nx: | | |    x+3  |         \
    \ x+7  |     int*\n   +---+\n</code></pre>\n<p>Note that in the depicted case,\
    \ <code>x</code> is a pointer <em>variable</em> (discernible by the small box\
    \ next to <code>x</code>), but it could just as well be the result of a function\
    \ returning a pointer (or any other expression of type <code>T*</code>).</p>\n\
    <h2>Indexing operator</h2>\n<p>Since the syntax <code>*(x+i)</code> is a bit clumsy,\
    \ C++ provides the alternative syntax <code>x[i]</code>:</p>\n<pre><code>std::cout\
    \ &lt;&lt; x[3] &lt;&lt; \", \" &lt;&lt; x[7] &lt;&lt; std::endl;\n</code></pre>\n\
    <p>Due to the fact that addition is commutative, the following code does exactly\
    \ the same:</p>\n<pre><code>std::cout &lt;&lt; 3[x] &lt;&lt; \", \" &lt;&lt; 7[x]\
    \ &lt;&lt; std::endl;\n</code></pre>\n<p>The definition of the indexing operator\
    \ leads to the following interesting equivalence:</p>\n<pre><code>&amp;x[i]  ==\
    \  &amp;*(x+i)  ==  x+i\n</code></pre>\n<p>However, <code>&amp;x[0]</code> is\
    \ generally <em>not</em> equivalent to <code>x</code>. The former is a pointer,\
    \ the latter an array. Only when the context triggers array-to-pointer decay can\
    \ <code>x</code> and <code>&amp;x[0]</code> be used interchangeably. For example:</p>\n\
    <pre><code>T* p = &amp;array[0];  // rewritten as &amp;*(array+0), decay happens\
    \ due to the addition\nT* q = array;      // decay happens due to the assignment\n\
    </code></pre>\n<p>On the first line, the compiler detects an assignment from a\
    \ pointer to a pointer, which trivially succeeds. On the second line, it detects\
    \ an assignment from an <em>array</em> to a pointer. Since this is meaningless\
    \ (but <em>pointer</em> to pointer assignment makes sense), array-to-pointer decay\
    \ kicks in as usual.</p>\n<h2>Ranges</h2>\n<p>An array of type <code>T[n]</code>\
    \ has <code>n</code> elements, indexed from <code>0</code> to <code>n-1</code>;\
    \ there is no element <code>n</code>. And yet, to support half-open ranges (where\
    \ the beginning is <em>inclusive</em> and the end is <em>exclusive</em>), C++\
    \ allows the computation of a pointer to the (non-existent) n-th element, but\
    \ it is illegal to dereference that pointer:</p>\n<pre><code>   +---+---+---+---+---+---+---+---+....\n\
    x: |   |   |   |   |   |   |   |   |   .   int[8]\n   +---+---+---+---+---+---+---+---+....\n\
    \     ^                               ^\n     |                              \
    \ |\n     |                               |\n     |                          \
    \     |\nx+0  |                          x+8  |     int*\n</code></pre>\n<p>For\
    \ example, if you want to sort an array, both of the following would work equally\
    \ well:</p>\n<pre><code>std::sort(x + 0, x + n);\nstd::sort(&amp;x[0], &amp;x[0]\
    \ + n);\n</code></pre>\n<p>Note that it is illegal to provide <code>&amp;x[n]</code>\
    \ as the second argument since this is equivalent to <code>&amp;*(x+n)</code>,\
    \ and the sub-expression <code>*(x+n)</code> technically invokes <a href=\"https://stackoverflow.com/questions/3144904/\"\
    >undefined behavior</a> in C++ (but not in C99).</p>\n<p>Also note that you could\
    \ simply provide <code>x</code> as the first argument. That is a little too terse\
    \ for my taste, and it also makes template argument deduction a bit harder for\
    \ the compiler, because in that case the first argument is an array but the second\
    \ argument is a pointer. (Again, array-to-pointer decay kicks in.)</p>\n</div>"
- - How do I use arrays in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Programmers often confuse multidimensional\
    \ arrays with arrays of pointers.</p>\n<h1>Multidimensional arrays</h1>\n<p>Most\
    \ programmers are familiar with named multidimensional arrays, but many are unaware\
    \ of the fact that multidimensional array can also be created anonymously. Multidimensional\
    \ arrays are often referred to as \"arrays of arrays\" or \"<em>true</em> multidimensional\
    \ arrays\".</p>\n<h2>Named multidimensional arrays</h2>\n<p>When using named multidimensional\
    \ arrays, <em>all</em> dimensions must be known at compile time:</p>\n<pre><code>int\
    \ H = read_int();\nint W = read_int();\n\nint connect_four[6][7];   // okay\n\n\
    int connect_four[H][7];   // ISO C++ forbids variable length array\nint connect_four[6][W];\
    \   // ISO C++ forbids variable length array\nint connect_four[H][W];   // ISO\
    \ C++ forbids variable length array\n</code></pre>\n<p>This is how a named multidimensional\
    \ array looks like in memory:</p>\n<pre><code>              +---+---+---+---+---+---+---+\n\
    connect_four: |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n\
    \              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n\
    \              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n\
    \              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n\
    \              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n\
    \              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n\
    </code></pre>\n<p>Note that 2D grids such as the above are merely helpful visualizations.\
    \ From the point of view of C++, memory is a \"flat\" sequence of bytes. The elements\
    \ of a multidimensional array are stored in row-major order. That is, <code>connect_four[0][6]</code>\
    \ and <code>connect_four[1][0]</code> are neighbors in memory. In fact, <code>connect_four[0][7]</code>\
    \ and <code>connect_four[1][0]</code> denote the same element! This means that\
    \ you can take multi-dimensional arrays and treat them as large, one-dimensional\
    \ arrays:</p>\n<pre><code>int* p = &amp;connect_four[0][0];\nint* q = p + 42;\n\
    some_int_sequence_algorithm(p, q);\n</code></pre>\n<h2>Anonymous multidimensional\
    \ arrays</h2>\n<p>With anonymous multidimensional arrays, all dimensions <em>except\
    \ the first</em> must be known at compile time:</p>\n<pre><code>int (*p)[7] =\
    \ new int[6][7];   // okay\nint (*p)[7] = new int[H][7];   // okay\n\nint (*p)[W]\
    \ = new int[6][W];   // ISO C++ forbids variable length array\nint (*p)[W] = new\
    \ int[H][W];   // ISO C++ forbids variable length array\n</code></pre>\n<p>This\
    \ is how an anonymous multidimensional array looks like in memory:</p>\n<pre><code>\
    \              +---+---+---+---+---+---+---+\n        +---&gt; |   |   |   | \
    \  |   |   |   |\n        |     +---+---+---+---+---+---+---+\n        |     |\
    \   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n \
    \       |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n\
    \        |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n\
    \        |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n\
    \        |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n\
    \        |\n      +-|-+\n   p: | | |\n      +---+\n</code></pre>\n<p>Note that\
    \ the array itself is still allocated as a single block in memory.</p>\n<h1>Arrays\
    \ of pointers</h1>\n<p>You can overcome the restriction of fixed width by introducing\
    \ another level of indirection.</p>\n<h2>Named arrays of pointers</h2>\n<p>Here\
    \ is a named array of five pointers which are initialized with anonymous arrays\
    \ of different lengths:</p>\n<pre><code>int* triangle[5];\nfor (int i = 0; i &lt;\
    \ 5; ++i)\n{\n    triangle[i] = new int[5 - i];\n}\n\n// ...\n\nfor (int i = 0;\
    \ i &lt; 5; ++i)\n{\n    delete[] triangle[i];\n}\n</code></pre>\n<p>And here\
    \ is how it looks like in memory:</p>\n<pre><code>          +---+---+---+---+---+\n\
    \          |   |   |   |   |   |\n          +---+---+---+---+---+\n          \
    \  ^\n            | +---+---+---+---+\n            | |   |   |   |   |\n     \
    \       | +---+---+---+---+\n            |   ^\n            |   | +---+---+---+\n\
    \            |   | |   |   |   |\n            |   | +---+---+---+\n          \
    \  |   |   ^\n            |   |   | +---+---+\n            |   |   | |   |   |\n\
    \            |   |   | +---+---+\n            |   |   |   ^\n            |   |\
    \   |   | +---+\n            |   |   |   | |   |\n            |   |   |   | +---+\n\
    \            |   |   |   |   ^\n            |   |   |   |   |\n            | \
    \  |   |   |   |\n          +-|-+-|-+-|-+-|-+-|-+\ntriangle: | | | | | | | | |\
    \ | |\n          +---+---+---+---+---+\n</code></pre>\n<p>Since each line is allocated\
    \ individually now, viewing 2D arrays as 1D arrays does not work anymore.</p>\n\
    <h2>Anonymous arrays of pointers</h2>\n<p>Here is an anonymous array of 5 (or\
    \ any other number of) pointers which are initialized with anonymous arrays of\
    \ different lengths:</p>\n<pre><code>int n = calculate_five();   // or any other\
    \ number\nint** p = new int*[n];\nfor (int i = 0; i &lt; n; ++i)\n{\n    p[i]\
    \ = new int[n - i];\n}\n\n// ...\n\nfor (int i = 0; i &lt; n; ++i)\n{\n    delete[]\
    \ p[i];\n}\ndelete[] p;   // note the extra delete[] !\n</code></pre>\n<p>And\
    \ here is how it looks like in memory:</p>\n<pre><code>          +---+---+---+---+---+\n\
    \          |   |   |   |   |   |\n          +---+---+---+---+---+\n          \
    \  ^\n            | +---+---+---+---+\n            | |   |   |   |   |\n     \
    \       | +---+---+---+---+\n            |   ^\n            |   | +---+---+---+\n\
    \            |   | |   |   |   |\n            |   | +---+---+---+\n          \
    \  |   |   ^\n            |   |   | +---+---+\n            |   |   | |   |   |\n\
    \            |   |   | +---+---+\n            |   |   |   ^\n            |   |\
    \   |   | +---+\n            |   |   |   | |   |\n            |   |   |   | +---+\n\
    \            |   |   |   |   ^\n            |   |   |   |   |\n            | \
    \  |   |   |   |\n          +-|-+-|-+-|-+-|-+-|-+\n          | | | | | | | | |\
    \ | |\n          +---+---+---+---+---+\n            ^\n            |\n       \
    \     |\n          +-|-+\n       p: | | |\n          +---+\n</code></pre>\n<h1>Conversions</h1>\n\
    <p>Array-to-pointer decay naturally extends to arrays of arrays and arrays of\
    \ pointers:</p>\n<pre><code>int array_of_arrays[6][7];\nint (*pointer_to_array)[7]\
    \ = array_of_arrays;\n\nint* array_of_pointers[6];\nint** pointer_to_pointer =\
    \ array_of_pointers;\n</code></pre>\n<p>However, there is no implicit conversion\
    \ from <code>T[h][w]</code> to <code>T**</code>. If such an implicit conversion\
    \ did exist, the result would be a pointer to the first element of an array of\
    \ <code>h</code> pointers to <code>T</code> (each pointing to the first element\
    \ of a line in the original 2D array), but that pointer array does not exist anywhere\
    \ in memory yet. If you want such a conversion, you must create and fill the required\
    \ pointer array manually:</p>\n<pre><code>int connect_four[6][7];\n\nint** p =\
    \ new int*[6];\nfor (int i = 0; i &lt; 6; ++i)\n{\n    p[i] = connect_four[i];\n\
    }\n\n// ...\n\ndelete[] p;\n</code></pre>\n<p>Note that this generates a view\
    \ of the original multidimensional array. If you need a copy instead, you must\
    \ create extra arrays and copy the data yourself:</p>\n<pre><code>int connect_four[6][7];\n\
    \nint** p = new int*[6];\nfor (int i = 0; i &lt; 6; ++i)\n{\n    p[i] = new int[7];\n\
    \    std::copy(connect_four[i], connect_four[i + 1], p[i]);\n}\n\n// ...\n\nfor\
    \ (int i = 0; i &lt; 6; ++i)\n{\n    delete[] p[i];\n}\ndelete[] p;\n</code></pre>\n\
    </div>"
- - How do I use arrays in C++?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h1>Assignment</h1>\n<p>For no particular\
    \ reason, arrays cannot be assigned to one another. Use <code>std::copy</code>\
    \ instead:</p>\n<pre><code>#include &lt;algorithm&gt;\n\n// ...\n\nint a[8] =\
    \ {2, 3, 5, 7, 11, 13, 17, 19};\nint b[8];\nstd::copy(a + 0, a + 8, b);\n</code></pre>\n\
    <p>This is more flexible than what true array assignment could provide because\
    \ it is possible to copy slices of larger arrays into smaller arrays.\n<code>std::copy</code>\
    \ is usually specialized for primitive types to give maximum performance. It is\
    \ unlikely that <code>std::memcpy</code> performs better. If in doubt, measure.</p>\n\
    <p>Although you cannot assign arrays directly, you <em>can</em> assign structs\
    \ and classes which <em>contain</em> array members. That is because <a href=\"\
    https://stackoverflow.com/questions/4164279/\">array members are copied memberwise</a>\
    \ by the assignment operator which is provided as a default by the compiler. If\
    \ you define the assignment operator manually for your own struct or class types,\
    \ you must fall back to manual copying for the array members.</p>\n<h1>Parameter\
    \ passing</h1>\n<p>Arrays cannot be passed by value. You can either pass them\
    \ by pointer or by reference.</p>\n<h2>Pass by pointer</h2>\n<p>Since arrays themselves\
    \ cannot be passed by value, usually a pointer to their first element is passed\
    \ by value instead. This is often called \"pass by pointer\". Since the size of\
    \ the array is not retrievable via that pointer, you have to pass a second parameter\
    \ indicating the size of the array (the classic C solution) or a second pointer\
    \ pointing after the last element of the array (the C++ iterator solution):</p>\n\
    <pre><code>#include &lt;numeric&gt;\n#include &lt;cstddef&gt;\n\nint sum(const\
    \ int* p, std::size_t n)\n{\n    return std::accumulate(p, p + n, 0);\n}\n\nint\
    \ sum(const int* p, const int* q)\n{\n    return std::accumulate(p, q, 0);\n}\n\
    </code></pre>\n<p>As a syntactic alternative, you can also declare parameters\
    \ as <code>T p[]</code>, and it means the exact same thing as <code>T* p</code>\
    \ <strong>in the context of parameter lists only</strong>:</p>\n<pre><code>int\
    \ sum(const int p[], std::size_t n)\n{\n    return std::accumulate(p, p + n, 0);\n\
    }\n</code></pre>\n<p>You can think of the compiler as rewriting <code>T p[]</code>\
    \ to <code>T *p</code> <strong>in the context of parameter lists only</strong>.\
    \ This special rule is partly responsible for the whole confusion about arrays\
    \ and pointers. In every other context, declaring something as an array or as\
    \ a pointer makes a <em>huge</em> difference.</p>\n<p>Unfortunately, you can also\
    \ provide a size in an array parameter which is silently ignored by the compiler.\
    \ That is, the following three signatures are exactly equivalent, as indicated\
    \ by the compiler errors:</p>\n<pre><code>int sum(const int* p, std::size_t n)\n\
    \n// error: redefinition of 'int sum(const int*, size_t)'\nint sum(const int p[],\
    \ std::size_t n)\n\n// error: redefinition of 'int sum(const int*, size_t)'\n\
    int sum(const int p[8], std::size_t n)   // the 8 has no meaning here\n</code></pre>\n\
    <h2>Pass by reference</h2>\n<p>Arrays can also be passed by reference:</p>\n<pre><code>int\
    \ sum(const int (&amp;a)[8])\n{\n    return std::accumulate(a + 0, a + 8, 0);\n\
    }\n</code></pre>\n<p>In this case, the array size is significant. Since writing\
    \ a function that only accepts arrays of exactly 8 elements is of little use,\
    \ programmers usually write such functions as templates:</p>\n<pre><code>template\
    \ &lt;std::size_t n&gt;\nint sum(const int (&amp;a)[n])\n{\n    return std::accumulate(a\
    \ + 0, a + n, 0);\n}\n</code></pre>\n<p>Note that you can only call such a function\
    \ template with an actual array of integers, not with a pointer to an integer.\
    \ The size of the array is automatically inferred, and for every size <code>n</code>,\
    \ a different function is instantiated from the template. You can also write <a\
    \ href=\"https://stackoverflow.com/questions/4759078/\">quite useful</a> function\
    \ templates that abstract from both the element type and from the size.</p>\n\
    </div>"
- - Calling C/C++ from Python?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You should have a look at <a\
    \ href=\"http://www.boost.org/doc/libs/1_49_0/libs/python/doc/\" rel=\"noreferrer\"\
    >Boost.Python</a>. Here is the short introduction taken from their website:</p>\n\
    <blockquote>\n<p>The Boost Python Library is a framework for interfacing Python\
    \ and\n  C++. It allows you to quickly and seamlessly expose C++ classes\n  functions\
    \ and objects to Python, and vice-versa, using no special\n  tools -- just your\
    \ C++ compiler. It is designed to wrap C++ interfaces\n  non-intrusively, so that\
    \ you should not have to change the C++ code at\n  all in order to wrap it, making\
    \ Boost.Python ideal for exposing\n  3rd-party libraries to Python. The library's\
    \ use of advanced\n  metaprogramming techniques simplifies its syntax for users,\
    \ so that\n  wrapping code takes on the look of a kind of declarative interface\n\
    \  definition language (IDL).</p>\n</blockquote>\n</div>"
- - Calling C/C++ from Python?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"http://docs.python.org/2/library/ctypes.html\"\
    \ rel=\"noreferrer\">ctypes</a> is part of the standard library, and therefore\
    \ is more stable and widely available than <a href=\"http://www.swig.org/\" rel=\"\
    noreferrer\">swig</a>, which always tended to give me <a href=\"http://groups.google.com/group/comp.lang.python/browse_thread/thread/d94badd9847fe43a?pli=1\"\
    \ rel=\"noreferrer\">problems</a>.</p>\n<p>With ctypes, you need to satisfy any\
    \ compile time dependency on python, and your binding will work on any python\
    \ that has ctypes, not just the one it was compiled against.</p>\n<p>Suppose you\
    \ have a simple C++ example class you want to talk to in a file called foo.cpp:</p>\n\
    <pre><code>#include &lt;iostream&gt;\n\nclass Foo{\n    public:\n        void\
    \ bar(){\n            std::cout &lt;&lt; \"Hello\" &lt;&lt; std::endl;\n     \
    \   }\n};\n</code></pre>\n<p>Since ctypes can only talk to C functions, you need\
    \ to provide those declaring them as extern \"C\"</p>\n<pre><code>extern \"C\"\
    \ {\n    Foo* Foo_new(){ return new Foo(); }\n    void Foo_bar(Foo* foo){ foo-&gt;bar();\
    \ }\n}\n</code></pre>\n<p>Next you have to compile this to a shared library</p>\n\
    <pre><code>g++ -c -fPIC foo.cpp -o foo.o\ng++ -shared -Wl,-soname,libfoo.so -o\
    \ libfoo.so  foo.o\n</code></pre>\n<p>And finally you have to write your python\
    \ wrapper (e.g. in fooWrapper.py)</p>\n<pre><code>from ctypes import cdll\nlib\
    \ = cdll.LoadLibrary('./libfoo.so')\n\nclass Foo(object):\n    def __init__(self):\n\
    \        self.obj = lib.Foo_new()\n\n    def bar(self):\n        lib.Foo_bar(self.obj)\n\
    </code></pre>\n<p>Once you have that you can call it like</p>\n<pre><code>f =\
    \ Foo()\nf.bar() #and you will see \"Hello\" on the screen\n</code></pre>\n</div>"
- - Calling C/C++ from Python?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The quickest way to do this is\
    \ using <a href=\"http://www.swig.org/\" rel=\"noreferrer\">SWIG</a>.</p>\n<p>Example\
    \ from SWIG <a href=\"http://www.swig.org/tutorial.html\" rel=\"noreferrer\">tutorial</a>:</p>\n\
    <pre><code>/* File : example.c */\nint fact(int n) {\n    if (n &lt;= 1) return\
    \ 1;\n    else return n*fact(n-1);\n}\n</code></pre>\n<p>Interface file:</p>\n\
    <pre><code>/* example.i */\n%module example\n%{\n/* Put header files here or function\
    \ declarations like below */\nextern int fact(int n);\n%}\n\nextern int fact(int\
    \ n);\n</code></pre>\n<p>Building a Python module on Unix:</p>\n<pre><code>swig\
    \ -python example.i\ngcc -fPIC -c example.c example_wrap.c -I/usr/local/include/python2.7\n\
    gcc -shared example.o example_wrap.o -o _example.so\n</code></pre>\n<p>Usage:</p>\n\
    <pre><code>&gt;&gt;&gt; import example\n&gt;&gt;&gt; example.fact(5)\n120\n</code></pre>\n\
    <p>Note that you have to have python-dev. Also in some systems python header files\
    \ will be in /usr/include/python2.7 based on the way you have installed it.</p>\n\
    <p>From the tutorial:</p>\n<blockquote>\n<p>SWIG is a fairly complete C++ compiler\
    \ with support for nearly every language feature. This includes preprocessing,\
    \ pointers, classes, inheritance, and even C++ templates. SWIG can also be used\
    \ to package structures and classes into proxy classes in the target language\
    \ â exposing the underlying functionality in a very natural manner.</p>\n</blockquote>\n\
    </div>"
- - How do you clear a stringstream variable?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>For all the standard library\
    \ types the member function <code>empty()</code> is a query, not a command, i.e.\
    \ it means \"are you empty?\" not \"please throw away your contents\".</p>\n<p>The\
    \ <code>clear()</code> member function is inherited from <code>ios</code> and\
    \ is used to clear the error state of the stream, e.g. if a file stream has the\
    \ error state set to <code>eofbit</code> (end-of-file), then calling <code>clear()</code>\
    \ will set the error state back to <code>goodbit</code> (no error).</p>\n<p>For\
    \ clearing the contents of a <code>stringstream</code>, using:</p>\n<pre><code>m.str(\"\
    \");\n</code></pre>\n<p>is correct, although using:</p>\n<pre><code>m.str(std::string());\n\
    </code></pre>\n<p>is technically more efficient, because you avoid invoking the\
    \ <code>std::string</code> constructor that takes <code>const char*</code>. But\
    \ any compiler these days should be able to generate the same code in both cases\
    \ - so I would just go with whatever is more readable.</p>\n</div>"
- - How do you clear a stringstream variable?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You can clear the error state\
    \ and empty the strignstream all in one line</p>\n<pre><code>std::stringstream().swap(m);\
    \ // swap m with a default constructed stringstream\n</code></pre>\n<p>This effectively\
    \ resets m to a default constructed state</p>\n</div>"
- - How do you clear a stringstream variable?
  - "<div class=\"post-text\" itemprop=\"text\">\n<pre><code>m.str(\"\");\n</code></pre>\n\
    <p>seems to work.</p>\n</div>"
- - Is it possible to write a template to check for a function's existence?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Yes, with SFINAE you can check\
    \ if a given class does provide a certain method. Here's the working code:</p>\n\
    <pre><code>#include &lt;iostream&gt;\n\nstruct Hello\n{\n    int helloworld()\
    \ { return 0; }\n};\n\nstruct Generic {};    \n\n// SFINAE test\ntemplate &lt;typename\
    \ T&gt;\nclass has_helloworld\n{\n    typedef char one;\n    typedef long two;\n\
    \n    template &lt;typename C&gt; static one test( typeof(&amp;C::helloworld)\
    \ ) ;\n    template &lt;typename C&gt; static two test(...);    \n\npublic:\n\
    \    enum { value = sizeof(test&lt;T&gt;(0)) == sizeof(char) };\n};\n\nint main(int\
    \ argc, char *argv[])\n{\n    std::cout &lt;&lt; has_helloworld&lt;Hello&gt;::value\
    \ &lt;&lt; std::endl;\n    std::cout &lt;&lt; has_helloworld&lt;Generic&gt;::value\
    \ &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>I've just tested it\
    \ with Linux and gcc 4.1/4.3. I don't know if it's portable to other platforms\
    \ running different compilers. </p>\n</div>"
- - Is it possible to write a template to check for a function's existence?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This question is old, but with\
    \ C++11 we got a new way to check for a functions existence (or existence of any\
    \ non-type member, really), relying on SFINAE again:</p>\n<pre><code>template&lt;class\
    \ T&gt;\nauto serialize_imp(std::ostream&amp; os, T const&amp; obj, int)\n   \
    \ -&gt; decltype(os &lt;&lt; obj, void())\n{\n  os &lt;&lt; obj;\n}\n\ntemplate&lt;class\
    \ T&gt;\nauto serialize_imp(std::ostream&amp; os, T const&amp; obj, long)\n  \
    \  -&gt; decltype(obj.stream(os), void())\n{\n  obj.stream(os);\n}\n\ntemplate&lt;class\
    \ T&gt;\nauto serialize(std::ostream&amp; os, T const&amp; obj)\n    -&gt; decltype(serialize_imp(os,\
    \ obj, 0), void())\n{\n  serialize_imp(os, obj, 0);\n}\n</code></pre>\n<p>Now\
    \ onto some explanations. First thing, I use <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2634.html\"\
    \ rel=\"noreferrer\">expression SFINAE</a> to exclude the <code>serialize(_imp)</code>\
    \ functions from overload resolution, if the first expression inside <code>decltype</code>\
    \ isn't valid (aka, the function doesn't exist).</p>\n<p>The <code>void()</code>\
    \ is used to make the return type of all those functions <code>void</code>.</p>\n\
    <p>The <code>0</code> argument is used to prefer the <code>os &lt;&lt; obj</code>\
    \ overload if both are available (literal <code>0</code> is of type <code>int</code>\
    \ and as such the first overload is a better match).</p>\n<hr/>\n<p>Now, you probably\
    \ want a trait to check if a function exists. Luckily, it's easy to write that.\
    \ Note, though, that you need to write a trait <em>yourself</em> for every different\
    \ function name you might want.</p>\n<pre><code>#include &lt;type_traits&gt;\n\
    \ntemplate&lt;class&gt;\nstruct sfinae_true : std::true_type{};\n\nnamespace detail{\n\
    \  template&lt;class T, class A0&gt;\n  static auto test_stream(int)\n      -&gt;\
    \ sfinae_true&lt;decltype(std::declval&lt;T&gt;().stream(std::declval&lt;A0&gt;()))&gt;;\n\
    \  template&lt;class, class A0&gt;\n  static auto test_stream(long) -&gt; std::false_type;\n\
    } // detail::\n\ntemplate&lt;class T, class Arg&gt;\nstruct has_stream : decltype(detail::test_stream&lt;T,\
    \ Arg&gt;(0)){};\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/cd139d95d214c5c3\"\
    \ rel=\"noreferrer\">Live example.</a></p>\n<p>And on to explanations. First,\
    \ <code>sfinae_true</code> is a helper type, and it basically amounts to the same\
    \ as writing <code>decltype(void(std::declval&lt;T&gt;().stream(a0)), std::true_type{})</code>.\
    \ The advantage is simply that it's shorter.<br/>\nNext, the <code>struct has_stream\
    \ : decltype(...)</code> inherits from either <code>std::true_type</code> or <code>std::false_type</code>\
    \ in the end, depending on whether the <code>decltype</code> check in <code>test_stream</code>\
    \ fails or not.<br/>\nLast, <code>std::declval</code> gives you a \"value\" of\
    \ whatever type you pass, without you needing to know how you can construct it.\
    \ Note that this is only possible inside an unevaluated context, such as <code>decltype</code>,\
    \ <code>sizeof</code> and others.</p>\n<hr/>\n<p>Note that <code>decltype</code>\
    \ is not necessarily needed, as <code>sizeof</code> (and all unevaluated contexts)\
    \ got that enhancement. It's just that <code>decltype</code> already delivers\
    \ a type and as such is just cleaner. Here's a <code>sizeof</code> version of\
    \ one of the overloads:</p>\n<pre><code>template&lt;class T&gt;\nvoid serialize_imp(std::ostream&amp;\
    \ os, T const&amp; obj, int,\n    int(*)[sizeof((os &lt;&lt; obj),0)] = 0)\n{\n\
    \  os &lt;&lt; obj;\n}\n</code></pre>\n<p>The <code>int</code> and <code>long</code>\
    \ parameters are still there for the same reason. The array pointer is used to\
    \ provide a context where <code>sizeof</code> can be used.</p>\n</div>"
- - Is it possible to write a template to check for a function's existence?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>C++ allows <a href=\"http://en.wikipedia.org/wiki/SFINAE\"\
    \ rel=\"noreferrer\">SFINAE</a> to be used for this (notice that with C++11 features\
    \ this is simplier because it supports extended SFINAE on nearly arbitrary expressions\
    \ - the below was crafted to work with common C++03 compilers):</p>\n<pre><code>#define\
    \ HAS_MEM_FUNC(func, name)                                        \\\n    template&lt;typename\
    \ T, typename Sign&gt;                                 \\\n    struct name { \
    \                                                      \\\n        typedef char\
    \ yes[1];                                            \\\n        typedef char\
    \ no [2];                                            \\\n        template &lt;typename\
    \ U, U&gt; struct type_check;                     \\\n        template &lt;typename\
    \ _1&gt; static yes &amp;chk(type_check&lt;Sign, &amp;_1::func &gt; *); \\\n \
    \       template &lt;typename   &gt; static no  &amp;chk(...);               \
    \     \\\n        static bool const value = sizeof(chk&lt;T&gt;(0)) == sizeof(yes);\
    \     \\\n    }\n</code></pre>\n<p>the above template and macro tries to instantiate\
    \ a template, giving it a member function pointer type, and the actual member\
    \ function pointer. If the types to not fit, SFINAE causes the template to be\
    \ ignored. Usage like this:</p>\n<pre><code>HAS_MEM_FUNC(toString, has_to_string);\n\
    \ntemplate&lt;typename T&gt; void\ndoSomething() {\n   if(has_to_string&lt;T,\
    \ std::string(T::*)()&gt;::value) {\n      ...\n   } else {\n      ...\n   }\n\
    }\n</code></pre>\n<p>But note that you cannot just call that <code>toString</code>\
    \ function in that if branch. since the compiler will check for validity in both\
    \ branches, that would fail for cases the function doesnt exist. One way is to\
    \ use SFINAE once again (enable_if can be gotten from boost too):</p>\n<pre><code>template&lt;bool\
    \ C, typename T = void&gt;\nstruct enable_if {\n  typedef T type;\n};\n\ntemplate&lt;typename\
    \ T&gt;\nstruct enable_if&lt;false, T&gt; { };\n\nHAS_MEM_FUNC(toString, has_to_string);\n\
    \ntemplate&lt;typename T&gt; \ntypename enable_if&lt;has_to_string&lt;T, \n  \
    \                 std::string(T::*)()&gt;::value, std::string&gt;::type\ndoSomething(T\
    \ * t) {\n   /* something when T has toString ... */\n   return t-&gt;toString();\n\
    }\n\ntemplate&lt;typename T&gt; \ntypename enable_if&lt;!has_to_string&lt;T, \n\
    \                   std::string(T::*)()&gt;::value, std::string&gt;::type\ndoSomething(T\
    \ * t) {\n   /* something when T doesnt have toString ... */\n   return \"T::toString()\
    \ does not exist.\";\n}\n</code></pre>\n<p>Have fun using it. The advantage of\
    \ it is that it also works for overloaded member functions, and also for const\
    \ member functions (remember using  <code>std::string(T::*)() const</code> as\
    \ the member function pointer type then!). </p>\n</div>"
- - How many levels of pointers can we have?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The <code>C</code> standard specifies\
    \ the lower limit:</p>\n<blockquote>\n<h3><a href=\"http://c0x.coding-guidelines.com/5.2.4.1.html\"\
    \ rel=\"noreferrer\">5.2.4.1 Translation limits</a></h3>\n<p>276 The implementation\
    \ shall be able to translate and execute at least one program that contains at\
    \ least one instance of every one of the following limits: [...]</p>\n<p>279 â\
    \ 12 pointer, array, and function declarators (in any combinations) modifying\
    \ an\n      arithmetic, structure, union, or void type in a declaration</p>\n\
    </blockquote>\n<p>The upper limit is implementation specific.</p>\n</div>"
- - How many levels of pointers can we have?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Actually, C programs commonly\
    \ make use of infinite pointer indirection. One or two static levels are common.\
    \ Triple indirection is rare. But infinite is very common.</p>\n<p>Infinite pointer\
    \ indirection is achieved with the help of a struct, of course, not with a direct\
    \ declarator, which would be impossible. And a struct is needed so that you can\
    \ include other data in this structure at the different levels where this can\
    \ terminate.</p>\n<pre><code>struct list { struct list *next; ... };\n</code></pre>\n\
    <p>now you can have <code>list-&gt;next-&gt;next-&gt;next-&gt;...-&gt;next</code>.\
    \ This is really just multiple pointer indirections: <code>*(*(..(*(*(*list).next).next).next...).next).next</code>.\
    \  And the <code>.next</code> is basically a noop when it's the first member of\
    \ the structure, so we can imagine this as <code>***..***ptr</code>.</p>\n<p>There\
    \ is really no limit on this because the links can be traversed with a loop rather\
    \ than a giant expression like this, and moreover, the structure can easily be\
    \ made circular.</p>\n<p>Thus, in other words, linked lists may be the ultimate\
    \ example of adding another level of indirection to solve a problem, since you're\
    \ doing it dynamically with every push operation. :)</p>\n</div>"
- - How many levels of pointers can we have?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><strong>Theoretically:</strong></p>\n\
    <p>You can have as many levels of indirections as you want.</p>\n<p><strong>Practically:</strong></p>\n\
    <p>Of course, nothing that consumes memory can be indefinite, there will be limitations\
    \ due to resources available on the host environment. So practically there is\
    \ a maximum limit to what an implementation can support and the implementation\
    \ shall document it appropriately. So in all such artifacts, the standard does\
    \ not specify the maximum limit, but it does specify the lower limits.</p>\n<p>Here's\
    \ the reference:</p>\n<p><strong>C99 Standard 5.2.4.1 Translation limits:</strong></p>\n\
    <blockquote>\n<p>â 12 pointer, array, and function declarators (in any combinations)\
    \ modifying an\n  arithmetic, structure, union, or void type in a declaration.</p>\n\
    </blockquote>\n<p>This specifies the lower limit that every implementation <strong>must</strong>\
    \ support. Note that in a footenote the standard further says:</p>\n<blockquote>\n\
    <p>18)  Implementations should avoid imposing fixed translation limits whenever\
    \ possible.</p>\n</blockquote>\n</div>"
- - 'Iteration over std::vector: unsigned vs signed index variable'
  - "<div class=\"post-text\" itemprop=\"text\">\n<h1>Iterating Backwards</h1>\n<p>See\
    \ <a href=\"https://stackoverflow.com/questions/275994/whats-the-best-way-to-do-a-backwards-loop-in-c-c-c#276053\"\
    >this answer</a>. </p>\n<h1>Iterating Forwards</h1>\n<p>This is almost identical.\
    \ Just change the iterators / swap decrement by increment. You should prefer iterators.\
    \ Some people tell you to use <code>std::size_t</code> as the index variable type.\
    \ However, that is not portable. Always use the <code>size_type</code> typedef\
    \ of the container (While you could get away with only a conversion in the forward\
    \ iterating case, it could actually go wrong all the way in the backward iterating\
    \ case when using <code>std::size_t</code>, in case <code>std::size_t</code> is\
    \ wider than what is the typedef of <code>size_type</code>):</p>\n<h2>Using std::vector</h2>\n\
    <h3>Using iterators</h3>\n<pre><code>for(std::vector&lt;T&gt;::iterator it = v.begin();\
    \ it != v.end(); ++it) {\n    /* std::cout &lt;&lt; *it; ... */\n}\n</code></pre>\n\
    <p>Important is, always use the prefix increment form for iterators whose definitions\
    \ you don't know. That will ensure your code runs as generic as possible. </p>\n\
    <h3>Using Range C++11</h3>\n<pre><code>for(auto const&amp; value: a) {\n     /*\
    \ std::cout &lt;&lt; value; ... */\n</code></pre>\n<h3>Using indices</h3>\n<pre><code>for(std::vector&lt;int&gt;::size_type\
    \ i = 0; i != v.size(); i++) {\n    /* std::cout &lt;&lt; v[i]; ... */\n}\n</code></pre>\n\
    <h2>Using arrays</h2>\n<h3>Using iterators</h3>\n<pre><code>for(element_type*\
    \ it = a; it != (a + (sizeof a / sizeof *a)); it++) {\n    /* std::cout &lt;&lt;\
    \ *it; ... */\n}\n</code></pre>\n<h3>Using Range C++11</h3>\n<pre><code>for(auto\
    \ const&amp; value: a) {\n     /* std::cout &lt;&lt; value; ... */\n</code></pre>\n\
    <h3>Using indices</h3>\n<pre><code>for(std::size_t i = 0; i != (sizeof a / sizeof\
    \ *a); i++) {\n    /* std::cout &lt;&lt; a[i]; ... */\n}\n</code></pre>\n<p>Read\
    \ in the backward iterating answer what problem the <code>sizeof</code> approach\
    \ can yield to, though.</p>\n</div>"
- - 'Iteration over std::vector: unsigned vs signed index variable'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Four years passed, <em>Google</em>\
    \ gave me this answer. With the <a href=\"http://en.wikipedia.org/wiki/C++11\"\
    >standard <em>C++11</em></a> (aka <em>C++0x</em>) there is actually a new pleasant\
    \ way of doing this (at the price of breaking backward compatibility): the new\
    \ <code>auto</code> keyword. It saves you the pain of having to explicitly specify\
    \ the type of the iterator to use (repeating the vector type again), when it is\
    \ obvious (to the compiler), which type to use. With <code>v</code> being your\
    \ <code>vector</code>, you can do something like this:</p>\n<pre><code>for ( auto\
    \ i = v.begin(); i != v.end(); i++ ) {\n    std::cout &lt;&lt; *i &lt;&lt; std::endl;\n\
    }\n</code></pre>\n<p><em>C++11</em> goes even further and gives you a special\
    \ syntax for iterating over collections like vectors. It removes the necessity\
    \ of writing things that are always the same:</p>\n<pre><code>for ( auto &amp;i\
    \ : v ) {\n    std::cout &lt;&lt; i &lt;&lt; std::endl;\n}\n</code></pre>\n<p>To\
    \ see it in a working program, build a file <code>auto.cpp</code>:</p>\n<pre><code>#include\
    \ &lt;vector&gt;\n#include &lt;iostream&gt;\n\nint main(void) {\n    std::vector&lt;int&gt;\
    \ v = std::vector&lt;int&gt;();\n    v.push_back(17);\n    v.push_back(12);\n\
    \    v.push_back(23);\n    v.push_back(42);\n    for ( auto &amp;i : v ) {\n \
    \       std::cout &lt;&lt; i &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre>\n\
    <p>As of writing this, when you compile this with <em>g++</em>, you normally need\
    \ to set it to work with the new standard by giving an extra flag:</p>\n<pre><code>g++\
    \ -std=c++0x -o auto auto.cpp\n</code></pre>\n<p>Now you can run the example:</p>\n\
    <pre><code>$ ./auto\n17\n12\n23\n42\n</code></pre>\n<p><em>Please note</em> that\
    \ the instructions on compiling and running are specific to <em>gnu c++</em> compiler\
    \ on <em>Linux</em>, the program should be platform (and compiler) independent.</p>\n\
    </div>"
- - 'Iteration over std::vector: unsigned vs signed index variable'
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In the specific case in your\
    \ example, I'd use the STL algorithms to accomplish this. </p>\n<pre><code>#include\
    \ &lt;numeric&gt; \n\nsum = std::accumulate( polygon.begin(), polygon.end(), 0\
    \ );\n</code></pre>\n<p>For a more general, but still fairly simple case, I'd\
    \ go with:</p>\n<pre><code>#include &lt;boost/lambda/lambda.hpp&gt;\n#include\
    \ &lt;boost/lambda/bind.hpp&gt;\n\nusing namespace boost::lambda;\nstd::for_each(\
    \ polygon.begin(), polygon.end(), sum += _1 );\n</code></pre>\n</div>"
- - What is an unsigned char?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In C++, there are three <em>distinct</em>\
    \ character types:</p>\n<ul>\n<li><code>char</code></li>\n<li><code>signed char</code></li>\n\
    <li><code>unsigned char</code></li>\n</ul>\n<p>If you are using character types\
    \ for <em>text</em>, use the unqualified <code>char</code>:</p>\n<ul>\n<li>it\
    \ is the type of character literals like <code>'a'</code> or <code>'0'</code>.</li>\n\
    <li>it is the type that makes up C strings like <code>\"abcde\"</code></li>\n\
    </ul>\n<p>It also works out as a number value, but it is unspecified whether that\
    \ value is treated as signed or unsigned. Beware character comparisons through\
    \ inequalities - although if you limit yourself to ASCII (0-127) you're just about\
    \ safe.</p>\n<p>If you are using character types as <em>numbers</em>, use:</p>\n\
    <ul>\n<li><code>signed char</code>, which gives you <em>at least</em> the -127\
    \ to 127 range. (-128 to 127 is common)</li>\n<li><code>unsigned char</code>,\
    \ which gives you <em>at least</em> the 0 to 255 range.</li>\n</ul>\n<p>\"At least\"\
    , because the C++ standard only gives the minimum range of values that each numeric\
    \ type is required to cover. <code>sizeof (char)</code> is required to be 1 (i.e.\
    \ one byte), but a byte could in theory be for example 32 bits. <strong><code>sizeof</code>\
    \ would still be report its size as <code>1</code></strong> - meaning that you\
    \ <em>could</em> have <code>sizeof (char) == sizeof (long) == 1</code>.</p>\n\
    </div>"
- - What is an unsigned char?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This is implementation dependent,\
    \ as the C standard does NOT define the signed-ness of <code>char</code>.  Depending\
    \ on the platform, char may be <code>signed</code> or <code>unsigned</code>, so\
    \ you need to explicitly ask for <code>signed char</code> or <code>unsigned char</code>\
    \ if your implementation depends on it.  Just use <code>char</code> if you intend\
    \ to represent characters from strings, as this will match what your platform\
    \ puts in the string.</p>\n<p>The difference between <code>signed char</code>\
    \ and <code>unsigned char</code> is as you'd expect.  On most platforms, <code>signed\
    \ char</code> will be an 8-bit two's complement number ranging from <code>-128</code>\
    \ to <code>127</code>, and <code>unsigned char</code> will be an 8-bit unsigned\
    \ integer (<code>0</code> to <code>255</code>).  Note the standard does NOT require\
    \ that <code>char</code> types have 8 bits, only that <code>sizeof(char)</code>\
    \ return <code>1</code>.  You can get at the number of bits in a char with <code>CHAR_BIT</code>\
    \ in <code>limits.h</code>.  There are few if any platforms today where this will\
    \ be something other than <code>8</code>, though.</p>\n<p>There is a nice summary\
    \ of this issue <a href=\"http://www.arm.linux.org.uk/docs/faqs/signedchar.php\"\
    \ rel=\"noreferrer\">here</a>.</p>\n<p>As others have mentioned since I posted\
    \ this, you're better off using <code>int8_t</code> and <code>uint8_t</code> if\
    \ you really want to represent small integers.</p>\n</div>"
- - What is an unsigned char?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Because i feel it's really called\
    \ for, i just want to state some rules of C and C++ (they are the same in this\
    \ regard). First, <em>all bits</em> of <code>unsigned char</code> participate\
    \ in determining the value if any unsigned char object. Second, <code>unsigned\
    \ char</code> is explicitly stated unsigned.</p>\n<p>Now, i had a discussion with\
    \ someone about what happens when you convert the value <code>-1</code> of type\
    \ int to <code>unsigned char</code>. He refused the idea that the resulting <code>unsigned\
    \ char</code> has all its bits set to 1, because he was worried about sign representation.\
    \ But he don't have to. It's immediately following out of this rule that the conversion\
    \ does what is intended:</p>\n<blockquote>\n<p>If the new type is unsigned, the\
    \ value is converted by repeatedly adding or\n  subtracting one more than the\
    \ maximum value that can be represented in the new type\n  until the value is\
    \ in the range of the new type. (<code>6.3.1.3p2</code> in a C99 draft)</p>\n\
    </blockquote>\n<p>That's a mathematical description. C++ describes it in terms\
    \ of modulo calculus, which yields to the same rule. Anyway, what is <em>not</em>\
    \ guaranteed is that all bits in the integer <code>-1</code> are one before the\
    \ conversion. So, what do we have so we can claim that the resulting <code>unsigned\
    \ char</code> has all its <code>CHAR_BIT</code> bits turned to 1?</p>\n<ol>\n\
    <li>All bits participate in determining its value - that is, no padding bits occur\
    \ in the object. </li>\n<li>Adding only one time <code>UCHAR_MAX+1</code> to <code>-1</code>\
    \ will yield a value in range, namely <code>UCHAR_MAX</code></li>\n</ol>\n<p>That's\
    \ enough, actually! So whenever you want to have an <code>unsigned char</code>\
    \ having all its bits one, you do</p>\n<pre><code>unsigned char c = (unsigned\
    \ char)-1;\n</code></pre>\n<p>It also follows that a conversion is <em>not</em>\
    \ just truncating higher order bits. The fortunate event for <em>two's complement</em>\
    \ is that it is just a truncation there, but the same isn't necessarily true for\
    \ other sign representations. </p>\n</div>"
- - Storing C++ template function definitions in a .CPP file
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The problem you describe can\
    \ be solved by defining the template in the header, or via the approach you describe\
    \ above.</p>\n<p>I recommend reading the following points from the <a href=\"\
    https://isocpp.org/wiki/faq/templates\" rel=\"noreferrer\">C++ FAQ Lite</a>: </p>\n\
    <ul>\n<li><a href=\"https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl\"\
    \ rel=\"noreferrer\">Why canât I separate the definition of my templates class\
    \ from its declaration and put it inside a .cpp file?</a></li>\n<li><a href=\"\
    https://isocpp.org/wiki/faq/templates#separate-template-fn-defn-from-decl\" rel=\"\
    noreferrer\">How can I avoid linker errors with my template functions?</a></li>\n\
    <li><a href=\"https://isocpp.org/wiki/faq/templates#separate-template-fn-defn-from-decl-export-keyword\"\
    \ rel=\"noreferrer\">How does the C++ keyword export help with template linker\
    \ errors?</a></li>\n</ul>\n<p>They go into a lot of detail about these (and other)\
    \ template issues.</p>\n</div>"
- - Storing C++ template function definitions in a .CPP file
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>For others on this page wondering\
    \ what the correct syntax is (as did I) for explicit template specialisation (or\
    \ at least in VS2008), its the following...</p>\n<p>In your .h file...</p>\n<pre\
    \ class=\"lang-c++ prettyprint-override\"><code>template&lt;typename T&gt;\nclass\
    \ foo\n{\npublic:\n    void bar(const T &amp;t);\n};\n</code></pre>\n<p>And in\
    \ your .cpp file</p>\n<pre><code>template &lt;class T&gt;\nvoid foo&lt;T&gt;::bar(const\
    \ T &amp;t)\n{ }\n\n// Explicit template instantiation\ntemplate class foo&lt;int&gt;;\n\
    </code></pre>\n</div>"
- - Storing C++ template function definitions in a .CPP file
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This code is well-formed. You\
    \ only have to pay attention that the definition of the template is visible at\
    \ the point of instantiation. To quote the standard, Â§ 14.7.2.4:</p>\n<blockquote>\n\
    <p>The definition of a non-exported function template, a non-exported member function\
    \ template, or a non-exported member function or static data member of a class\
    \ template shall be present in every translation unit in which it is explicitly\
    \ instantiated.</p>\n</blockquote>\n</div>"
- - How to replace all occurrences of a character in string?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><code>std::string</code> doesn't\
    \ contain such function but you could use stand-alone <code>replace</code> function\
    \ from <code>algorithm</code> header.</p>\n<pre><code>#include &lt;algorithm&gt;\n\
    #include &lt;string&gt;\n\nvoid some_func() {\n  std::string s = \"example string\"\
    ;\n  std::replace( s.begin(), s.end(), 'x', 'y'); // replace all 'x' to 'y'\n\
    }\n</code></pre>\n</div>"
- - How to replace all occurrences of a character in string?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I thought I'd toss in the <a\
    \ href=\"http://www.boost.org/doc/libs/release/libs/algorithm/string\">boost solution</a>\
    \ as well:</p>\n<pre><code>#include &lt;boost/algorithm/string/replace.hpp&gt;\n\
    \n// in place\nstd::string in_place = \"blah#blah\";\nboost::replace_all(in_place,\
    \ \"#\", \"@\");\n\n// copy\nconst std::string input = \"blah#blah\";\nstd::string\
    \ output = boost::replace_all_copy(input, \"#\", \"@\");\n</code></pre>\n</div>"
- - How to replace all occurrences of a character in string?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The question is centered on <code>character</code>\
    \ replacement, but, as I found this page very useful (especially <a href=\"https://stackoverflow.com/users/18664/konrad\"\
    >Konrad</a>'s remark), I'd like to share this more generalized implementation,\
    \ which allows to deal with <code>substrings</code> as well:</p>\n<pre><code>std::string\
    \ ReplaceAll(std::string str, const std::string&amp; from, const std::string&amp;\
    \ to) {\n    size_t start_pos = 0;\n    while((start_pos = str.find(from, start_pos))\
    \ != std::string::npos) {\n        str.replace(start_pos, from.length(), to);\n\
    \        start_pos += to.length(); // Handles case where 'to' is a substring of\
    \ 'from'\n    }\n    return str;\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code>std::cout\
    \ &lt;&lt; ReplaceAll(string(\"Number Of Beans\"), std::string(\" \"), std::string(\"\
    _\")) &lt;&lt; std::endl;\nstd::cout &lt;&lt; ReplaceAll(string(\"ghghjghugtghty\"\
    ), std::string(\"gh\"), std::string(\"X\")) &lt;&lt; std::endl;\nstd::cout &lt;&lt;\
    \ ReplaceAll(string(\"ghghjghugtghty\"), std::string(\"gh\"), std::string(\"h\"\
    )) &lt;&lt; std::endl;\n</code></pre>\n<p>Outputs:</p>\n<blockquote>\n<p>Number_Of_Beans</p>\n\
    <p>XXjXugtXty</p>\n<p>hhjhugthty</p>\n</blockquote>\n<hr/>\n<p><strong>EDIT:</strong></p>\n\
    <p><em>The above can be implemented in a more suitable way, in case performances\
    \ are of your concern, by returning nothing (<code>void</code>) and performing\
    \ the changes directly on the string <code>str</code> given as argument, passed\
    \ <strong>by address</strong> instead of <strong>by value</strong>. This would\
    \ avoid useless and costly copy of the original string, while returning the result.\
    \ Your call, then...</em></p>\n<p><em>Code :</em></p>\n<pre><code>static inline\
    \ void ReplaceAll2(std::string &amp;str, const std::string&amp; from, const std::string&amp;\
    \ to)\n{\n    // Same inner code...\n    // No return statement\n}\n</code></pre>\n\
    <hr/>\n<p>Hope this will be helpful for some others...</p>\n</div>"
- - Programmatically find the number of cores on a machine
  - "<div class=\"post-text\" itemprop=\"text\">\n<h1>C++11</h1>\n<pre><code>//may\
    \ return 0 when not able to detect\nunsigned concurentThreadsSupported = std::thread::hardware_concurrency();\n\
    </code></pre>\n<p>Reference: <a href=\"http://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency\"\
    \ rel=\"noreferrer\">std::thread::hardware_concurrency</a></p>\n<hr/>\n<p>In C++\
    \ prior to C++11, there's no portable way.  Instead, you'll need to use one or\
    \ more of the following methods (guarded by appropriate <code>#ifdef</code> lines):</p>\n\
    <ul>\n<li><h3>Win32</h3>\n<pre><code>SYSTEM_INFO sysinfo;\nGetSystemInfo(&amp;sysinfo);\n\
    int numCPU = sysinfo.dwNumberOfProcessors;\n</code></pre></li>\n<li><h3>Linux,\
    \ Solaris, AIX and Mac OS X &gt;=10.4 (i.e. Tiger onwards)</h3>\n<pre><code>int\
    \ numCPU = sysconf(_SC_NPROCESSORS_ONLN);\n</code></pre></li>\n<li><h3>FreeBSD,\
    \ MacOS X, NetBSD, OpenBSD, etc.</h3>\n<pre><code>int mib[4];\nint numCPU;\nstd::size_t\
    \ len = sizeof(numCPU); \n\n/* set the mib for hw.ncpu */\nmib[0] = CTL_HW;\n\
    mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;\n\n/* get the number of\
    \ CPUs from the system */\nsysctl(mib, 2, &amp;numCPU, &amp;len, NULL, 0);\n\n\
    if (numCPU &lt; 1) \n{\n    mib[1] = HW_NCPU;\n    sysctl(mib, 2, &amp;numCPU,\
    \ &amp;len, NULL, 0);\n    if (numCPU &lt; 1)\n        numCPU = 1;\n}\n</code></pre></li>\n\
    <li><h3>HPUX</h3>\n<pre><code>int numCPU = mpctl(MPC_GETNUMSPUS, NULL, NULL);\n\
    </code></pre></li>\n<li><h3>IRIX</h3>\n<pre><code>int numCPU = sysconf(_SC_NPROC_ONLN);\n\
    </code></pre></li>\n<li><h3>Objective-C (Mac OS X &gt;=10.5 or iOS)</h3>\n<pre><code>NSUInteger\
    \ a = [[NSProcessInfo processInfo] processorCount];\nNSUInteger b = [[NSProcessInfo\
    \ processInfo] activeProcessorCount];\n</code></pre></li>\n</ul>\n</div>"
- - Programmatically find the number of cores on a machine
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This functionality is part of\
    \ the C++11 standard.</p>\n<pre><code>#include &lt;thread&gt;\n\nunsigned int\
    \ nthreads = std::thread::hardware_concurrency();\n</code></pre>\n<p>For older\
    \ compilers, you can use the <a href=\"http://www.boost.org/doc/libs/1_46_0/doc/html/thread.html\"\
    \ rel=\"noreferrer\">Boost.Thread</a> library.</p>\n<pre><code>#include &lt;boost/thread.hpp&gt;\n\
    \nunsigned int nthreads = boost::thread::hardware_concurrency();\n</code></pre>\n\
    <p>In either case, <code>hardware_concurrency()</code> returns the number of threads\
    \ that the hardware is capable of executing concurrently based on the number of\
    \ CPU cores and hyper-threading units.</p>\n</div>"
- - Programmatically find the number of cores on a machine
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"http://openmp.org/\"\
    \ rel=\"noreferrer\">OpenMP</a> is supported on many platforms (including Visual\
    \ Studio 2005) and it offers a </p>\n<pre><code>int omp_get_num_procs();\n</code></pre>\n\
    <p>function that returns the number of processors/cores available at the time\
    \ of call.</p>\n</div>"
- - In what cases do I use malloc vs new?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Unless you are forced to use\
    \ C, you should <strong>never use</strong> <code>malloc</code>.  Always use <code>new</code>.</p>\n\
    <p>If you need a big chunk of data just do something like:</p>\n<pre><code>char\
    \ *pBuffer = new char[1024];\n</code></pre>\n<p>Be careful though this is not\
    \ correct:</p>\n<pre><code>//This is incorrect - may delete only one element,\
    \ may corrupt the heap, or worse...\ndelete pBuffer;\n</code></pre>\n<p>Instead\
    \ you should do this when deleting an array of data:</p>\n<pre><code>//This deletes\
    \ all items in the array\ndelete[] pBuffer;\n</code></pre>\n<p>The <code>new</code>\
    \ keyword is the C++ way of doing it, and it will ensure that your type will have\
    \ its <strong>constructor called</strong>.  The <code>new</code> keyword is also\
    \ more <strong>type-safe</strong> whereas <code>malloc</code> is not type-safe\
    \ at all. </p>\n<p>The only way I could think that would be beneficial to use\
    \ <code>malloc</code> would be if you needed to <strong>change the size of your\
    \ buffer</strong> of data.  The <code>new</code> keyword does not have an analogous\
    \ way like <code>realloc</code>.  The <code>realloc</code> function might be able\
    \ to extend the size of a chunk of memory for you more efficiently. </p>\n<p>It\
    \ is worth mentioning that you cannot mix <code>new</code>/<code>free</code> and\
    \ <code>malloc</code>/<code>delete</code>.</p>\n<p>Note: Some answers in this\
    \ question are invalid. </p>\n<pre><code>int* p_scalar = new int(5);  // Does\
    \ not create 5 elements, but initializes to 5\nint* p_array  = new int[5];  //\
    \ Creates 5 elements\n</code></pre>\n</div>"
- - In what cases do I use malloc vs new?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The short answer is: don't use\
    \ <code>malloc</code> for C++ without a really good reason for doing so. <code>malloc</code>\
    \ has a number of deficiencies when used with C++, which <code>new</code> was\
    \ defined to overcome.</p>\n<h2>Deficiencies fixed by new for C++ code</h2>\n\
    <ol>\n<li><p><code>malloc</code> is not typesafe in any meaningful way. In C++\
    \ you are required to cast the return from <code>void*</code>. This potentially\
    \ introduces a lot of problems:</p>\n<pre><code>#include &lt;stdlib.h&gt;\n\n\
    struct foo {\n  double d[5];\n}; \n\nint main() {\n  foo *f1 = malloc(1); // error,\
    \ no cast\n  foo *f2 = static_cast&lt;foo*&gt;(malloc(sizeof(foo)));\n  foo *f3\
    \ = static_cast&lt;foo*&gt;(malloc(1)); // No error, bad\n}\n</code></pre></li>\n\
    <li><p>It's worse than that though. If the type in question is <a href=\"https://stackoverflow.com/questions/146452/what-are-pod-types-in-c\"\
    >POD (plain old data)</a> then you can semi-sensibly use <code>malloc</code> to\
    \ allocate memory for it, as <code>f2</code> does in the first example.</p>\n\
    <p>It's not so obvious though if a type is POD. The fact that it's possible for\
    \ a given type to change from POD to non-POD with no resulting compiler error\
    \ and potentially very hard to debug problems is a significant factor. For example\
    \ if someone (possibly another programmer, during maintenance, much later on were\
    \ to make a change that caused <code>foo</code> to no longer be POD then no obvious\
    \ error would appear at compile time as you'd hope, e.g.:</p>\n<pre><code>struct\
    \ foo {\n  double d[5];\n  virtual ~foo() { }\n};\n</code></pre>\n<p>would make\
    \ the <code>malloc</code> of <code>f2</code> also become bad, without any obvious\
    \ diagnostics. The   example here is trivial, but it's possible to accidentally\
    \ introduce non-PODness much further away (e.g. in a base class, by adding a non-POD\
    \ member). If you have C++11/boost you can use <code>is_pod</code> to check that\
    \ this assumption is correct and produce an error if it's not:</p>\n<pre><code>#include\
    \ &lt;type_traits&gt;\n#include &lt;stdlib.h&gt;\n\nfoo *safe_foo_malloc() {\n\
    \  static_assert(std::is_pod&lt;foo&gt;::value, \"foo must be POD\");\n  return\
    \ static_cast&lt;foo*&gt;(malloc(sizeof(foo)));\n}\n</code></pre>\n<p>Although\
    \ boost is <a href=\"http://www.boost.org/doc/libs/1_47_0/libs/type_traits/doc/html/boost_typetraits/reference/is_pod.html\"\
    \ rel=\"noreferrer\">unable to determine if a type is POD</a> without C++11 or\
    \ some other compiler extensions.</p></li>\n<li><p><code>malloc</code> returns\
    \ <code>NULL</code> if allocation fails. <code>new</code> will throw <code>std::bad_alloc</code>.\
    \ The behaviour of later using a <code>NULL</code> pointer is undefined. An exception\
    \ has clean semantics when it is thrown and it is thrown from the source of the\
    \ error. Wrapping <code>malloc</code> with an appropriate test at every call seems\
    \ tedious and error prone. (You only have to forget once to undo all that good\
    \ work). An exception can be allowed to propagate to a level where a caller is\
    \ able to sensibly process it, where as <code>NULL</code> is much harder to pass\
    \ back meaningfully. We could extend our <code>safe_foo_malloc</code> function\
    \ to throw an exception or exit the program or call some handler:</p>\n<pre><code>#include\
    \ &lt;type_traits&gt;\n#include &lt;stdlib.h&gt;\n\nvoid my_malloc_failed_handler();\n\
    \nfoo *safe_foo_malloc() {\n  static_assert(std::is_pod&lt;foo&gt;::value, \"\
    foo must be POD\");\n  foo *mem = static_cast&lt;foo*&gt;(malloc(sizeof(foo)));\n\
    \  if (!mem) {\n     my_malloc_failed_handler();\n     // or throw ...\n  }\n\
    \  return mem;\n}\n</code></pre></li>\n<li><p>Fundamentally <code>malloc</code>\
    \ is a C feature and <code>new</code> is a C++ feature. As a result <code>malloc</code>\
    \ does not play nicely with constructors, it only looks at allocating a chunk\
    \ of bytes. We could extend our <code>safe_foo_malloc</code> further to use placement\
    \ <code>new</code>:</p>\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;new&gt;\n\
    \nvoid my_malloc_failed_handler();\n\nfoo *safe_foo_malloc() {\n  void *mem =\
    \ malloc(sizeof(foo));\n  if (!mem) {\n     my_malloc_failed_handler();\n    \
    \ // or throw ...\n  }\n  return new (mem)foo();\n}\n</code></pre></li>\n<li><p>Our\
    \ <code>safe_foo_malloc</code> function isn't very generic - ideally we'd want\
    \ something that can handle any type, not just <code>foo</code>. We can achieve\
    \ this with templates and variadic templates for non-default constructors:</p>\n\
    <pre><code>#include &lt;functional&gt;\n#include &lt;new&gt;\n#include &lt;stdlib.h&gt;\n\
    \nvoid my_malloc_failed_handler();\n\ntemplate &lt;typename T&gt;\nstruct alloc\
    \ {\n  template &lt;typename ...Args&gt;\n  static T *safe_malloc(Args&amp;&amp;...\
    \ args) {\n    void *mem = malloc(sizeof(T));\n    if (!mem) {\n       my_malloc_failed_handler();\n\
    \       // or throw ...\n    }\n    return new (mem)T(std::forward(args)...);\n\
    \  }\n};\n</code></pre>\n<p>Now though in fixing all the issues we identified\
    \ so far we've practically reinvented the default <code>new</code> operator. If\
    \ you're going to use <code>malloc</code> and placement <code>new</code> then\
    \ you might as well just use <code>new</code> to begin with!</p></li>\n</ol>\n\
    </div>"
- - In what cases do I use malloc vs new?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>From the <a href=\"http://yosefk.com/c++fqa/heap.html#fqa-16.4\"\
    \ rel=\"noreferrer\">C++ FQA Lite</a>:</p>\n<blockquote>\n<p>[16.4] Why should\
    \ I use new instead of\n  trustworthy old malloc()?</p>\n<p>FAQ: new/delete call\
    \ the\n  constructor/destructor; new is type\n  safe, malloc is not; new can be\n\
    \  overridden by a class.</p>\n<p>FQA: The virtues of new mentioned by\n  the\
    \ FAQ are not virtues, because\n  constructors, destructors, and\n  operator overloading\
    \ are garbage (see\n  what happens when you have no garbage\n  collection?), and\
    \ the type safety\n  issue is really tiny here (normally\n  you have to cast the\
    \ void* returned by\n  malloc to the right pointer type to\n  assign it to a typed\
    \ pointer variable,\n  which may be annoying, but far from\n  \"unsafe\").</p>\n\
    <p>Oh, and using trustworthy old malloc\n  makes it possible to use the equally\n\
    \  trustworthy &amp; old realloc. Too bad we\n  don't have a shiny new operator\
    \ renew or something.</p>\n<p>Still, new is not bad enough to\n  justify a deviation\
    \ from the common\n  style used throughout a language, even\n  when the language\
    \ is C++. In\n  particular, classes with non-trivial\n  constructors will misbehave\
    \ in fatal\n  ways if you simply malloc the objects.\n  So why not use new throughout\
    \ the\n  code? People rarely overload operator\n  new, so it probably won't get\
    \ in your\n  way too much. And if they do overload\n  new, you can always ask\
    \ them to stop.</p>\n</blockquote>\n<p>Sorry, I just couldn't resist. :)</p>\n\
    </div>"
- - When to use dynamic vs. static libraries
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Static libraries increase the\
    \ size of the code in your binary. They're always loaded and whatever version\
    \ of the code you compiled with is the version of the code that will run.</p>\n\
    <p>Dynamic libraries are stored and versioned separately. It's possible for a\
    \ version of the dynamic library to be loaded that wasn't the original one that\
    \ shipped with your code <strong>if</strong> the update is considered binary compatible\
    \ with the original version.</p>\n<p>Additionally dynamic libraries aren't necessarily\
    \ loaded -- they're usually loaded when first called -- and can be shared among\
    \ components that use the same library (multiple data loads, one code load).</p>\n\
    <p>Dynamic libraries were considered to be the better approach most of the time,\
    \ but originally they had a major flaw (google DLL hell), which has all but been\
    \ eliminated by more recent Windows OSes (Windows XP in particular).</p>\n</div>"
- - When to use dynamic vs. static libraries
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Others have adequately explained\
    \ what a static library is, but I'd like to point out some of the caveats of using\
    \ static libraries, at least on Windows: </p>\n<ul>\n<li><p><strong>Singletons:</strong>\
    \ If something needs to be global/static and unique, be very careful about putting\
    \ it in a static library. If multiple DLLs are linked against that static library\
    \ they will each get their own copy of the singleton. However, if your application\
    \ is a single EXE with no custom DLLs, this may not be a problem.</p></li>\n<li><p><strong>Unreferenced\
    \ code removal:</strong> When you link against a static library, only the parts\
    \ of the static library that are referenced by your DLL/EXE will get linked into\
    \ your DLL/EXE. </p>\n<p>For example, if <code>mylib.lib</code> contains <code>a.obj</code>\
    \ and <code>b.obj</code> and your DLL/EXE only references functions or variables\
    \ from <code>a.obj</code>, the entirety of <code>b.obj</code> will get discarded\
    \ by the linker. If <code>b.obj</code> contains global/static objects, their constructors\
    \ and destructors will not get executed. If those constructors/destructors have\
    \ side effects, you may be disappointed by their absence.</p>\n<p>Likewise, if\
    \ the static library contains special entrypoints you may need to take care that\
    \ they are actually included. An example of this in embedded programming (okay,\
    \ not Windows) would be an interrupt handler that is marked as being at a specific\
    \ address. You also need to mark the interrupt handler as an entrypoint to make\
    \ sure it doesn't get discarded.</p>\n<p>Another consequence of this is that a\
    \ static library may contain object files that are completely unusable due to\
    \ unresolved references, but it won't cause a linker error until you reference\
    \ a function or variable from those object files. This may happen long after the\
    \ library is written.</p></li>\n<li><p><strong>Debug symbols:</strong> You may\
    \ want a separate PDB for each static library, or you may want the debug symbols\
    \ to be placed in the object files so that they get rolled into the PDB for the\
    \ DLL/EXE. The Visual C++ documentation explains <a href=\"http://msdn.microsoft.com/en-us/library/958x11bc.aspx\"\
    \ rel=\"noreferrer\">the necessary options</a>.</p></li>\n<li><p><strong>RTTI:</strong>\
    \ You may end up with multiple <code>type_info</code> objects for the same class\
    \ if you link a single static library into multiple DLLs. If your program assumes\
    \ that <code>type_info</code> is \"singleton\" data and uses <code>&amp;typeid()</code>\
    \ or <code>type_info::before()</code>, you may get undesirable and surprising\
    \ results. </p></li>\n</ul>\n</div>"
- - When to use dynamic vs. static libraries
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>A lib is a unit of code that\
    \ is bundled within your application executable.</p>\n<p>A dll is a standalone\
    \ unit of executable code. It is loaded in the process only when a call is made\
    \ into that code. A dll can be used by multiple applications and loaded in multiple\
    \ processes, while still having only one copy of the code on the hard drive.</p>\n\
    <p><strong>Dll pros</strong>: can be used to reuse/share code between several\
    \ products; load in the process memory on demand and can be unloaded when not\
    \ needed; can be upgraded independently of the rest of the program.</p>\n<p><strong>Dll\
    \ cons</strong>: performance impact of the dll loading and code rebasing; versioning\
    \ problems (\"dll hell\")</p>\n<p><strong>Lib pros</strong>: no performance impact\
    \ as code is always loaded in the process and is not rebased; no versioning problems.</p>\n\
    <p><strong>Lib cons</strong>: executable/process \"bloat\" - all the code is in\
    \ your executable and is loaded upon process start; no reuse/sharing - each product\
    \ has its own copy of the code.</p>\n</div>"
- - Why does GCC generate 15-20% faster code if I optimize for size instead of speed?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>By default compilers optimize\
    \ for \"average\" processor. Since different processors favor different instruction\
    \ sequences, compiler optimizations enabled by <code>-O2</code> might benefit\
    \ average processor, but decrease performance on your particular processor (and\
    \ the same applies to <code>-Os</code>). If you try the same example on different\
    \ processors, you will find that on some of them benefit from <code>-O2</code>\
    \ while other are more favorable to <code>-Os</code> optimizations.</p>\n<p>Here\
    \ are the results for <code>time ./test 0 0</code> on several processors (user\
    \ time reported):</p>\n<pre><code>Processor (System-on-Chip)             Compiler\
    \   Time (-O2)  Time (-Os)  Fastest\nAMD Opteron 8350                       gcc-4.8.1\
    \    0.704s      0.896s      -O2\nAMD FX-6300                            gcc-4.8.1\
    \    0.392s      0.340s      -Os\nAMD E2-1800                            gcc-4.7.2\
    \    0.740s      0.832s      -O2\nIntel Xeon E5405                       gcc-4.8.1\
    \    0.603s      0.804s      -O2\nIntel Xeon E5-2603                     gcc-4.4.7\
    \    1.121s      1.122s       -\nIntel Core i3-3217U                    gcc-4.6.4\
    \    0.709s      0.709s       -\nIntel Core i3-3217U                    gcc-4.7.3\
    \    0.708s      0.822s      -O2\nIntel Core i3-3217U                    gcc-4.8.1\
    \    0.708s      0.944s      -O2\nIntel Core i7-4770K                    gcc-4.8.1\
    \    0.296s      0.288s      -Os\nIntel Atom 330                         gcc-4.8.1\
    \    2.003s      2.007s      -O2\nARM 1176JZF-S (Broadcom BCM2835)       gcc-4.6.3\
    \    3.470s      3.480s      -O2\nARM Cortex-A8 (TI OMAP DM3730)         gcc-4.6.3\
    \    2.727s      2.727s       -\nARM Cortex-A9 (TI OMAP 4460)           gcc-4.6.3\
    \    1.648s      1.648s       -\nARM Cortex-A9 (Samsung Exynos 4412)    gcc-4.6.3\
    \    1.250s      1.250s       -\nARM Cortex-A15 (Samsung Exynos 5250)   gcc-4.7.2\
    \    0.700s      0.700s       -\nQualcomm Snapdragon APQ8060A           gcc-4.8\
    \       1.53s       1.52s      -Os\n</code></pre>\n<p>In some cases you can alleviate\
    \ the effect of disadvantageous optimizations by asking <code>gcc</code> to optimize\
    \ for your particular processor (using options <code>-mtune=native</code> or <code>-march=native</code>):</p>\n\
    <pre><code>Processor            Compiler   Time (-O2 -mtune=native) Time (-Os\
    \ -mtune=native)\nAMD FX-6300          gcc-4.8.1         0.340s              \
    \     0.340s\nAMD E2-1800          gcc-4.7.2         0.740s                  \
    \ 0.832s\nIntel Xeon E5405     gcc-4.8.1         0.603s                   0.803s\n\
    Intel Core i7-4770K  gcc-4.8.1         0.296s                   0.288s\n</code></pre>\n\
    <p>Update: on Ivy Bridge-based Core i3 three versions of <code>gcc</code> (<code>4.6.4</code>,\
    \ <code>4.7.3</code>, and <code>4.8.1</code>) produce binaries with significantly\
    \ different performance, but the assembly code has only subtle variations. So\
    \ far, I have no explanation of this fact.</p>\n<p>Assembly from <code>gcc-4.6.4\
    \ -Os</code> (executes in 0.709 secs):</p>\n<pre><code>00000000004004d2 &lt;_ZL3addRKiS0_.isra.0&gt;:\n\
    \  4004d2:       8d 04 37                lea    eax,[rdi+rsi*1]\n  4004d5:   \
    \    c3                      ret\n\n00000000004004d6 &lt;_ZL4workii&gt;:\n  4004d6:\
    \       41 55                   push   r13\n  4004d8:       41 89 fd         \
    \       mov    r13d,edi\n  4004db:       41 54                   push   r12\n\
    \  4004dd:       41 89 f4                mov    r12d,esi\n  4004e0:       55 \
    \                     push   rbp\n  4004e1:       bd 00 c2 eb 0b          mov\
    \    ebp,0xbebc200\n  4004e6:       53                      push   rbx\n  4004e7:\
    \       31 db                   xor    ebx,ebx\n  4004e9:       41 8d 34 1c  \
    \           lea    esi,[r12+rbx*1]\n  4004ed:       41 8d 7c 1d 00          lea\
    \    edi,[r13+rbx*1+0x0]\n  4004f2:       e8 db ff ff ff          call   4004d2\
    \ &lt;_ZL3addRKiS0_.isra.0&gt;\n  4004f7:       01 c3                   add  \
    \  ebx,eax\n  4004f9:       ff cd                   dec    ebp\n  4004fb:    \
    \   75 ec                   jne    4004e9 &lt;_ZL4workii+0x13&gt;\n  4004fd: \
    \      89 d8                   mov    eax,ebx\n  4004ff:       5b            \
    \          pop    rbx\n  400500:       5d                      pop    rbp\n  400501:\
    \       41 5c                   pop    r12\n  400503:       41 5d            \
    \       pop    r13\n  400505:       c3                      ret\n</code></pre>\n\
    <p>Assembly from <code>gcc-4.7.3 -Os</code> (executes in 0.822 secs):</p>\n<pre><code>00000000004004fa\
    \ &lt;_ZL3addRKiS0_.isra.0&gt;:\n  4004fa:       8d 04 37                lea \
    \   eax,[rdi+rsi*1]\n  4004fd:       c3                      ret\n\n00000000004004fe\
    \ &lt;_ZL4workii&gt;:\n  4004fe:       41 55                   push   r13\n  400500:\
    \       41 89 f5                mov    r13d,esi\n  400503:       41 54       \
    \            push   r12\n  400505:       41 89 fc                mov    r12d,edi\n\
    \  400508:       55                      push   rbp\n  400509:       bd 00 c2\
    \ eb 0b          mov    ebp,0xbebc200\n  40050e:       53                    \
    \  push   rbx\n  40050f:       31 db                   xor    ebx,ebx\n  400511:\
    \       41 8d 74 1d 00          lea    esi,[r13+rbx*1+0x0]\n  400516:       41\
    \ 8d 3c 1c             lea    edi,[r12+rbx*1]\n  40051a:       e8 db ff ff ff\
    \          call   4004fa &lt;_ZL3addRKiS0_.isra.0&gt;\n  40051f:       01 c3 \
    \                  add    ebx,eax\n  400521:       ff cd                   dec\
    \    ebp\n  400523:       75 ec                   jne    400511 &lt;_ZL4workii+0x13&gt;\n\
    \  400525:       89 d8                   mov    eax,ebx\n  400527:       5b  \
    \                    pop    rbx\n  400528:       5d                      pop \
    \   rbp\n  400529:       41 5c                   pop    r12\n  40052b:       41\
    \ 5d                   pop    r13\n  40052d:       c3                      ret\n\
    </code></pre>\n<p>Assembly from <code>gcc-4.8.1 -Os</code> (executes in 0.994\
    \ secs):</p>\n<pre><code>00000000004004fd &lt;_ZL3addRKiS0_.isra.0&gt;:\n  4004fd:\
    \       8d 04 37                lea    eax,[rdi+rsi*1]\n  400500:       c3   \
    \                   ret\n\n0000000000400501 &lt;_ZL4workii&gt;:\n  400501:   \
    \    41 55                   push   r13\n  400503:       41 89 f5            \
    \    mov    r13d,esi\n  400506:       41 54                   push   r12\n  400508:\
    \       41 89 fc                mov    r12d,edi\n  40050b:       55          \
    \            push   rbp\n  40050c:       bd 00 c2 eb 0b          mov    ebp,0xbebc200\n\
    \  400511:       53                      push   rbx\n  400512:       31 db   \
    \                xor    ebx,ebx\n  400514:       41 8d 74 1d 00          lea \
    \   esi,[r13+rbx*1+0x0]\n  400519:       41 8d 3c 1c             lea    edi,[r12+rbx*1]\n\
    \  40051d:       e8 db ff ff ff          call   4004fd &lt;_ZL3addRKiS0_.isra.0&gt;\n\
    \  400522:       01 c3                   add    ebx,eax\n  400524:       ff cd\
    \                   dec    ebp\n  400526:       75 ec                   jne  \
    \  400514 &lt;_ZL4workii+0x13&gt;\n  400528:       89 d8                   mov\
    \    eax,ebx\n  40052a:       5b                      pop    rbx\n  40052b:  \
    \     5d                      pop    rbp\n  40052c:       41 5c              \
    \     pop    r12\n  40052e:       41 5d                   pop    r13\n  400530:\
    \       c3                      ret\n</code></pre>\n</div>"
- - Why does GCC generate 15-20% faster code if I optimize for size instead of speed?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>My colleague helped me find a\
    \ plausible answer to my question. He noticed the importance of the 256 byte boundary.\
    \ He is not registered here and encouraged me to post the answer myself (and take\
    \ all the fame).</p>\n<hr/>\n<p><strong>Short answer:</strong></p>\n<blockquote>\n\
    <p>Is it the padding that is the culprit in this case? Why and how?</p>\n</blockquote>\n\
    <p><strong>It all boils down to alignment.</strong> Alignments can have a significant\
    \ impact on the performance, that is why we have the <code>-falign-*</code> flags\
    \ in the first place.</p>\n<p>I have submitted <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58863\"\
    \ rel=\"noreferrer\">a (bogus?) bug report to the gcc developers</a>. It turns\
    \ out that the default behavior is <em>\"we align loops to 8 byte by default but\
    \ try to align it to 16 byte if we don't need to fill in over 10 bytes.\"</em>\
    \ Apparently, this default is not the best choice in this particular case and\
    \ on my machine. Clang 3.4 (trunk) with <code>-O3</code> does the appropriate\
    \ alignment and the generated code does not show this weird behavior.</p>\n<p>Of\
    \ course, <strong>if an inappropriate alignment is done, it makes things worse.</strong>\
    \ An unnecessary / bad alignment just eats up bytes for no reason and potentially\
    \ increases cache misses, etc.</p>\n<blockquote>\n<p>The noise it makes pretty\
    \ much makes timing micro-optimizations\n  impossible.</p>\n<p>How can I make\
    \ sure that such accidental lucky / unlucky alignments\n  are not interfering\
    \ when I do micro-optimizations (unrelated to stack\n  alignment) on C or C++\
    \ source codes?</p>\n</blockquote>\n<p><strong>Simply by telling gcc to do the\
    \ right alignment:</strong></p>\n<p><code>g++ -O2 -falign-functions=16 -falign-loops=16</code></p>\n\
    <hr/>\n<p><strong>Long answer:</strong></p>\n<p>The code will run slower if:</p>\n\
    <ul>\n<li><p>an <code>XX</code> byte boundary cuts <code>add()</code> in the middle\
    \ (<code>XX</code> being machine dependent).</p></li>\n<li><p>if the call to <code>add()</code>\
    \ has to jump over an <code>XX</code> byte boundary and the target is not aligned.</p></li>\n\
    <li><p>if  <code>add()</code> is not aligned.</p></li>\n<li><p>if the loop is\
    \ not aligned.</p></li>\n</ul>\n<p>The first 2 are beautifully visible on the\
    \ codes and results that <a href=\"https://stackoverflow.com/a/19471823/341970\"\
    >Marat Dukhan kindly posted</a>. In this case, <code>gcc-4.8.1 -Os</code> (executes\
    \ in 0.994 secs):</p>\n<pre><code>00000000004004fd &lt;_ZL3addRKiS0_.isra.0&gt;:\n\
    \  4004fd:       8d 04 37                lea    eax,[rdi+rsi*1]\n  400500:   \
    \    c3   \n</code></pre>\n<p>a 256 byte boundary cuts <code>add()</code> right\
    \ in the middle and neither <code>add()</code> nor the loop is aligned. Surprise,\
    \ surprise, this is the slowest case!</p>\n<p>In case <code>gcc-4.7.3 -Os</code>\
    \ (executes in 0.822 secs), the 256 byte boundary only cuts into a cold section\
    \ (but neither the loop, nor <code>add()</code> is cut):</p>\n<pre><code>00000000004004fa\
    \ &lt;_ZL3addRKiS0_.isra.0&gt;:\n  4004fa:       8d 04 37                lea \
    \   eax,[rdi+rsi*1]\n  4004fd:       c3                      ret\n\n[...]\n\n\
    \  40051a:       e8 db ff ff ff          call   4004fa &lt;_ZL3addRKiS0_.isra.0&gt;\n\
    </code></pre>\n<p>Nothing is aligned, and the call to <code>add()</code> has to\
    \ jump over the 256 byte boundary. This code is the second slowest.</p>\n<p>In\
    \ case <code>gcc-4.6.4 -Os</code> (executes in 0.709 secs), although nothing is\
    \ aligned, the call to <code>add()</code> doesn't have to jump over the 256 byte\
    \ boundary and the target is exactly 32 byte away:</p>\n<pre><code>  4004f2: \
    \      e8 db ff ff ff          call   4004d2 &lt;_ZL3addRKiS0_.isra.0&gt;\n  4004f7:\
    \       01 c3                   add    ebx,eax\n  4004f9:       ff cd        \
    \           dec    ebp\n  4004fb:       75 ec                   jne    4004e9\
    \ &lt;_ZL4workii+0x13&gt;\n</code></pre>\n<p>This is the fastest of all three.\
    \ Why the 256 byte boundary is speacial on his machine, I will leave it up to\
    \ him to figure it out. I don't have such a processor.</p>\n<p>Now, on my machine\
    \ I don't get this 256 byte boundary effect. Only the function and the loop alignment\
    \ kicks in on my machine. If I pass <code>g++ -O2 -falign-functions=16 -falign-loops=16</code>\
    \ then everything is back to normal: I always get the fastest case and the time\
    \ isn't sensitive to the <code>-fno-omit-frame-pointer</code> flag anymore. I\
    \ can pass <code>g++ -O2 -falign-functions=32 -falign-loops=32</code> or any multiples\
    \ of 16, the code is not sensitive to that either.</p>\n<blockquote>\n<p>I first\
    \ noticed in 2009 that gcc (at least on my projects and on my\n  machines) have\
    \ the tendency to generate noticeably faster code if I\n  optimize for size (-Os)\
    \ instead of speed (-O2 or -O3) and I have been\n  wondering ever since why.</p>\n\
    </blockquote>\n<p>A likely explanation is that I had hotspots which were sensitive\
    \ to the alignment, just like the one in this example. By messing with the flags\
    \ (passing <code>-Os</code> instead of <code>-O2</code>), those hotspots were\
    \ aligned in a lucky way by accident and the code became faster. <strong>It had\
    \ nothing to do with optimizing for size: These were by sheer accident that the\
    \ hotspots got aligned better.</strong> From now on, I will check the effects\
    \ of alignment on my projects.</p>\n<p>Oh, and one more thing. <strong>How can\
    \ such hotspots arise, like the one shown in the example? How can the inlining\
    \ of such a tiny function like <code>add()</code> fail?</strong></p>\n<p>Consider\
    \ this:</p>\n<pre><code>// add.cpp\nint add(const int&amp; x, const int&amp; y)\
    \ {\n    return x + y;\n}\n</code></pre>\n<p>and in a separate file:</p>\n<pre><code>//\
    \ main.cpp\nint add(const int&amp; x, const int&amp; y);\n\nconst int LOOP_BOUND\
    \ = 200000000;\n\n__attribute__((noinline))\nstatic int work(int xval, int yval)\
    \ {\n    int sum(0);\n    for (int i=0; i&lt;LOOP_BOUND; ++i) {\n        int x(xval+sum);\n\
    \        int y(yval+sum);\n        int z = add(x, y);\n        sum += z;\n   \
    \ }\n    return sum;\n}\n\nint main(int , char* argv[]) {\n    int result = work(*argv[1],\
    \ *argv[2]);\n    return result;\n}\n</code></pre>\n<p>and compiled as: <code>g++\
    \ -O2 add.cpp main.cpp</code>. </p>\n<p>Â Â Â Â Â Â <strong>gcc won't inline <code>add()</code>!</strong></p>\n\
    <p>That's all, it's that easy to  unintendedly create hotspots like the one in\
    \ the OP. <strong>Of course it is partly my fault: gcc is an excellent compiler.</strong>\
    \ If compile the above as: <code>g++ -O2 -flto add.cpp main.cpp</code>, that is,\
    \ <strong>if I perform link time optimization, the code runs in 0.19s!</strong>\
    \ </p>\n<p>(Inlining is artificially disabled in the OP, hence, the code in the\
    \ OP was 2x slower).</p>\n</div>"
- - Why does GCC generate 15-20% faster code if I optimize for size instead of speed?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I'm adding this post-accept to\
    \ point out that the effects of alignment on overall performance of programs -\
    \ including big ones - has been studied.  For example, <a href=\"http://www.eecs.northwestern.edu/~robby/courses/322-2013-spring/mytkowicz-wrong-data.pdf\"\
    >this article</a> (and I believe a version of this also appeared in CACM) shows\
    \ how link order and OS environment size changes alone were sufficient to shift\
    \ performance significantly.  They attribute this to alignment of \"hot loops\"\
    .</p>\n<p>This paper, titled \"Producing wrong data without doing anything obviously\
    \ wrong!\" says that inadvertent experimental bias due to nearly uncontrollable\
    \ differences in program running environments probably renders many benchmark\
    \ results meaningless. </p>\n<p>I think you're encountering a different angle\
    \ on the same observation.  </p>\n<p>For performance-critical code, this is a\
    \ pretty good argument for systems that assess the environment at installation\
    \ or run time and choose the local best among differently optimized versions of\
    \ key routines. </p>\n</div>"
- - Why does the order in which libraries are linked sometimes cause errors in GCC?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p><sub>(See the history on this\
    \ answer to get the more elaborate text, but I now think it's easier for the reader\
    \ to see real command lines).</sub></p>\n<hr/>\n<p>Common files shared by all\
    \ below commands</p>\n<pre><code>$ cat a.cpp\nextern int a;\nint main() {\n  return\
    \ a;\n}\n\n$ cat b.cpp\nextern int b;\nint a = b;\n\n$ cat d.cpp\nint b;\n</code></pre>\n\
    <h1>Linking to static libraries</h1>\n<pre><code>$ g++ -c b.cpp -o b.o\n$ ar cr\
    \ libb.a b.o\n$ g++ -c d.cpp -o d.o\n$ ar cr libd.a d.o\n\n$ g++ -L. -ld -lb a.cpp\
    \ # wrong order\n$ g++ -L. -lb -ld a.cpp # wrong order\n$ g++ a.cpp -L. -ld -lb\
    \ # wrong order\n$ g++ a.cpp -L. -lb -ld # right order\n</code></pre>\n<p>The\
    \ linker searches from left to right, and notes unresolved symbols as it go. If\
    \ a library resolves the symbol, it takes the object files of that library to\
    \ resolve the symbol (b.o out of libb.a in this case). </p>\n<p>Dependencies of\
    \ static libraries against each other work the same - the library that needs symbols\
    \ must be first, then the library that resolves the symbol.</p>\n<p>If a static\
    \ library depends on another library, but the other library again depends on the\
    \ former library, there is a cycle. You can resolve this by enclosing the cyclically\
    \ dependent libraries by <code>-(</code> and <code>-)</code>, such as <code>-(\
    \ -la -lb -)</code> (you may need to escape the parens, such as <code>-\\(</code>\
    \ and <code>-\\)</code>). The linker then searches those enclosed lib multiple\
    \ times to ensure cycling dependencies are resolved. Alternatively, you can specify\
    \ the libraries multiple times, so each is before one another: <code>-la -lb -la</code>.</p>\n\
    <h1>Linking to dynamic libraries</h1>\n<pre><code>$ export LD_LIBRARY_PATH=. #\
    \ not needed if libs go to /usr/lib etc\n$ g++ -fpic -shared d.cpp -o libd.so\n\
    $ g++ -fpic -shared b.cpp -L. -ld -o libb.so # specifies its dependency!\n\n$\
    \ g++ -L. -lb a.cpp # wrong order (works on some distributions)\n$ g++ -Wl,--as-needed\
    \ -L. -lb a.cpp # wrong order\n$ g++ -Wl,--as-needed a.cpp -L. -lb # right order\n\
    </code></pre>\n<p>It's the same here - the libraries must follow the object files\
    \ of the program. The difference here with the static libraries is that you must\
    \ not care about the dependencies of the libraries against each other, because\
    \ <em>dynamic libraries sort out their dependencies themselves</em>. </p>\n<p>Some\
    \ recent distributions apparently default to using the <code>--as-needed</code>\
    \ linker flag, which enforces that the program's object files come before the\
    \ dynamic libraries. If that flag is passed, the linker will not link to libraries\
    \ that are not actually needed by the executable (and it detects this from left\
    \ to right). My recent archlinux distribution doesn't use this flag by default,\
    \ so it didn't give an error for not following the correct order.</p>\n<p>It is\
    \ not correct to omit the dependency of <code>b.so</code> against <code>d.so</code>\
    \ when creating the former. You will be required to specify the library when linking\
    \ <code>a</code> then, but <code>a</code> doesn't really need the integer <code>b</code>\
    \ itself, so it should not be made to care about <code>b</code>'s own dependencies.\
    \ </p>\n<p>Here is an example of the implications if you miss specifying the dependencies\
    \ for <code>libb.so</code></p>\n<pre><code>$ export LD_LIBRARY_PATH=. # not needed\
    \ if libs go to /usr/lib etc\n$ g++ -fpic -shared d.cpp -o libd.so\n$ g++ -fpic\
    \ -shared b.cpp -o libb.so # wrong (but links)\n\n$ g++ -L. -lb a.cpp # wrong,\
    \ as above\n$ g++ -Wl,--as-needed -L. -lb a.cpp # wrong, as above\n$ g++ a.cpp\
    \ -L. -lb # wrong, missing libd.so\n$ g++ a.cpp -L. -ld -lb # wrong order (works\
    \ on some distributions)\n$ g++ -Wl,--as-needed a.cpp -L. -ld -lb # wrong order\
    \ (like static libs)\n$ g++ -Wl,--as-needed a.cpp -L. -lb -ld # \"right\"\n</code></pre>\n\
    <p>If you now look into what dependencies the binary has, you note the binary\
    \ itself depends also on <code>libd</code>, not just <code>libb</code> as it should.\
    \ The binary will need to be relinked if <code>libb</code> later depends on another\
    \ library, if you do it this way. And if someone else loads <code>libb</code>\
    \ using <code>dlopen</code> at runtime (think of loading plugins dynamically),\
    \ the call will fail as well. So the <code>\"right\"</code> really should be a\
    \ <code>wrong</code> as well. </p>\n</div>"
- - Why does the order in which libraries are linked sometimes cause errors in GCC?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The GNU ld linker is a so-called\
    \ smart linker.  It will keep track of the functions used by preceding static\
    \ libraries, permanently tossing out those functions that are not used from its\
    \ lookup tables.  The result is that if you link a static library too early, then\
    \ the functions in that library are no longer available to static libraries later\
    \ on the link line.  </p>\n<p>The typical UNIX linker works from left to right,\
    \ so put all your dependent libraries on the left, and the ones that satisfy those\
    \ dependencies on the right of the link line.  You may find that some libraries\
    \ depend on others while at the same time other libraries depend on them.  This\
    \ is where it gets complicated.  When it comes to circular references, fix your\
    \ code!</p>\n</div>"
- - Why does the order in which libraries are linked sometimes cause errors in GCC?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Here's an example to make it\
    \ clear how things work with GCC when <strong>static</strong> libraries are involved.\
    \ So let's assume we have the following scenario:</p>\n<ul>\n<li><code>myprog.o</code>\
    \ - containing <code>main()</code> function, dependent on <code>libmysqlclient</code></li>\n\
    <li><code>libmysqlclient</code> - static, for the sake of the example (you'd prefer\
    \ the shared library, of course, as the <code>libmysqlclient</code> is huge);\
    \ in <code>/usr/local/lib</code>; and dependent on stuff from <code>libz</code></li>\n\
    <li><code>libz</code> (dynamic)</li>\n</ul>\n<p>How do we link this? (Note: examples\
    \ from compiling on Cygwin using gcc 4.3.4)</p>\n<pre><code>gcc -L/usr/local/lib\
    \ -lmysqlclient myprog.o\n# undefined reference to `_mysql_init'\n# myprog depends\
    \ on libmysqlclient\n# so myprog has to come earlier on the command line\n\ngcc\
    \ myprog.o -L/usr/local/lib -lmysqlclient\n# undefined reference to `_uncompress'\n\
    # we have to link with libz, too\n\ngcc myprog.o -lz -L/usr/local/lib -lmysqlclient\n\
    # undefined reference to `_uncompress'\n# libz is needed by libmysqlclient\n#\
    \ so it has to appear *after* it on the command line\n\ngcc myprog.o -L/usr/local/lib\
    \ -lmysqlclient -lz\n# this works\n</code></pre>\n</div>"
- - What's the difference between âSTLâ and âC++ Standard Libraryâ?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The \"STL\" <a href=\"http://en.wikipedia.org/wiki/Standard_Template_Library#History\"\
    \ rel=\"noreferrer\">was written by Alexander Stepanov</a> in the days long before\
    \ C++ was standardised. C++ existed through the 80s, but what we now call \"<a\
    \ href=\"http://en.wikipedia.org/wiki/C%2B%2B\" rel=\"noreferrer\">C++</a>\" is\
    \ the language standardised in ISO/IEC 14882:2014 (and earlier versions, such\
    \ as ISO/IEC 14882:2011).</p>\n<p>The STL was already widely used as a library\
    \ for C++, giving programmers access to containers, iterators and algorithms.\
    \ When the standardisation happened, the language committee designed <em>parts\
    \ of</em> the C++ Standard Library (which is part of the language standard) to\
    \ <em>very</em> closely match the STL.</p>\n<p>Over the years, many people â including\
    \ prominent book authors, and various websites â have continued to refer to the\
    \ C++ Standard Library as \"the STL\", despite the fact that the two entities\
    \ are separate and that there are some differences. These differences are even\
    \ more pronounced in the upcoming new C++ standard, which includes various features\
    \ and significantly alters some classes.</p>\n<p>The original STL is now often\
    \ called \"an implementation of the C++ Standard Template Library\" (rather backwards\
    \ to actual history!), in the same way that your Microsoft Visual Studio or GCC\
    \ ships an implementation of the C++ Standard Library. But the \"Standard Template\
    \ Library\" and the \"Standard Library\" are not the same thing.</p>\n<p>The battle\
    \ is about whether the current Standard Library should be called \"the STL\" in\
    \ whole or in part, and/or whether it matters what it's called.</p>\n<p><strong>For\
    \ \"STL\"</strong></p>\n<p>There is a school of thought that says that everybody\
    \ knows now that \"STL\" means the standard library, just as everybody now knows\
    \ that \"C++\" is the ISO-standardised language.</p>\n<p>It also includes those\
    \ who believe that <em>it doesn't really matter</em> as long as all parties understand\
    \ what is being talked about.</p>\n<p>It's a term made even more prevalent by\
    \ the nature of the beast, much of which makes heavy use of the C++ feature known\
    \ as \"templates\".</p>\n<p><strong>For \"C++ Standard Library\" (or stdlib)</strong></p>\n\
    <p>However, there is another school of thought â to which I subscribe â that says\
    \ that this is confusing. People learning C++ for the first time <em>do not</em>\
    \ know this distinction, and may not notice small language differences.</p>\n\
    <p>The author of that article has numerous times encountered people who believe\
    \ that the entire C++ Standard Library <em>is</em> the STL, including features\
    \ that were never part of the STL itself. Most vocal proponents of \"the STL\"\
    , in contrast, know exactly what they mean by it and refuse to believe that not\
    \ everybody \"gets it\". Clearly, the term's usage is not uniform.</p>\n<p>In\
    \ addition, there are some STL-like libraries that are in fact implementations\
    \ of the original STL, not the C++ Standard Library. Until recently, <a href=\"\
    http://stlport.sourceforge.net/\" rel=\"noreferrer\">STLPort</a> was one of them\
    \ (and even there, <a href=\"http://www.stlport.com/doc/sgi_stl.html\" rel=\"\
    noreferrer\">the confusion</a> abounds!).</p>\n<p>Further, the C++ Standard does\
    \ not contain the text \"STL\" anywhere, and some people habitually employ phrases\
    \ like \"the STL is <em>included</em> in the C++ Standard Library\", which is\
    \ plain incorrect. </p>\n<p>It's my belief that continuing to propagate the usage\
    \ of the term in this way will just lead to the misunderstanding going on forever.\
    \ Alas, it may be entirely counter-productive to attempt to change things, even\
    \ if it's supposed to be for the better. We may just be stuck with double-meanings\
    \ forever.</p>\n<p><strong>Conclusion</strong></p>\n<p>I appreciate that this\
    \ post has been a little biased: I wrote the article you linked to. :) Anyway,\
    \ I hope this helps to explain the battle a bit better.</p>\n<p><strong>Update\
    \ 13/04/2011</strong></p>\n<p>Here are <a href=\"https://stackoverflow.com/revisions/5647543/1\"\
    >three</a> <a href=\"https://stackoverflow.com/questions/541022/please-help-with-stl-stringstream\"\
    >perfect</a> <a href=\"https://stackoverflow.com/revisions/1494182/3\">examples</a>\
    \ of someone who is using \"the STL\" to refer to the entire C++ Standard Library.\
    \ It continues to baffle me that so many people swear blind that nobody ever does\
    \ this, when it's plain to see almost on a daily basis.</p>\n</div>"
- - What's the difference between âSTLâ and âC++ Standard Libraryâ?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>There is no one answer that's\
    \ really correct. Alexander Stepanov developed a library he called STL (working\
    \ for HP at the time). That library was then proposed for inclusion in the C++\
    \ standard.</p>\n<p>That basically \"forked\" development. The committee included\
    \ some parts, rejected others completely, and redesigned a few (with Alexander's\
    \ participation). Development of the original library was later moved to Silicon\
    \ Graphics, but continued separately from the C++ standard library.</p>\n<p>After\
    \ those pieces were added to the standard library, some other parts of the standard\
    \ library were modified to fit better with what was added (e.g., <code>begin</code>,\
    \ <code>end</code>, <code>rbegin</code> and <code>rend</code> were added to <code>std::string</code>\
    \ so it could be used like a container). Around the same time, <em>most</em> of\
    \ the library (even pieces that were <em>completely</em> unrelated were made into\
    \ templates to accommodate different types (e.g., standard streams).</p>\n<p>Some\
    \ people also use STL as just a short form of \"STandard Library\".</p>\n<p>That\
    \ means when somebody uses the term \"STL\" they could be referring to any of\
    \ about half a dozen different things. For better or worse, most people who use\
    \ it seem to ignore the multiplicity of meanings, and assume that everybody else\
    \ will recognize what they're referring to. This leads to many misunderstandings,\
    \ and at least a few serious flame-wars that made most of the participants look\
    \ foolish because they were simply talking about entirely different things.</p>\n\
    <p>Unfortunately, the confusion is likely to continue unabated. It's much more\
    \ convenient to refer to \"STL\" than something like \"the containers, iterators,\
    \ and algorithms in the C++ standard library, but not including <code>std::string</code>,\
    \ even though it can act like a container.\" Even though \"C++ standard library\"\
    \ isn't quite as long and clumsy as that, \"STL\" is still a lot shorter and simpler\
    \ still. Until or unless somebody invents terms that are more precise (when necessary),\
    \ <strong>and</strong> just as convenient, \"STL\" will continue to be used and\
    \ confusion will continue to result.</p>\n</div>"
- - What's the difference between âSTLâ and âC++ Standard Libraryâ?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>The term \"STL\" or \"Standard\
    \ Template Library\" does not show up anywhere in the ISO 14882 C++ standard.\
    \ So referring to the C++ standard library as STL is wrong. The term \"C++ Standard\
    \ Library\" or \"standard library\" is what's officially used by ISO 14882:</p>\n\
    <blockquote>\n<h3>ISO 14882 C++ Standard:</h3>\n<p><strong>17 - Library introduction\
    \ [lib.library]:</strong></p>\n<ol>\n<li>This clauses describes the contents of\
    \ the <strong><em>C++ Standard Library</em></strong>, how\n  a well-formed C++\
    \ program makes use of\n  the library, and how a conforming\n  implementation\
    \ may provide the\n  entities in the library.</li>\n</ol>\n<p>...</p>\n</blockquote>\n\
    <p>STL is a library originally designed by Alexander Stepanov, independent of\
    \ the C++ standard. However, some components of the C++ standard library include\
    \ STL components like <code>vector</code>, <code>list</code> and algorithms like\
    \ <code>copy</code> and <code>swap</code>.</p>\n<p>But of course the C++ standard\
    \ includes much more things outside the STL, so the term \"C++ standard library\"\
    \ is more correct (and is what's actually used by the standards documents).</p>\n\
    </div>"
- - Static constant string (class member)
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You have to define your static\
    \ member outside the class definition and provide the initializer there.</p>\n\
    <p>First</p>\n<pre><code>// In a header file (if it is in a header file in your\
    \ case)\nclass A {   \nprivate:      \n  static const string RECTANGLE;\n};\n\
    </code></pre>\n<p>and then</p>\n<pre><code>// In one of the implementation files\n\
    const string A::RECTANGLE = \"rectangle\";\n</code></pre>\n<p>The syntax you were\
    \ originally trying to use (initializer inside class definition) is only allowed\
    \ with integral and enum types.</p>\n</div>"
- - Static constant string (class member)
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>In C++11 you can do now:</p>\n\
    <pre><code>class A {\n private:\n  static constexpr const char* STRING = \"some\
    \ useful string constant\";\n};\n</code></pre>\n</div>"
- - Static constant string (class member)
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Inside class definitions you\
    \ can only <em>declare</em> static members. They have to be <em>defined</em> outside\
    \ of the class. For compile-time integral constants the standard makes the exception\
    \ that you can \"initialize\" members. It's still not a definition, though. Taking\
    \ the address would not work without definition, for example.</p>\n<p>I'd like\
    \ to mention that I don't see the benefit of using std::string over const char[]\
    \ <em>for constants</em>. std::string is nice and all but it requires dynamic\
    \ initialization. So, if you write something like</p>\n<pre><code>const std::string\
    \ foo = \"hello\";\n</code></pre>\n<p>at namespace scope the constructor of foo\
    \ will be run right before execution of main starts and this constructor will\
    \ create a copy of the constant \"hello\" in the heap memory. Unless you really\
    \ need RECTANGLE to be a std::string you could just as well write</p>\n<pre><code>//\
    \ class definition with incomplete static member could be in a header file\nclass\
    \ A {\n    static const char RECTANGLE[];\n};\n\n// this needs to be placed in\
    \ a single translation unit only\nconst char A::RECTANGLE[] = \"rectangle\";\n\
    </code></pre>\n<p>There! No heap allocation, no copying, no dynamic initialization.</p>\n\
    <p>Cheers, s.</p>\n</div>"
- - When should I really use noexcept?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I think it is too early to give\
    \ a \"best practices\" answer for this as there hasn't been enough time to use\
    \ it in practice. If this was asked about throw specifiers right after they came\
    \ out then the answers would be very different to now.</p>\n<blockquote>\n<p>Having\
    \ to think about whether or not I need to append <code>noexcept</code> after every\
    \ function declaration would greatly reduce programmer productivity (and frankly,\
    \ would be a pain). </p>\n</blockquote>\n<p>Well then use it when it's obvious\
    \ that the function will never throw.</p>\n<blockquote>\n<p>When can I realistically\
    \ expect to observe a performance improvement after using <code>noexcept</code>?\
    \ [...] Personally, I care about <code>noexcept</code> because  of the increased\
    \ freedom provided to the compiler to safely apply certain kinds of optimizations.\
    \ </p>\n</blockquote>\n<p>It seems like the biggest optimization gains are from\
    \ user optimizations, not compiler ones due to the possibility of checking <code>noexcept</code>\
    \ and overloading on it. Most compilers follow a no-penalty-if-you-don't-throw\
    \ exception handling method so I doubt it would change much (or anything) on the\
    \ machine code level of your code, although perhaps reduce the binary size by\
    \ removing the handling code.</p>\n<p>Using <code>noexcept</code> in the big 4\
    \ (constructors, assignment, not destructors as they're already <code>noexcept</code>)\
    \ will likely cause the best improvements as <code>noexcept</code> checks are\
    \ 'common' in template code such as in std containers. For instance, <code>std::vector</code>\
    \ won't use your class's move unless it's marked <code>noexcept</code> (or the\
    \ compiler can deduce it otherwise).</p>\n</div>"
- - When should I really use noexcept?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>As I keep repeating these days:\
    \ <strong>semantics first</strong>.</p>\n<p>Adding <code>noexcept</code>, <code>noexcept(true)</code>\
    \ and <code>noexcept(false)</code> is first and foremost about semantics. It only\
    \ incidentally condition a number of possible optimizations.</p>\n<p>As a programmer\
    \ reading code, the presence of <code>noexcept</code> is akin to that of <code>const</code>:\
    \ it helps me better grok what may or may not happen. Therefore, it is worthwhile\
    \ spending some time thinking about whether or not you know if the function will\
    \ throw. For reminder, any kind of dynamic memory allocation may throw.</p>\n\
    <hr/>\n<p>Okay, now on to the possible optimizations.</p>\n<p>The most obvious\
    \ optimizations are actually performed in the libraries. C++11 provides a number\
    \ of traits that allows knowing whether a function is <code>noexcept</code> or\
    \ not, and the Standard Library implementation themselves will use those traits\
    \ to favor <code>noexcept</code> operations on the user-defined objects they manipulate,\
    \ if possible. Such as <em>move semantics</em>.</p>\n<p>The compiler may only\
    \ shave a bit of fat (perhaps) from the exception handling data, because it <em>has</em>\
    \ to take into account the fact that you may have lied. If a function marked <code>noexcept</code>\
    \ does throw, then <code>std::terminate</code> is called.</p>\n<p>These semantics\
    \ were chosen for two reasons:</p>\n<ul>\n<li>immediately benefiting from <code>noexcept</code>\
    \ even when dependencies do not use it already (backward compatibility)</li>\n\
    <li>allowing the specification of <code>noexcept</code> when calling functions\
    \ that may theoretically throw but are not expected to for the given arguments</li>\n\
    </ul>\n</div>"
- - When should I really use noexcept?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>This actually does make a (potentially)\
    \ huge difference to the optimizer in the compiler. Compilers have actually had\
    \ this feature for years via the empty throw() statement after a function definition,\
    \ as well as propriety extensions. I can assure you that modern compilers do take\
    \ advantage of this knowledge to generate better code.</p>\n<p>Almost every optimization\
    \ in the compiler uses something called a \"flow graph\" of a function to reason\
    \ about what is legal. A flow graph consists of what are generally called \"blocks\"\
    \ of the function (areas of code that have a single entrance and a single exit)\
    \ and edges between the blocks to indicate where flow can jump to. Noexcept alters\
    \ the flow graph.</p>\n<p>You asked for a specific example. Consider this code:</p>\n\
    <pre><code>void foo(int x) {\n    try {\n        bar();\n        x = 5;\n    \
    \    // other stuff which doesn't modify x, but might throw\n    } catch(...)\
    \ {\n        // don't modify x\n    }\n\n    baz(x); // or other statement using\
    \ x\n}\n</code></pre>\n<p>The flow graph for this function is different if <code>bar</code>\
    \ is labeled <code>noexcept</code> (there is no way for execution to jump between\
    \ the end of <code>bar</code> and the catch statement). When labeled as <code>noexcept</code>,\
    \ the compiler is certain the value of x is 5 during the baz function - the x=5\
    \ block is said to \"dominate\" the baz(x) block without the edge from <code>bar()</code>\
    \ to the catch statement. It can then do something called \"constant propagation\"\
    \ to generate more efficient code. Here if baz is inlined, the statements using\
    \ x might also contain constants and then what used to be a runtime evaluation\
    \ can be turned into a compile-time evaluation, etc.</p>\n<p>Anyway, short answer:\
    \ <code>noexcept</code> lets the compiler generate a tighter flow graph, and the\
    \ flow graph is used to reason about all sorts of common compiler optimizations.\
    \ To a compiler, user annotations of this nature are awesome. The compiler will\
    \ try to figure this stuff out, but it usually can't (the function in question\
    \ might be in another object file not visible to the compiler or transitively\
    \ use some function which is not visible), or when it does there is some trivial\
    \ exception which might be thrown that you're not even aware of so it can't implicitly\
    \ label it as <code>noexcept</code> (allocating memory might throw bad_alloc,\
    \ for example).</p>\n</div>"
- - Which is better option to use for dividing an integer number by 2?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Use the operation that best describes\
    \ what you are trying to do.</p>\n<ul>\n<li>If you are treating the number as\
    \ a sequence of bits, use bitshift.</li>\n<li>If you are treating it as a numerical\
    \ value, use division.</li>\n</ul>\n<p>Note that they are not exactly equivalent.\
    \ They can give different results for negative integers. For example: </p>\n<pre><code>-5\
    \ / 2  = -2\n-5 &gt;&gt; 1 = -3\n</code></pre>\n<p><a href=\"http://ideone.com/lnABV\"\
    \ rel=\"noreferrer\">(ideone)</a></p>\n</div>"
- - Which is better option to use for dividing an integer number by 2?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Does the first one look like\
    \ dividing? No. If you want to divide, use <code>x / 2</code>. Compiler can optimise\
    \ it to use bit-shift if possible (it's called strength reduction), which makes\
    \ it a useless micro-optimisation if you do it on your own.</p>\n</div>"
- - Which is better option to use for dividing an integer number by 2?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>To pile on: there are so many\
    \ reasons to favor using <code>x = x / 2;</code>  Here are some:</p>\n<ul>\n<li><p>it\
    \ expresses your intent more clearly (assuming you're not dealing with bit twiddling\
    \ register bits or something)</p></li>\n<li><p>the compiler will reduce this to\
    \ a shift operation anyway</p></li>\n<li><p>even if the compiler didn't reduce\
    \ it and chose a slower operation than the shift, the likelihood that this ends\
    \ up affecting your program's performance in a measurable way is itself vanishingly\
    \ small (and if it does affect it measurably, then you have an actual reason to\
    \ use a shift)</p></li>\n<li><p>if the division is going to be part of a larger\
    \ expression, you're more likely to get the precedence right if you use the division\
    \ operator:</p>\n<pre><code>x = x / 2 + 5;\nx = x &gt;&gt; 1 + 5;  // not the\
    \ same as above\n</code></pre></li>\n<li><p>signed arithmetic might complicate\
    \ things even more than the precedence problem mentioned above</p></li>\n<li><p>to\
    \ reiterate - the compiler will already do this for you anyway. In fact, it'll\
    \ convert division by a constant to a series of shifts, adds, and multiplies for\
    \ all sorts of numbers, not just powers of two. See <a href=\"https://stackoverflow.com/a/1168616/12711\"\
    >this question</a> for links to even more information about this.</p></li>\n</ul>\n\
    <p>In short, you buy nothing by coding a shift when you really mean to multiply\
    \ or divide, except maybe an increased possibility of introducing a bug. It's\
    \ been a lifetime since compilers weren't smart enough to optimize this kind of\
    \ thing to a shift when appropriate.</p>\n</div>"
- - How to get rid of `deprecated conversion from string constant to âchar*â` warnings
    in GCC?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>I believe passing <code>-Wno-write-strings</code>\
    \ to gcc will suppress this warning.</p>\n</div>"
- - How to get rid of `deprecated conversion from string constant to âchar*â` warnings
    in GCC?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Any functions into which you\
    \ pass string literals <code>\"I am a string literal\"</code> should use <code>char\
    \ const *</code> as the type instead of <code>char*</code>.</p>\n<p>If you're\
    \ going to fix something, fix it right.</p>\n<p><strong>Explanation:</strong></p>\n\
    <p>You can not use string literals to initialise strings that will be modified,\
    \ because they are of type <code>const char*</code>. Casting away the constness\
    \ to later modify them is <a href=\"https://stackoverflow.com/questions/3801557/can-we-change-the-value-of-an-object-defined-with-const-through-pointers\"\
    >undefined behaviour</a>, so you have to copy your <code>const char*</code> strings\
    \ <code>char</code> by <code>char</code> into dynamically allocated <code>char*</code>\
    \ strings in order to modify them.</p>\n<p><strong>Example:</strong></p>\n<pre><code>#include\
    \ &lt;iostream&gt;\n\nvoid print(char* ch);\n\nvoid print(const char* ch) {\n\
    \    std::cout&lt;&lt;ch;\n}\n\nint main() {\n    print(\"Hello\");\n    return\
    \ 0;\n}\n</code></pre>\n</div>"
- - How to get rid of `deprecated conversion from string constant to âchar*â` warnings
    in GCC?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Check out gcc's <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html\"\
    \ rel=\"nofollow noreferrer\">Diagnostic Pragma</a> support, and the list of <a\
    \ href=\"http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/gcc/warning-options.html\"\
    \ rel=\"nofollow noreferrer\">-W warning options</a> (changed: <a href=\"http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/4/html/Using_the_GNU_Compiler_Collection/warning-options.html\"\
    \ rel=\"nofollow noreferrer\">new link to warning options</a>).</p>\n<p>For gcc,\
    \ you can use <code>#pragma warning</code> directives like explained <a href=\"\
    https://stackoverflow.com/a/8140772/2436175\">here</a>.</p>\n</div>"
- - Where do I find the current C or C++ standard documents?
  - "<div class=\"post-text\" itemprop=\"text\">\n<h3>PDF versions of the standard</h3>\n\
    <p>As of 1st September 2014, the best locations by price for C and C++ standards\
    \ documents in PDF are:</p>\n<ul>\n<li>C++17 â ISO/IEC 14882:2017: <a href=\"\
    https://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882%3a2017+%282018%29\"\
    \ rel=\"nofollow noreferrer\">$116 from ansi.org</a></li>\n<li>C++14 â ISO/IEC\
    \ 14882:2014: <a href=\"https://shop.standards.govt.nz/catalog/14882%3A2014%28ISO%7CIEC%29/view\"\
    \ rel=\"nofollow noreferrer\">$90 NZD (about $60 US) from Standards New Zealand</a></li>\n\
    <li>C++11 â ISO/IEC 14882:2011: <a href=\"http://www.techstreet.com/products/1852925\"\
    \ rel=\"nofollow noreferrer\"><s>$60 from ansi.org</s> $60 from Techstreet</a></li>\n\
    <li>C++03 â ISO 14882:2003: <a href=\"https://infostore.saiglobal.com/store/details.aspx?ProductID=712174\"\
    \ rel=\"nofollow noreferrer\"><s>$30 from ansi.org</s> $48 from SAI Global</a></li>\n\
    <li><p>C++98 â ISO/IEC 14882:1998: <a href=\"https://shop.standards.govt.nz/catalog/14882%3A1998%28ISO|IEC%29/view\"\
    \ rel=\"nofollow noreferrer\">$90 NZD (about $60 US) from Standards New Zealand</a></p></li>\n\
    <li><p>C17/C18 â ISO/IEC 9899:2018: <a href=\"https://webstore.ansi.org/RecordDetail.aspx?sku=ISO%2fIEC+9899%3a2018\"\
    \ rel=\"nofollow noreferrer\">$232 from ansi.org</a> / <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf\"\
    \ rel=\"nofollow noreferrer\">N2176 / c17_updated_proposed_fdis.pdf draft from\
    \ November 2017</a> (Link broken, see <a href=\"https://web.archive.org/web/20181230041359if_/http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf\"\
    \ rel=\"nofollow noreferrer\">Wayback Machine N2176</a>)</p></li>\n<li>C11 â ISO/IEC\
    \ 9899:2011: <a href=\"http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2FISO%2FIEC+9899-2012\"\
    \ rel=\"nofollow noreferrer\"><s>$30</s> $60 from ansi.org</a> / <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\"\
    \ rel=\"nofollow noreferrer\">WG14 draft version N1570</a></li>\n<li>C99 â ISO\
    \ 9899:1999: <a href=\"http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS/ISO/IEC%209899-1999%20%28R2005%29\"\
    \ rel=\"nofollow noreferrer\"><s>$30</s> $60 from ansi.org</a> / <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\"\
    \ rel=\"nofollow noreferrer\">WG14 draft version N1256</a></li>\n<li>C90 â AS\
    \ 3955-1991: <a href=\"http://www.techstreet.com/products/1178768\" rel=\"nofollow\
    \ noreferrer\"><s>$141 from ansi.org</s> $175 from Techstreet</a> (the Australian\
    \ version of C90, identical to ISO 9899:1990)</li>\n<li>C90 â 9899:1990 <a href=\"\
    https://infostore.saiglobal.com/store/Details.aspx?ProductID=434093\" rel=\"nofollow\
    \ noreferrer\">Hardcopy available from SAI Global ($88 + shipping)</a></li>\n\
    </ul>\n<p>You cannot usually get old revisions of a standard (any standard) directly\
    \ from the standards bodies shortly after a new edition of the standard is released.\
    \  Thus, standards for C89, C90, C99, C++98, C++03 will be hard to find for purchase\
    \ from a standards body.  If you need an old revision of a standard, check <a\
    \ href=\"http://www.techstreet.com/\" rel=\"nofollow noreferrer\">Techstreet</a>\
    \ as one possible source.  For example, it can still provide the Canadian version\
    \ CAN/CSA-ISO/IEC 9899:1990 standard in PDF, for a fee.</p>\n<h3>Non-PDF electronic\
    \ versions of the standard</h3>\n<ul>\n<li>C89 â Draft version in ANSI text format:\
    \ (<a href=\"https://web.archive.org/web/20161223125339/http://flash-gordon.me.uk/ansi.c.txt\"\
    \ rel=\"nofollow noreferrer\">https://web.archive.org/web/20161223125339/http://flash-gordon.me.uk/ansi.c.txt</a>)</li>\n\
    <li>C90 TC1; ISO/IEC 9899 TCOR1, single-page HTML document: (<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/tc1.htm\"\
    \ rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg14/www/docs/tc1.htm</a>)</li>\n\
    <li>C90 TC2; ISO/IEC 9899 TCOR2, single-page HTML document: (<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/tc2.htm\"\
    \ rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg14/www/docs/tc2.htm</a>)</li>\n\
    </ul>\n<h3>Print versions of the standard</h3>\n<p>Print copies of the standards\
    \ are available from national standards bodies and <a href=\"http://www.iso.ch/\"\
    \ rel=\"nofollow noreferrer\">ISO</a> but are very expensive.</p>\n<p>If you want\
    \ a hardcopy of the C90 standard for much less money than above, you may be able\
    \ to find a cheap used copy of <a href=\"http://jargonwiki.com/wiki/Bullschildt\"\
    \ rel=\"nofollow noreferrer\">Herb Schildt</a>'s book <a href=\"http://www.davros.org/c/schildt.html\"\
    \ rel=\"nofollow noreferrer\"><em>The Annotated ANSI Standard</em></a> at <a href=\"\
    https://rads.stackoverflow.com/amzn/click/com/0078819520\" rel=\"nofollow noreferrer\"\
    >Amazon</a>, which contains the actual text of the standard (useful) and commentary\
    \ on the standard (less useful).</p>\n<p>The C99 and C++03 standards are available\
    \ in book form from Wiley and the BSI (British Standards Institute):</p>\n<ul>\n\
    <li><a href=\"https://rads.stackoverflow.com/amzn/click/com/0470846747\" rel=\"\
    nofollow noreferrer\">C++03 Standard</a> on Amazon</li>\n<li><a href=\"https://rads.stackoverflow.com/amzn/click/com/0470845732\"\
    \ rel=\"nofollow noreferrer\">C99 Standard</a> on Amazon</li>\n</ul>\n<h3>Standards\
    \ committee draft versions</h3>\n<p>The working draft for future standards is\
    \ often available from the committee websites:</p>\n<ul>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg21/\"\
    \ rel=\"nofollow noreferrer\">C++ committee website</a></li>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg14/\"\
    \ rel=\"nofollow noreferrer\">C committee website</a></li>\n</ul>\n<p>Note that\
    \ these documents are not the same as the standard, though the versions just prior\
    \ to the meetings that decide on a standard are usually very close to what is\
    \ in the final standard.  The FCD (Final Committee Draft) versions are password\
    \ protected; you need to be on the standards committee to get them.</p>\n<p>However,\
    \ in my opinion, even though the draft versions might be very close to the final\
    \ ratified versions of the standards, you should really get a copy of the actual\
    \ documents â especially if you're planning on quoting them as references.  Of\
    \ course, starving students should go ahead and use the drafts if strapped for\
    \ cash.</p>\n<hr/>\n<p>It appears that, if you are willing and able to wait a\
    \ few months after ratification of a standard, to search for \"INCITS/ISO/IEC\"\
    \ instead of \"ISO/IEC\" when looking for a standard is the key. This way I was\
    \ able to find the C++11 standard at reasonable price and now the C11 standard.\
    \ So, as an example you search for \"INCITS/ISO/IEC 9899:2011\" instead of \"\
    ISO/IEC 9899:2011\" on <a href=\"http://webstore.ansi.org\" rel=\"nofollow noreferrer\"\
    >webstore.ansi.org</a> and you will find the reasonably priced PDF version.</p>\n\
    <hr/>\n<p>The site <a href=\"https://wg21.link/\" rel=\"nofollow noreferrer\"\
    >https://wg21.link/</a> provides short-URL links to the C++ current working draft\
    \ and draft standards, and committee papers:</p>\n<ul>\n<li><a href=\"https://wg21.link/std11\"\
    \ rel=\"nofollow noreferrer\">https://wg21.link/std11</a> - C++11</li>\n<li><a\
    \ href=\"https://wg21.link/std14\" rel=\"nofollow noreferrer\">https://wg21.link/std14</a>\
    \ - C++14</li>\n<li><a href=\"https://wg21.link/std17\" rel=\"nofollow noreferrer\"\
    >https://wg21.link/std17</a> - C++17</li>\n<li><a href=\"https://wg21.link/std\"\
    \ rel=\"nofollow noreferrer\">https://wg21.link/std</a> - current working draft</li>\n\
    </ul>\n</div>"
- - Where do I find the current C or C++ standard documents?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Online versions of the standard\
    \ can be found:</p>\n<h3>Working Draft, Standard for Programming Language C++</h3>\n\
    <p><strong><em>The following all draft versions of the standard</em></strong>:<br/>\n\
    All the following are freely downloadable<br/>\n2018-02-12: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4727.pdf\"\
    \ rel=\"noreferrer\">N4727</a> <a href=\"https://github.com/cplusplus/draft/raw/master/papers/n4727.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2017-11-27: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4713.pdf\"\
    \ rel=\"noreferrer\">N4713</a> <a href=\"https://github.com/cplusplus/draft/raw/master/papers/n4713.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2017-10-16: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4700.pdf\"\
    \ rel=\"noreferrer\">N4700</a> <a href=\"https://github.com/cplusplus/draft/raw/master/papers/n4700.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2017-07-30: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4687.pdf\"\
    \ rel=\"noreferrer\">N4687</a> <a href=\"https://github.com/cplusplus/draft/raw/master/papers/n4687.pdf\"\
    \ rel=\"noreferrer\">git</a> </p>\n<p><strong><em>This seems to be the new standard:</em></strong><br/>\n\
    These version requires Authentication<br/>\n2017-03-21: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4660.pdf\"\
    \ rel=\"noreferrer\">N4660</a> is the C++17 Draft Standard  </p>\n<p><strong><em>The\
    \ following all draft versions of the standard</em></strong>:<br/>\nAll the following\
    \ are freely downloadable<br/>\n2017-03-21: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf\"\
    \ rel=\"noreferrer\">N4659</a> <a href=\"https://github.com/cplusplus/draft/raw/master/papers/n4659.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2017-02-06: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4640.pdf\"\
    \ rel=\"noreferrer\">N4640</a> <a href=\"https://github.com/cplusplus/draft/raw/master/papers/n4640.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2016-11-28: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4618.pdf\"\
    \ rel=\"noreferrer\">N4618</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4618.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2016-07-12: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4606.pdf\"\
    \ rel=\"noreferrer\">N4606</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4606.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2016-05-30: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4594.pdf\"\
    \ rel=\"noreferrer\">N4594</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4594.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2016-03-19: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4582.pdf\"\
    \ rel=\"noreferrer\">N4582</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4582.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2015-11-09: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4567.pdf\"\
    \ rel=\"noreferrer\">N4567</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4567.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2015-05-22: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4527.pdf\"\
    \ rel=\"noreferrer\">N4527</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4527.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2015-04-10: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4431.pdf\"\
    \ rel=\"noreferrer\">N4431</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4431.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2014-11-19: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\"\
    \ rel=\"noreferrer\">N4296</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4296.pdf\"\
    \ rel=\"noreferrer\">git</a> </p>\n<p><strong><em>This seems to be the old C++14\
    \ standard</em></strong>:<br/>\nThese version requires Authentication<br/>\n2014-10-07:\
    \ <a href=\"http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4140.pdf\"\
    \ rel=\"noreferrer\">N4140</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf\"\
    \ rel=\"noreferrer\">git</a> Essentially C++14 with minor errors and typos corrected<br/>\n\
    2014-09-02: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4141.pdf\"\
    \ rel=\"noreferrer\">N4141</a> <a href=\"https://github.com/cplusplus/draft/tree/n4141\"\
    \ rel=\"noreferrer\">git</a> Standard C++14<br/>\n2014-03-02: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n3937.pdf\"\
    \ rel=\"noreferrer\">N3937</a><br/>\n2014-03-02: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n3936.pdf\"\
    \ rel=\"noreferrer\">N3936</a> <a href=\"https://github.com/cplusplus/draft/blob/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers/N3936.pdf\"\
    \ rel=\"noreferrer\">git</a></p>\n<p><strong><em>The following all draft versions\
    \ of the standard</em></strong>:<br/>\nAll the following are freely downloadable<br/>\n\
    2013-10-13: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\"\
    \ rel=\"noreferrer\">N3797</a> <a href=\"https://github.com/cplusplus/draft/blob/master/papers/N3797.pdf\"\
    \ rel=\"noreferrer\">git</a><br/>\n2013-05-16: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3691.pdf\"\
    \ rel=\"noreferrer\">N3691</a><br/>\n2013-05-15: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf\"\
    \ rel=\"noreferrer\">N3690</a><br/>\n2012-11-02: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\"\
    \ rel=\"noreferrer\">N3485</a><br/>\n2012-02-28: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\"\
    \ rel=\"noreferrer\">N3376</a><br/>\n2012-01-16: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\"\
    \ rel=\"noreferrer\">N3337</a> <a href=\"https://github.com/cplusplus/draft/tree/n3337\"\
    \ rel=\"noreferrer\">git</a> Essentially C++11 with minor errors and typos corrected\
    \  </p>\n<p><strong><em>This seems to be the old C++11 standard</em></strong>:<br/>\n\
    This version requires Authentication<br/>\n2011-04-05: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/prot/14882fdis/n3291.pdf\"\
    \ rel=\"noreferrer\">N3291</a>  C++11 (Or Very Close)</p>\n<p><strong><em>The\
    \ following all draft versions of the standard</em></strong>:<br/>\nAll the following\
    \ are freely downloadable<br/>\n2011-02-28: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\"\
    \ rel=\"noreferrer\">N3242</a>  (differences from N3291 very minor)<br/>\n2010-11-27:\
    \ <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2010/n3225.pdf\"\
    \ rel=\"noreferrer\">N3225</a><br/>\n2010-08-21: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2010/n3126.pdf\"\
    \ rel=\"noreferrer\">N3126</a><br/>\n2010-03-29: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2010/n3090.pdf\"\
    \ rel=\"noreferrer\">N3090</a><br/>\n2010-02-16: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2010/n3035.pdf\"\
    \ rel=\"noreferrer\">N3035</a><br/>\n2009-11-09: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2009/n3000.pdf\"\
    \ rel=\"noreferrer\">N3000</a><br/>\n2009-09-25: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2009/n2960.pdf\"\
    \ rel=\"noreferrer\">N2960</a><br/>\n2009-06-22: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2009/n2914.pdf\"\
    \ rel=\"noreferrer\">N2914</a><br/>\n2009-03-23: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2009/n2857.pdf\"\
    \ rel=\"noreferrer\">N2857</a><br/>\n2008-10-04: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2798.pdf\"\
    \ rel=\"noreferrer\">N2798</a><br/>\n2008-08-25: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2723.pdf\"\
    \ rel=\"noreferrer\">N2723</a><br/>\n2008-06-27: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2691.pdf\"\
    \ rel=\"noreferrer\">N2691</a><br/>\n2008-05-19: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2606.pdf\"\
    \ rel=\"noreferrer\">N2606</a><br/>\n2008-03-17: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2588.pdf\"\
    \ rel=\"noreferrer\">N2588</a><br/>\n2008-02-04: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2521.pdf\"\
    \ rel=\"noreferrer\">N2521</a><br/>\n2007-10-22: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2007/n2461.pdf\"\
    \ rel=\"noreferrer\">N2461</a><br/>\n2007-08-06: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2007/n2369.pdf\"\
    \ rel=\"noreferrer\">N2369</a><br/>\n2007-06-25: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2007/n2315.pdf\"\
    \ rel=\"noreferrer\">N2315</a><br/>\n2007-05-07: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2007/n2284.pdf\"\
    \ rel=\"noreferrer\">N2284</a><br/>\n2006-11-03: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2006/n2134.pdf\"\
    \ rel=\"noreferrer\">N2134</a><br/>\n2006-04-21: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2006/n2009.pdf\"\
    \ rel=\"noreferrer\">N2009</a><br/>\n2005-10-19: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\"\
    \ rel=\"noreferrer\">N1905</a><br/>\n2005-04-27: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1804.pdf\"\
    \ rel=\"noreferrer\">N1804</a> </p>\n<p><strong>This seems to be the old C++03\
    \ standard:</strong><br/>\nAll the below versions require Authentication<br/>\n\
    2004-11-05: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/prot/14882fdis/n1733.pdf\"\
    \ rel=\"noreferrer\">N1733</a><br/>\n2004-07-16: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/prot/14882fdis/n1655.pdf\"\
    \ rel=\"noreferrer\">N1655</a> Unofficial<br/>\n2004-02-07: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/prot/14882fdis/n1577.pdf\"\
    \ rel=\"noreferrer\">N1577</a> C++03 (Or Very Close)<br/>\n2001-09-13: <a href=\"\
    http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2001/n1316\" rel=\"noreferrer\"\
    >N1316</a> Draft Expanded Technical Corrigendum<br/>\n1997-00-00: N1117   Draft\
    \ Expanded Technical Corrigendum  </p>\n<p><strong><em>The following all draft\
    \ versions of the standard</em></strong>:<br/>\nAll the following are freely downloadable<br/>\n\
    1996-00-00: <a href=\"http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/1996/N0836.pdf\"\
    \ rel=\"noreferrer\">N0836</a>  Draft Expanded Technical Corrigendum<br/>\n1995-00-00:\
    \ N0785 Working Paper for Draft Proposed International Standard for Information\
    \ Systems - Programming Language C++  </p>\n<h3>Other Interesting Papers:</h3>\n\
    <p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/\" rel=\"\
    noreferrer\">2018</a> /\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/\"\
    \ rel=\"noreferrer\">2017</a> /\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/\"\
    \ rel=\"noreferrer\">2016</a> /\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/\"\
    \ rel=\"noreferrer\">2015</a> /\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/\"\
    \ rel=\"noreferrer\">2014</a> /\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/\"\
    \ rel=\"noreferrer\">2013</a> /\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/\"\
    \ rel=\"noreferrer\">2012</a> /\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/\"\
    \ rel=\"noreferrer\">2011</a> </p>\n</div>"
- - Where do I find the current C or C++ standard documents?
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>C99 is <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\"\
    \ rel=\"noreferrer\">available online</a>. Quoted from <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/standards.html#9899\"\
    \ rel=\"noreferrer\">www.open-std.org</a>:</p>\n<blockquote>\n<p>The lastest publically\
    \ available version of the standard is the\n  combined C99 + TC1 + TC2 + TC3,\
    \ <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"\
    noreferrer\">WG14 N1256</a>, dated 2007-09-07. This is\n  a WG14 working paper,\
    \ but it reflects the consolidated standard at the\n  time of issue.</p>\n</blockquote>\n\
    </div>"
- - How to use the PI constant in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>On some (especially older) platforms\
    \ (see the comments below) you might need to</p>\n<pre><code>#define _USE_MATH_DEFINES\n\
    </code></pre>\n<p>and then include the necessary header file:</p>\n<pre><code>#include\
    \ &lt;math.h&gt;\n</code></pre>\n<p>and the value of pi can be accessed via:</p>\n\
    <pre><code>M_PI\n</code></pre>\n<p>In my <code>math.h</code> (2014) it is defined\
    \ as: </p>\n<pre><code># define M_PI           3.14159265358979323846  /* pi */\n\
    </code></pre>\n<p>but check your <code>math.h</code> for more. An extract from\
    \ the \"old\" <code>math.h</code> (in 2009):</p>\n<pre><code>/* Define _USE_MATH_DEFINES\
    \ before including math.h to expose these macro\n * definitions for common math\
    \ constants.  These are placed under an #ifdef\n * since these commonly-defined\
    \ names are not part of the C/C++ standards.\n */\n</code></pre>\n<p>However:</p>\n\
    <ol>\n<li><p>on newer platforms (at least on my 64 bit Ubuntu 14.04) I do not\
    \ need to define the <code>_USE_MATH_DEFINES</code> </p></li>\n<li><p>On (recent)\
    \ Linux platforms there are <code>long double</code> values too provided as a\
    \ GNU Extension:</p>\n<pre><code># define M_PIl          3.141592653589793238462643383279502884L\
    \ /* pi */\n</code></pre></li>\n</ol>\n</div>"
- - How to use the PI constant in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>Pi can be calculated as <code>atan(1)*4</code>.\
    \ You could calculate the value this way and cache it.</p>\n</div>"
- - How to use the PI constant in C++
  - "<div class=\"post-text\" itemprop=\"text\">\n<p>You could also use boost, which\
    \ defines important math constants with maximum accuracy for the requested type\
    \ (i.e. float vs double).  </p>\n<pre><code>const double pi = boost::math::constants::pi&lt;double&gt;();\n\
    </code></pre>\n<p>Check out the <a href=\"http://www.boost.org/doc/libs/1_37_0/libs/math/doc/sf_and_dist/html/math_toolkit/toolkit/internals1/constants.html\"\
    \ rel=\"noreferrer\">boost documentation</a> for more examples.</p>\n</div>"
